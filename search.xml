<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django Introduction</title>
      <link href="/2020/04/18/django-introduction/"/>
      <url>/2020/04/18/django-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="一、设计模式"><a href="#一、设计模式" class="headerlink" title="一、设计模式"></a>一、设计模式</h2><h3 id="1-MVC"><a href="#1-MVC" class="headerlink" title="1. MVC"></a>1. MVC</h3><blockquote><p>一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到<br>一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。<br>MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。<br><strong>核心：解耦</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdyb3v90vaj30go0dcdh1.jpg" alt="图解"></p><p><strong>编程模式：</strong></p><ul><li><p>Model (模型)</p><ul><li>是应用程序中用于处理应用程序数据逻辑的部分</li><li>通常模型对象负责在数据库中存取数据</li></ul></li><li><p>View (视图)</p><ul><li>是应用程序中处理数据显示的部分</li><li>通常视图是依据模型数据创建的</li></ul></li><li><p>Controller (控制器)</p><ul><li>是应用程序中处理用户交互的部分</li><li>通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据</li></ul></li></ul><p><strong>优点: 降低各功能模块之间的耦合性，方便变更，更容易重构代码，最大程度上实现代码的重用</strong></p><h3 id="2-MTV"><a href="#2-MTV" class="headerlink" title="2. MTV"></a>2. MTV</h3><blockquote><p>本质上与MVC模式没有什么差别，也是各组件之间为了保持松耦合关系，只是定义上有些许不同</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdybe6ixioj31be0lt7ar.jpg" alt="图解"></p><p><strong>编程模式</strong></p><ul><li><p>Model(模型)</p><ul><li>负责业务对象与数据库的对象(ORM)</li></ul></li><li><p>Template(模版)</p><ul><li>负责如何把页面展示给用户</li></ul></li><li><p>View(视图)</p><ul><li>负责业务逻辑，并在适当的时候调用Model和Template</li></ul></li></ul><p><strong>注意: Django还有一个url分发器，它的作用是将一个个URL的页面请求分发给不同的view处理，view再调用相应的Model和Template</strong></p><h2 id="二、Django安装"><a href="#二、Django安装" class="headerlink" title="二、Django安装"></a>二、Django安装</h2><p><strong>环境：Mac os</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdycegx22bj30nc094jsm.jpg" alt="python与Django版本对应关系"></p><h3 id="1-pip-安装"><a href="#1-pip-安装" class="headerlink" title="1. pip 安装"></a>1. pip 安装</h3><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> Django<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-下载-git-安装"><a href="#2-下载-git-安装" class="headerlink" title="2. 下载/git 安装"></a>2. 下载/git 安装</h3><p>点击<a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">下载网址</a>, 左侧有最新版</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> zxvf Django-x.y.z.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>或者使用git</strong><br>点击<a href="https://github.com/django/django" target="_blank" rel="noopener">https://github.com/django/django</a><br>或者终端输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/django/django.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>After</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> Django-x.y.z<span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、项目介绍"><a href="#三、项目介绍" class="headerlink" title="三、项目介绍"></a>三、项目介绍</h2><h3 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h3><p>创建名为testproject的项目<br>注：所有路径不要有中文<br>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">django-admin.py startproject testproject<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-目录层级"><a href="#2-目录层级" class="headerlink" title="2. 目录层级"></a>2. 目录层级</h3><pre class="line-numbers language-tree"><code class="language-tree">testproject├── manage.py        :一个命令行工具，可以让我们用多种方式对Django项目进行交互└── testproject    ├── __init__.py  :一个空文件，它告诉Python这个目录应该被看做一个包    ├── asgi.py      :项目与ASGI兼容的Web服务器入口, 3.0以上版本特有    ├── settings.py  :项目的配置文件（主要处理文件）    ├── urls.py      :项目的url声明 （主要处理文件）    └── wsgi.py      :项目与WSGI兼容的Web服务器入口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3. 启动服务"></a>3. 启动服务</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> testproject <span class="token comment" spellcheck="true"># 切换到我们创建的项目</span>python manage.py runserver……Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdyvzi63oij31jm0u07a8.jpg" alt="启动成功界面"></p><h3 id="4-连接数据库"><a href="#4-连接数据库" class="headerlink" title="4. 连接数据库"></a>4. 连接数据库</h3><p><strong>在settings.py 中配置</strong><br><strong>任选一个配置即可</strong></p><ul><li><p>Django 默认是sqlite数据库</p></li><li><p>配置Mysql数据库</p></li><li><p>配置mongo数据库</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> mongoengine <span class="token keyword">import</span> <span class="token operator">*</span>database_name <span class="token operator">=</span> <span class="token string">'test'</span>MONGO_DATABASE_OPTIONS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token string">'port'</span><span class="token punctuation">:</span> <span class="token number">27017</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 'username': 'tor_tester',</span>    <span class="token comment" spellcheck="true"># 'password': '123456',</span><span class="token punctuation">}</span>register_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">,</span> database_name<span class="token punctuation">,</span> <span class="token operator">**</span>MONGO_DATABASE_OPTIONS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建应用"><a href="#5-创建应用" class="headerlink" title="5. 创建应用"></a>5. 创建应用</h3><ul><li>终端输入:</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> testprojectpython manage.py startapp myapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>目录层级：</li></ul><pre class="line-numbers language-tree"><code class="language-tree">testproject├── manage.py├── myapp│   ├── __init__.py│   ├── admin.py            :站点配置│   ├── apps.py│   ├── migrations│   │   └── __init__.py│   ├── models.py           :模型│   ├── tests.py│   └── views.py            :试图└── testproject    ├── __init__.py    ├── __pycache__    │   ├── __init__.cpython-36.pyc    │   └── settings.cpython-36.pyc    ├── asgi.py    ├── settings.py    ├── urls.py    └── wsgi.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-激活应用"><a href="#6-激活应用" class="headerlink" title="6. 激活应用"></a>6. 激活应用</h3><p><strong>在settings.py文件中，将myapp应用加入到INSTALLED APPS选项中</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Application definition</span>INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span>    <span class="token string">'myapp'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-定义模型"><a href="#7-定义模型" class="headerlink" title="7. 定义模型"></a>7. 定义模型</h3><p><strong>在models.py文件中定义模型, 一个模型对应一张表</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> mongoengine<span class="token keyword">class</span> <span class="token class-name">StudentModel</span><span class="token punctuation">(</span>mongoengine<span class="token punctuation">.</span>Document<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> mongoengine<span class="token punctuation">.</span>StringField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> mongoengine<span class="token punctuation">.</span>IntField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-创建视图"><a href="#8-创建视图" class="headerlink" title="8. 创建视图"></a>8. 创建视图</h3><p><strong>在views.py中定义视图</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> HttpResponse<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token comment" spellcheck="true"># .表示当前包下的models</span><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> StudentModel<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic <span class="token keyword">import</span> View<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 增加数据</span>        StudentModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询数据</span>        result <span class="token operator">=</span> StudentModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># # 修改数据</span>        <span class="token comment" spellcheck="true"># result = StudentModel.objects.filter(name='张三').first().update(name='李四')</span>        <span class="token comment" spellcheck="true"># print(result)</span>        <span class="token comment" spellcheck="true"># # 删除数据</span>        <span class="token comment" spellcheck="true"># result = StudentModel.objects.filter(name='张三').first().delete()</span>        <span class="token comment" spellcheck="true"># print(result)</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-配置url"><a href="#9-配置url" class="headerlink" title="9. 配置url"></a>9. 配置url</h3><p><strong>在urls.py中配置url</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> re_path<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token comment" spellcheck="true"># import os</span><span class="token comment" spellcheck="true"># print(os.getcwd())</span><span class="token keyword">from</span> myapp<span class="token punctuation">.</span>views <span class="token keyword">import</span> Studenturlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    re_path<span class="token punctuation">(</span>r<span class="token string">'^admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    re_path<span class="token punctuation">(</span>r<span class="token string">'^student/$'</span><span class="token punctuation">,</span> Student<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'student'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-刷新界面"><a href="#10-刷新界面" class="headerlink" title="10. 刷新界面"></a>10. 刷新界面</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdyw9zq4nlj30ki0biwfe.jpg" alt="student"></p><p><strong>[参考资料]</strong></p><ul><li><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django官网</a></li><li><a href="https://www.runoob.com/django/django-tutorial.html" target="_blank" rel="noopener">Django菜鸟教程</a></li><li><a href="https://www.bilibili.com/video/BV1dW411q7xR?p=2" target="_blank" rel="noopener">千锋python教程：Django基础到实战讲解（精华版）</a></li><li><a href="https://www.cnblogs.com/fengbo1113/p/8547302.html" target="_blank" rel="noopener">Django 千锋培训的学习笔记（1）</a></li><li><a href="https://blog.csdn.net/kuangshp128/article/details/79039366" target="_blank" rel="noopener">django连接mongodb数据库</a></li></ul><p><strong>[声明]</strong><br>部分资源源自网络，侵删！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some basic concepts of machine learning</title>
      <link href="/2020/04/11/some-basic-concepts-of-machine-learning/"/>
      <url>/2020/04/11/some-basic-concepts-of-machine-learning/</url>
      
        <content type="html"><![CDATA[<h2 id="一、训练集、验证集、测试集"><a href="#一、训练集、验证集、测试集" class="headerlink" title="一、训练集、验证集、测试集"></a>一、训练集、验证集、测试集</h2><blockquote><p>在使用数据集训练模型之前，我们需要先将整个数据集分为训练集、验证集、测试集。</p></blockquote><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li>训练集：用来训练模型</li><li>验证集：用来模型选择</li><li>测试集：用于最终对学习方法的评估</li></ul><h3 id="2-数据比例"><a href="#2-数据比例" class="headerlink" title="2. 数据比例"></a>2. 数据比例</h3><ul><li>7:3 数据规模较小，小于万，采用简单交叉验证方法进行验证</li><li>6:2:2 数据规模中等 万级别</li><li>8:1:1 大数据，百万级数据</li></ul><h2 id="二、交叉验证方法"><a href="#二、交叉验证方法" class="headerlink" title="二、交叉验证方法"></a>二、交叉验证方法</h2><h3 id="1-简单交叉验证方法"><a href="#1-简单交叉验证方法" class="headerlink" title="1. 简单交叉验证方法"></a>1. 简单交叉验证方法</h3><h3 id="2-K折交叉验证"><a href="#2-K折交叉验证" class="headerlink" title="2. K折交叉验证"></a>2. K折交叉验证</h3><h3 id="3-留一法"><a href="#3-留一法" class="headerlink" title="3. 留一法"></a>3. 留一法</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Greedy Problem Set</title>
      <link href="/2020/04/02/greedy-problem-set/"/>
      <url>/2020/04/02/greedy-problem-set/</url>
      
        <content type="html"><![CDATA[<h2 id="1-POJ2376-清洁倒班"><a href="#1-POJ2376-清洁倒班" class="headerlink" title="1. POJ2376 清洁倒班"></a>1. POJ2376 清洁倒班</h2><p><strong>【题目描述】</strong></p><p>农夫约翰正在指派他的N头牛(1 &lt;= N &lt;= 25,000)中的一些来做谷仓周围的清洁工作。他总是希望有一头奶牛来做清洁工作，他把一天分成了T班(1 &lt;= T &lt;= 1,000,000)，第一个是1班，最后一个是T班。</p><p>每头奶牛只能在一天中的某个时段进行清洁工作。任何被选来做清洁工作的奶牛将在她的整个休息时间内工作。</p><p>你的工作是帮助农民约翰安排一些奶牛轮班，这样</p><p>(i)每个轮班至少安排一头奶牛，<br>(ii)尽可能少的奶牛参与清洁工作。如果无法为每个班次分配一头奶牛，请打印-1。</p><p><strong>【输入】</strong></p><p>第1行:两个用空格分隔的整数:N和T</p><p>第2行..N+1:每一行都包含奶牛可以工作的时间间隔的开始和结束时间。牛在开始的时间开始工作，在结束的时间结束。</p><p><strong>【样例输入】</strong><br>3 10<br>1 7<br>3 6<br>6 10<br><strong>【样例输出】</strong><br>2<br><strong>【提示】</strong><br>该问题输入数据量大，使用scanf()代替cin来读取数据，以避免超过时间限制。</p><p>输入详细信息:</p><p>有3头奶牛和10个班次。奶牛1号可以值班1-7。奶牛2号可以值班3-6，奶牛3号可以值班6-10。</p><p>输出详细信息:</p><p>通过选择1号和3号奶牛，所有的轮班都包括在内。用不到2头牛是无法覆盖所有轮班的。</p><p><strong>【解析】</strong><br>题目大意为：用最少的奶牛覆盖所有的1-T区间。<br>贪心思路：每次选择左端点符合条件且右端点最右的区间。<br>做法：先将所有区间按优先左端点再右端点的策略排序。再依次手动贪心选择选择。<br><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> stu <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">25010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>stu a<span class="token punctuation">,</span> stu b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>l <span class="token operator">==</span> b<span class="token punctuation">.</span>l<span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>r<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>l<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> T<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%*c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%*c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>N<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>T<span class="token punctuation">)</span>    <span class="token punctuation">{</span>     <span class="token keyword">int</span> x1<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">&lt;=</span> x1 <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">>=</span> x1<span class="token punctuation">)</span>    x<span class="token operator">=</span>x<span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">?</span> x<span class="token operator">:</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">></span> x1<span class="token punctuation">)</span>  <span class="token punctuation">{</span>top <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> x1<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     m<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>T<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"-1"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token keyword">else</span>   cout<span class="token operator">&lt;&lt;</span>m<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-POJ1328-雷达安装"><a href="#2-POJ1328-雷达安装" class="headerlink" title="2. POJ1328 雷达安装"></a>2. POJ1328 雷达安装</h2><p><strong>【题目描述】</strong></p><p>假设海岸线是一条无限长的直线。陆地在海岸的一边，海洋在另一边。每个小岛都是位于海边的一个点。而任何定位在海岸线上的雷达装置，只能覆盖d距离，所以一个岛屿的距离海岸不超过d, 则在可以被一个雷达装置覆盖。</p><p>我们使用笛卡尔坐标系，定义海岸线是x轴。海面在x轴上方，陆面在x轴下方。考虑到每个岛屿在海上的位置，以及雷达装置的覆盖距离，您的任务是编写一个程序，以找到覆盖所有岛屿的雷达装置的最小数量。注意，一个岛屿的位置是由它的x-y坐标表示的。</p><p><img src="http://poj.org/images/1328_1.jpg" alt=""></p><p><strong>【输入】</strong></p><p>输入由几个测试用例组成。每个用例的第一行包含两个整数n (1&lt;=n&lt;=1000)和d，其中n为海上岛屿数，d为雷达装置覆盖距离。然后是n行，每一行包含两个整数，表示每个岛的坐标。然后是空行来分隔这些情况。</p><p>输入以包含一对零的行结束</p><p><strong>【输出】</strong></p><p>对于每个测试用例，输出一行代码，其中包含测试用例号和所需雷达安装的最小数量。“-1”安装意味着这种情况没有解决方案</p><p><strong>【样例输入】</strong></p><p>3 2<br>1 2<br>-3 1<br>2 1</p><p>1 2<br>0 2</p><p>0 0</p><p><strong>【样例输出】</strong></p><p>Case 1: 2<br>Case 2: 1</p><p><strong>【解析】</strong><br>题目大意：求覆盖所有岛屿所需的最少的装置数目，不行则-1<br>贪心策略：先利用作圆法预处理出-对于每个岛屿被覆盖，其对应装置的安装范围，<br>然后，从边界开始合并贪心区间，例如1-5， 2-6， 3-8， 6-7， 实际上只需要在5安装一个，和在6-7之间安装一个即可。<br><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span> <span class="token punctuation">(</span>pair <span class="token operator">&lt;</span> <span class="token keyword">double</span> <span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> a<span class="token punctuation">,</span> pair <span class="token operator">&lt;</span> <span class="token keyword">double</span> <span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>second <span class="token operator">==</span> b<span class="token punctuation">.</span>second<span class="token punctuation">)</span>       <span class="token keyword">return</span> a<span class="token punctuation">.</span>first <span class="token operator">></span> b<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pair <span class="token operator">&lt;</span> <span class="token keyword">double</span> <span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> p<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> d<span class="token punctuation">,</span> top<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> t1<span class="token punctuation">;</span>    <span class="token keyword">double</span> maxf<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> d <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>   t<span class="token operator">++</span><span class="token punctuation">;</span>        t1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        cin <span class="token operator">>></span> i <span class="token operator">>></span> j<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> d<span class="token punctuation">)</span>  t1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>d <span class="token operator">*</span> d <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>d <span class="token operator">*</span> d <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>         <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">": -1"</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token function">sort</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                  maxf <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">>=</span> maxf <span class="token operator">&amp;&amp;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">></span> maxf <span class="token punctuation">)</span> maxf <span class="token operator">=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>                i <span class="token operator">=</span> j<span class="token punctuation">;</span>                s<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-POJ3190-牛栏预订"><a href="#3-POJ3190-牛栏预订" class="headerlink" title="3. POJ3190 牛栏预订"></a>3. POJ3190 牛栏预订</h2><p><strong>【题目描述】</strong><br>哦，那些挑剔的N (1 &lt;= N &lt;= 50,000)头奶牛!它们太挑剔了，每只都要在一段精确的时间间隔内挤奶。B (1 &lt;= A &lt;= B &lt;= 1,000,000)，这包括了时间A和时间B。显然，FJ必须创建一个预约系统来确定每头奶牛的挤奶时间。当然，没有一头奶牛会和其他奶牛分享这样的私密时刻。</p><p>帮助FJ确定:<br>在牛棚中所需的最小栏数，以便每头奶牛都有自己的挤奶期<br>随着时间的推移，分配奶牛到这些畜栏<br>对于每个测试数据集，许多答案都是正确的;程序会给你的答案打分。</p><p><strong>【输入】</strong><br>第1行:单个整数N</p><p>行2 . .N+1:第i+1行用两个空格分隔的整数描述奶牛i的挤奶间隔。<br><strong>【输出】</strong><br>第一行:牛棚必须拥有的最小栏数。</p><p>行2 . .N+1:第i+1行描述了我将被分配到哪头奶牛的挤奶期的牛栏。<br><strong>【样例输入】</strong><br>5<br>1 10<br>2 4<br>3 6<br>5 8<br>4 7<br><strong>【样例输出】</strong><br>4<br>1<br>2<br>3<br>2<br>4<br><strong>【提示】</strong><br>样品说明:</p><p>这里是这个输出的图形时间表:</p><p>时间1 2 3 4 5 6 7 8 9 10</p><p>栏位1 c1 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;</p><p>栏位2 . .c2&gt;&gt;&gt;&gt;&gt;&gt; c4&gt;&gt;&gt;&gt;&gt; &gt;0 &gt;1 &gt;2 &gt;3 &gt;4 ..</p><p>栏位3…..c3&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; .. .. .</p><p>栏位4….. .c5&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; .. ..<br>其他使用相同数量的栏位的输出是可能的。</p><p><strong>【解析】</strong><br>题目大意：求牛棚中满足条件的最小牛栏数目<br>贪心策略：先考虑一个牛栏，为第一头牛所有，接下来如果有牛的时间区间与其冲突则新开一个牛栏，有牛来不冲突则使用占用结束时间最少的那个牛栏<br>做法：先给牛的时间区间按排序-根据越早开始挤奶优先级越高，如果时间开始点相等，那么结束时间早的优先级高。然后将创建的牛栏加入优先队列，当前占用的时间中结束时间最早优先级最高，如果牛的开始时间大于优先队列队首的结束时间，则新加牛栏入队。<br><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e4</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(s,t), t 升序，t等则s升序， -> pair 或者自建结构体</span>pair <span class="token operator">&lt;</span>P<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> pos<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>P<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>P<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>P<span class="token operator">></span> <span class="token operator">></span> pq<span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first <span class="token operator">>></span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> pos<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    for(int i = 0; i &lt; n; i++)</span>    <span class="token comment" spellcheck="true">//        cout &lt;&lt; pos[i].first.second &lt;&lt; " " &lt;&lt;  pos[i].first.first &lt;&lt; endl;</span>        <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">>=</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                P tmp<span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>                res<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span>first <span class="token operator">=</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                P tmp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span>first <span class="token operator">=</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> tot <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//6</span><span class="token comment" spellcheck="true">//8 8</span><span class="token comment" spellcheck="true">//4 8</span><span class="token comment" spellcheck="true">//6 10</span><span class="token comment" spellcheck="true">//1 3</span><span class="token comment" spellcheck="true">//2 4</span><span class="token comment" spellcheck="true">//4 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-POJ1700-过河问题"><a href="#4-POJ1700-过河问题" class="headerlink" title="4. POJ1700 过河问题"></a>4. POJ1700 过河问题</h2><p><strong>【题目描述】</strong><br>一群人想用一条船过河，但这条船最多只能载两个人。因此，必须安排某种穿梭安排，以便把船划来划去，让所有的人都能通过。每个人的划船速度不同;两个人一起划船的速度是由较慢一方的速度决定的。你的工作是确定一个策略，尽可能缩短这些人的过河时间。<br><strong>【输入】</strong><br>输入的第一行包含一个整数T (1 &lt;= T &lt;= 20)，即测试用例的数量。然后是T个案例。每种情况的第一行包含N，第二行包含N个整数，给出每个人过河的时间。每个case前面都有一个空行。不会有超过1000人，没有人需要超过100秒才能通过。<br><strong>【输出】</strong><br>对于每个测试用例，打印一行包含所有N个人过河所需的总秒数。</p><p><strong>【样例输入】</strong><br>1<br>4<br>1 2 5 10<br><strong>【样例输出】</strong><br>17</p><p><strong>【解析】</strong><br>题目大意：求最快过河的秒数，注意有返程<br>两种贪心策略：<br>1、用速度最快的那个每次将人载过河，再回来载其他的人<br>2、用速度最快的和次快的循环载人，即最快的和次快的先过河，次快的留下，最快的回来，接着最慢和次慢的人过河，次快的回来<br><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> i<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>   s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> N<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> N<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            s <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> s <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>  s <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>  s <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">else</span>  s <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-HDU1338-游戏预测"><a href="#5-HDU1338-游戏预测" class="headerlink" title="5. HDU1338 游戏预测"></a>5. HDU1338 游戏预测</h2><p><strong>【题目描述】</strong></p><p>假设有M个人，包括你，在玩一个特殊的纸牌游戏。一开始，每个玩家得到N张牌。一张牌的pip是一个正整数，它的最大值是N * M。没有两张牌是相同的。在一轮游戏中，每个玩家选择一张牌与其他牌进行比较。拥有最大pip的牌手赢了这一轮，然后下一轮开始。经过N轮后，当每个玩家的所有纸牌都被选中时，赢得最多回合的玩家就是游戏的赢家。<br>给定你在开始时收到的牌，编写一个程序来告诉你在整个游戏中至少可以赢的最大轮数。</p><p><strong>【输入】</strong></p><p>输入由几个测试用例组成。每个case的第一行包含两个整数m (2 &lt;= m &lt;= 20)和n (1 &lt;= n &lt;= 50)，分别表示玩家人数和每个玩家在游戏开始时收到的牌数。然后是一行n个正整数，表示你在开始时收到的纸牌的点数。然后是空行来分隔这些情况。<br>输入以带有两个0的行结束。</p><p><strong>【输出】</strong></p><p>对于每个测试用例，输出一行由测试用例号和至少在游戏中获胜的轮数组成的代码。</p><p><strong>【样例输入】</strong><br>2 5<br>1 7 2 10 9</p><p>6 11<br>62 63 54 66 65 61 57 56 50 53 48</p><p>0 0<br><strong>【样例输出】</strong><br>Case 1: 2<br>Case 2: 4</p><p><strong>【解析】</strong><br>题目大意：求至少能赢的轮数<br>贪心策略：寻找恰好大于自己的数来对战，剩下的都能赢</p><p><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ans<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> m <span class="token operator">>></span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>   j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>               cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               t<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token function">sort</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          k <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>k  <span class="token operator">&lt;</span> s<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">else</span> k<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">>=</span> s<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">)</span>  ans <span class="token operator">=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span>          <span class="token keyword">else</span>     ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-ZOJ2229-乘车上学"><a href="#6-ZOJ2229-乘车上学" class="headerlink" title="6. ZOJ2229 乘车上学"></a>6. ZOJ2229 乘车上学</h2><p><strong>【题目描述】</strong><br>北京大学的很多研究生都住在万柳校区，离主校区燕园有4.5公里远。万柳的学生不得不乘公共汽车或骑自行车上学。由于北京的交通堵塞，许多学生选择骑自行车。</p><p>我们可以假设，除了“查理”，所有的学生都以固定的速度从万柳骑到燕园。查理是一个有着不同骑乘习惯的学生，他总是试图跟随其他骑手以避免独自骑乘。当查理到达万柳门口时，他会去找一个要去燕园的人。如果他找到了人，他就会跟着那个骑手，如果没有，他就会等着别人跟着。在从万柳到燕园的路上，任何时候如果有比他快的学生超过了查理，他就会离开他所跟随的骑手，加速追上比他快的骑手。</p><p>我们假设查理到达万柳门的时间是零。考虑到其他同学出发的时间和速度，你的任务是给出查理到达燕园的时间。</p><p><strong>【输入】</strong></p><p>有几个测试用例。每个case的第一行是N (1 &lt;= N &lt;= 10000)，表示骑手的人数(不包括查理)。N = 0结束输入。以下N行是N个不同骑手的信息，格式如下:</p><p>Vi [TAB] Ti</p><p>Vi为正整数，&lt;= 40，表示第i个车手的速度(kph, km / h)。Ti是第i个车手的出发时间，它是一个整数，以秒为单位计算。无论如何，保证有一个非负Ti存在。</p><p><strong>【输出】</strong></p><p>每个case输出一行:Charley的到达时间。当处理分数时，取整(取最大值)。</p><p><strong>【样例输入】</strong></p><p>4<br>20 0<br>25 -155<br>27 190<br>30 240<br>2<br>21 0<br>22 34<br>0</p><p><strong>【样例输出】</strong></p><p>780<br>771</p><p><strong>【解析】</strong><br>题目大意：求查理到达燕园的时间。<br>贪心策略：求最早到达燕园的同学的到达时间</p><p><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>s<span class="token punctuation">,</span>mins<span class="token punctuation">;</span>    <span class="token keyword">double</span> a1<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         mins<span class="token operator">=</span><span class="token number">1000000000</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            cin <span class="token operator">>></span> a1 <span class="token operator">>></span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> b<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            a1 <span class="token operator">=</span> <span class="token number">4.5</span> <span class="token operator">/</span> a1 <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1e-5</span><span class="token punctuation">)</span>  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">)</span>a1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">)</span> a1<span class="token punctuation">;</span>            s <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;</span> mins<span class="token punctuation">)</span>  mins <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> mins <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-POJ1456-超级市场"><a href="#7-POJ1456-超级市场" class="headerlink" title="7. POJ1456 超级市场"></a>7. POJ1456 超级市场</h2><p><strong>【题目描述】</strong><br>超级市场有一套特价商品。对于每一件产品x∈Prod，从开始销售的那一刻起，以时间单位的整数来计算，在截止日期dx之前销售，可以获得px的利润。每件产品只需要一个单位的销售时间。销售计划是Sell≤Prod的产品的一个有序子集，使得每个产品x∈Sell，根据Sell的订单，在截止日期dx之前或dx到期时完成销售。销售计划是利润的利润(出售)=Σx∈Sellpx。最优销售计划是利润最大的计划。<br>例如,考虑产品刺激= {a, b, c, d} (pa, da) =(50, 2),(pb、db) = (10, 1), (pc, dc) =(20, 2),和(pd, dd) =(30, 1)。表1列出了可能的销售时间表。例如，日程Sell={d,a}表示产品d的销售从时间0开始，到时间1结束，而产品a的销售从时间1开始，到时间2结束。这些产品都在截止日期前售出。Sell是最优方案，其利润为80。<br><img src="http://poj.org/images/1456_1.jpg" alt=""></p><p>编写一个程序，从输入文本文件中读取产品集，并计算每一组产品的最佳销售计划的利润。<br><strong>【输入】</strong><br>一组产品始于一个整数0 &lt; = n &lt; = 10000,这是产品组的数量,接下来是n对pi di的整数,1 &lt;= pi &lt;= 10000和1 &lt;= di &lt;= 10000,为的第i个产品的利润和销售的最后期限。空格可以在输入中自由出现。输入数据以文件结束并保证正确。<br><strong>【输出】</strong><br>对于每一套产品，程序将该套产品的最佳销售计划的利润打印在标准输出上。每个结果从单独一行的开始打印。</p><p><strong>【样例输入】</strong><br>4  50 2  10 1   20 2   30 1</p><p>7  20 1   2 1   10 3  100 2   8 2<br>   5 20  50 10</p><p><strong>【样例输出】</strong></p><p>80<br>185<br><strong>【提示】</strong></p><p>示例输入包含两个产品集。第一组编码表1中的产品。第二套是7个产品。这些产品的最佳生产计划的利润是185。</p><p><strong>【解析】</strong><br>题目大意：有n种物品，每个物品有价格pi和保质期di，每天只能卖出一个未过期的物品，求商家最大能获得多少钱？<br>贪心策略：每次挑选价格最高的物品，看在保质期内是否有未被占用的天，如果有在占用该天卖出该物品，否则找下一个即可。<br><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment" spellcheck="true">//#include &lt;utility></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    pair <span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>           cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token function">memset</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> p<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token keyword">else</span>  <span class="token punctuation">{</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> s <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-POJ1042-钓鱼去了"><a href="#8-POJ1042-钓鱼去了" class="headerlink" title="8. POJ1042 钓鱼去了"></a>8. POJ1042 钓鱼去了</h2><p><strong>【题目描述】</strong><br>约翰要去钓鱼。他有h个小时的时间(1 &lt;= h &lt;= 16)，在这片区域有n个湖泊(2 &lt;= n &lt;= 25)，都可以沿着一条单行道到达。约翰从第一个湖开始，但他可以在任何他想去的湖结束。他只能从一个湖到下一个湖。他不必停在任何一个湖上，除非他愿意。对于每个i = 1，…，n - 1，从i湖到i + 1湖所需要的5分钟间隔数记为ti (0 &lt; ti &lt;=192)。例如，t3 = 4表示从3湖到4湖需要20分钟。为了帮助计划他的钓鱼之旅，约翰收集了一些有关湖泊的信息。对于每个i湖，初始5分钟内预计捕获的鱼的数量(记为fi(fi &gt;= 0))是已知的。5分钟内可捕获的鱼的数量每个间隔减少di (di &gt; = 0)。如果鱼的数量预计将在一个时间间隔小于或等于di, 在接下来的时间间隔，湖中不会有鱼。为了简化计划，约翰假设，没有其他人会在湖上捕鱼来影响他希望捕捉到的鱼的数量。<br>编写一个程序，帮助约翰计划他的钓鱼之旅，以最大限度地增加鱼的期望被捕获的数量。在每个湖上花费的分钟数必须是5的倍数。</p><p><strong>【输入】</strong></p><p>输入有多个样例。每个样例第一行包含n。第一行包含h。接下来,有n个整数代表 fi (1 &lt;= i &lt;= n),然后一行n个整数 di (1 &lt;= i &lt;= n),最后一行 n - 1整数ti(1 &lt;= i &lt;= n - 1)输入终止的一个案件中,n = 0。</p><p><strong>【输出】</strong></p><p>对于每个测试用例，打印在每个湖上花费的分钟数(用逗号分隔)，以获得期望捕获的最大鱼类数量的计划(即使超过80个字符，也应该将整个计划打印在一行上)。接下来是一行包含期望的鱼的数量。<br>如果存在多个计划，选择一个尽可能长时间呆在一号湖的计划，即使预计在某些时间间隔内不会捕到鱼。如果仍然有多个计划可选择，选择一个花尽可能长的时间在湖2，依此类推。样例间之间插入空白行。</p><p><strong>【样例输入】</strong></p><p>2<br>1<br>10 1<br>2 5<br>2<br>4<br>4<br>10 15 20 17<br>0 3 4 3<br>1 2 3<br>4<br>4<br>10 15 50 30<br>0 3 4 3<br>1 2 3<br>0</p><p><strong>【样例输出】</strong><br>45, 5<br>Number of fish expected: 31</p><p>240, 0, 0, 0<br>Number of fish expected: 480</p><p>115, 10, 50, 35<br>Number of fish expected: 724<br><strong>【解析】</strong><br>题目大意：求h时间内能钓的鱼的最大数目<br>贪心策略：总时间= 钓鱼时间+走路时间. 所以我们枚举约翰最后钓鱼的湖是第i个,然后我们算出他一共花了多少时间走路,那么剩下的就是钓鱼花的时间.<br>求1-i钓的鱼的最大数目，在每单位时间内贪心选择能钓最多的鱼的湖泊，虽然顺序不一样，但是实际并不影响（思考一下）。<br>做法：枚举结束湖泊，预处理出走路时间，用优先队列保存并更新湖泊的状态，从而贪心选择湖泊。</p><p><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>h<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>f<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">i</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">t</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>f <span class="token operator">==</span> a<span class="token punctuation">.</span>f<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>i <span class="token operator">></span> a<span class="token punctuation">.</span>i<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>f <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>f<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> <span class="token operator">></span> pq<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> h<span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录最优解，有可能没有鱼，所以初始值需要设置为负数</span>        <span class="token keyword">int</span> ret<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录答案分钟数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录改方案总鱼数目</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Node</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ht <span class="token operator">=</span> h<span class="token operator">*</span><span class="token number">12</span><span class="token operator">-</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//总间隔数</span><span class="token comment" spellcheck="true">//            cout &lt;&lt; ht &lt;&lt; "&amp;&amp;&amp;" &lt;&lt; endl;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ht <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Node tmp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                cout &lt;&lt; tmp.i &lt;&lt; " " &lt;&lt; tmp.f &lt;&lt; " " &lt;&lt; tmp.t &lt;&lt; endl;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>f <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">.</span>f<span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span>f <span class="token operator">-</span><span class="token operator">=</span> d<span class="token punctuation">[</span>tmp<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span>t <span class="token operator">++</span><span class="token punctuation">;</span>                pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                ht<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            cout &lt;&lt; res &lt;&lt; " * " &lt;&lt; endl;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">></span> ans<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans <span class="token operator">=</span> res<span class="token punctuation">;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    Node tmp <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span>tmp<span class="token punctuation">.</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">.</span>t<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//                cout &lt;&lt; ht &lt;&lt; "^^^ " &lt;&lt; ret[1]&lt;&lt; endl;</span>                ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> ht<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> ret<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Number of fish expected: "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 特殊的测试数据</span><span class="token comment" spellcheck="true">//60，0，0</span><span class="token comment" spellcheck="true">//10</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//3</span><span class="token comment" spellcheck="true">//1</span><span class="token comment" spellcheck="true">//0 76 50</span><span class="token comment" spellcheck="true">//0 30 7</span><span class="token comment" spellcheck="true">//20 13</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//ans：</span><span class="token comment" spellcheck="true">//60, 0, 0</span><span class="token comment" spellcheck="true">//Number of fish expected: 0</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//22</span><span class="token comment" spellcheck="true">//12</span><span class="token comment" spellcheck="true">//9 51 13 98 2 88 76 81 95 18 41 56 88 58 28 87 19 79 68 27 79 42</span><span class="token comment" spellcheck="true">//7 13 8 1 2 6 24 19 78 3 38 38 31 44 15 43 12 19 28 8 71 9</span><span class="token comment" spellcheck="true">//4 95 28 58 43 56 24 82 41 75 4 27 99 98 37 64 31 37 56 28 18</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//Output:</span><span class="token comment" spellcheck="true">//0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><span class="token comment" spellcheck="true">//Number of fish expected: 1530</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-HDU1789-再次作业"><a href="#9-HDU1789-再次作业" class="headerlink" title="9. HDU1789 再次作业"></a>9. HDU1789 再次作业</h2><p><strong>【题目描述】</strong></p><p>伊格内修斯刚从第30届ACM/ICPC毕业。现在他有很多家庭作业要做。每个老师都给他一个交作业的最后期限。如果伊格内修斯在最后期限后交作业，老师就会降低他的期末考试分数。现在我们假设每个人做作业都要花一天的时间。所以伊格那丢想让你帮他安排作业的顺序，把减少的分数减到最小。</p><p><strong>【输入】</strong></p><p>输入包含几个测试用例。输入的第一行是一个整数T，它是测试用例的数量。接下来是T测试用例。<br>每个测试用例都以一个正整数 N(1&lt;=N&lt;=1000)开始，表示家庭作业的数量。然后是两行。第一行包含N个整数，表示科目的截止日期，下一行包含N个整数，表示减少的分数。<br><strong>【输出】</strong></p><p>对于每个测试用例，你应该输出最小的总减少分数，每个测试用例一行。</p><p><strong>【样例输入】</strong><br>3<br>3<br>3 3 3<br>10 5 1<br>3<br>1 3 1<br>6 2 3<br>7<br>1 4 6 4 2 4 3<br>3 2 1 7 6 5 4<br><strong>【样例输出】</strong><br>0<br>3<br>5<br><strong>【解析】</strong><br>题目大意：n个作业，每个作业需要一天完成，有截止期限和罚分，安排作业顺序是的罚分最小<br>贪心策略：先解决罚分最大的作业，且对于每个作业的完成时间，从后往前贪心选择。</p><p><strong>【代码】</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>T<span class="token punctuation">;</span>    pair <span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>           cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>           cin <span class="token operator">>></span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token function">memset</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> p<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>  <span class="token punctuation">{</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  s <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Problem Set </tag>
            
            <tag> Greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Captcha Identification through Baidu OCR API (IMG, GIF)</title>
      <link href="/2020/03/28/captcha-identification-through-baidu-ocr-api-img-gif/"/>
      <url>/2020/03/28/captcha-identification-through-baidu-ocr-api-img-gif/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>在做爬虫的时候，当访问量累计到一定量或者访问速度的过快的时候，网站会出现验证码的反爬措施。</li><li>此时可以手动输入验证码，也可以利用算法来识别自动验证</li><li>本文调用的是免费的API只能识别简单的由数字或者字母组成的验证码，可以购买百度的服务或者自己训练模型来满足自己不同的需求。</li></ul></blockquote><h3 id="一、注册"><a href="#一、注册" class="headerlink" title="一、注册"></a>一、注册</h3><ol><li>点击-&gt; <a href="https://login.bce.baidu.com/" target="_blank" rel="noopener">官网</a> 注册一个账号，然后登陆。</li><li>点击右上角控制管理台，找到文字识别，进入，然后新建一个应用。</li><li>获得应用的 AppID API Key Secret Key。<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd8zxsgnabj31nb0u0ajg.jpg" alt="控制管理台"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd8zejn9rjj31hm0u0wnr.jpg" alt="文字识别"></li></ol><h3 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h3><ol><li><p>对于单纯的一张验证码图片,,先通过一些简单的图像处理方法处理，如二值化，开运算，然后调用API。<img src="http://search.fang.com/captcha-3d0d30cb941cad4469/captcha-image" alt="img"></p></li><li><p>对于GIP动图验证码，先将gif拆帧，变成多张图片，再对每张图片分别识别，投票决定最后的结果。<img src="http://www.manfen5.com/api/VCode.aspx?id=SYS201910300844276110692994&amp;t=Wed%20Oct%2030%202019%2011:29:54%20GMT+0800%20(%E4%B8%AD%E5%9B%BD%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4)" alt="gif"></p></li><li><p>具体实现请看代码</p></li></ol><p>安装需要的包<br>终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cv2</span>$ pip <span class="token function">install</span> opencv-python<span class="token comment" spellcheck="true"># PIL</span>$ pip <span class="token function">install</span> pillow<span class="token comment" spellcheck="true"># aip</span>$ pip <span class="token function">install</span> baidu-aip<span class="token comment" spellcheck="true"># skimage</span>$ pip <span class="token function">install</span> scikit-image<span class="token comment" spellcheck="true"># xxx, 其他比较简单。。。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> requests<span class="token keyword">import</span> string<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> aip <span class="token keyword">import</span> AipOcr<span class="token keyword">from</span> skimage <span class="token keyword">import</span> measure<span class="token punctuation">,</span> morphology<span class="token keyword">class</span> <span class="token class-name">CaptchaIdentify</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 填写自己的应用的 AppID API Key Secret Key</span>        APP_ID <span class="token operator">=</span> <span class="token string">'xxx'</span>        API_KEY <span class="token operator">=</span> <span class="token string">'xxx'</span>        SECRET_KEY <span class="token operator">=</span> <span class="token string">'xxx'</span>        self<span class="token punctuation">.</span>client <span class="token operator">=</span> AipOcr<span class="token punctuation">(</span>APP_ID<span class="token punctuation">,</span> API_KEY<span class="token punctuation">,</span> SECRET_KEY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 识别图片</span>    <span class="token keyword">def</span> <span class="token function">recognize_img</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> self<span class="token punctuation">.</span>clarify<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        img <span class="token operator">=</span> self<span class="token punctuation">.</span>clear<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#baidu ocr</span>        options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        options<span class="token punctuation">[</span><span class="token string">"language_type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ENG"</span>        success<span class="token punctuation">,</span> encoded_image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imencode<span class="token punctuation">(</span><span class="token string">'.png'</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>        img <span class="token operator">=</span> encoded_image<span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>        msg <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">.</span>basicGeneral<span class="token punctuation">(</span>img<span class="token punctuation">,</span> options<span class="token punctuation">)</span>        result <span class="token operator">=</span> msg<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'words_result'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'words'</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> c <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">and</span> c <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">and</span> c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">and</span> c <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">+=</span> c            <span class="token keyword">return</span> res        <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true"># 识别动图</span>    <span class="token keyword">def</span> <span class="token function">recognize_gif</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> gif<span class="token punctuation">)</span><span class="token punctuation">:</span>        vote <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span>        res_img <span class="token operator">=</span> None        <span class="token keyword">for</span> i<span class="token punctuation">,</span> frame <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>iter_frames<span class="token punctuation">(</span>gif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res_img <span class="token operator">=</span> frame            img <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>            res <span class="token operator">=</span> self<span class="token punctuation">.</span>recognize_img<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    vote<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> vote<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> max<span class="token punctuation">(</span>string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_uppercase<span class="token punctuation">,</span> key<span class="token operator">=</span>vote<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">,</span> res_img    <span class="token comment" spellcheck="true"># gif2png</span>    <span class="token keyword">def</span> <span class="token function">iter_frames</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> gif<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            i<span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>                gif<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                imframe <span class="token operator">=</span> gif<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    palette <span class="token operator">=</span> imframe<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    imframe<span class="token punctuation">.</span>putpalette<span class="token punctuation">(</span>palette<span class="token punctuation">)</span>                <span class="token keyword">yield</span> imframe                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 初步处理图片</span>    <span class="token keyword">def</span> <span class="token function">clarify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">:</span>        gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>src<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_GRAY2BGR<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二值化</span>        gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 二值化</span>        ret<span class="token punctuation">,</span> binary <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV <span class="token operator">|</span> cv2<span class="token punctuation">.</span>THRESH_OTSU<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 过滤浅色</span>        kernel <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getStructuringElement<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>MORPH_RECT<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        binary <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>MORPH_OPEN<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 开运算</span>        kernel <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getStructuringElement<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>MORPH_RECT<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        binary <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>MORPH_OPEN<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>bitwise_not<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> binary<span class="token punctuation">)</span>        <span class="token keyword">return</span> binary    <span class="token comment" spellcheck="true"># 一个简单处理干扰线的方法</span>    <span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>        fx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        fy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        h <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        w <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> <span class="token number">1</span>                num <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ix <span class="token operator">=</span> i <span class="token operator">+</span> fx<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                    iy <span class="token operator">=</span> j <span class="token operator">+</span> fy<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                    <span class="token keyword">if</span> ix <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> ix <span class="token operator">&lt;</span> h <span class="token operator">and</span> iy <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> iy <span class="token operator">&lt;</span> w<span class="token punctuation">:</span>                        count <span class="token operator">+=</span> <span class="token number">1</span>                        <span class="token keyword">if</span> img<span class="token punctuation">[</span>ix<span class="token punctuation">]</span><span class="token punctuation">[</span>iy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                            num <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>                    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>        <span class="token keyword">return</span> data    <span class="token comment" spellcheck="true"># 下载动图</span>    <span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        https://stackoverflow.com/questions/39534830/how-to-download-this-gifdynamic-by-python        '''</span>        url <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token comment" spellcheck="true"># 图片链接</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'captcha/%d.gif'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_img</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        captcha <span class="token operator">=</span> CaptchaIdentify<span class="token punctuation">(</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'img/stdoutput1.png'</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        ans <span class="token operator">=</span> captcha<span class="token punctuation">.</span>recognize_img<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_gif</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        captcha <span class="token operator">=</span> CaptchaIdentify<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span>pad<span class="token operator">=</span><span class="token number">1.08</span><span class="token punctuation">,</span> h_pad<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> w_pad<span class="token operator">=</span>None<span class="token punctuation">,</span> rect<span class="token operator">=</span>None<span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            gif <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'captcha/%d.gif'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>            ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            ans<span class="token punctuation">,</span> img <span class="token operator">=</span> captcha<span class="token punctuation">.</span>recognize_gif<span class="token punctuation">(</span>gif<span class="token punctuation">)</span>            ax<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%2d:'</span> <span class="token operator">%</span> i <span class="token operator">+</span> ans<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">recognize_gif_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'xxx'</span><span class="token comment" spellcheck="true"># 图片链接</span>        res<span class="token punctuation">,</span> img <span class="token operator">=</span> captcha<span class="token punctuation">.</span>recognize_gif<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#         plt.imshow(img)</span><span class="token comment" spellcheck="true">#         plt.axis('off')</span>        <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    captcha <span class="token operator">=</span> CaptchaIdentify<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'xxx'</span><span class="token comment" spellcheck="true"># 图片链接</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>captcha<span class="token punctuation">.</span>recognize_gif_url<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Scripts </category>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scripts </tag>
            
            <tag> Web Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Installation and configuration of Spark</title>
      <link href="/2020/03/26/installation-and-configuration-of-spark/"/>
      <url>/2020/03/26/installation-and-configuration-of-spark/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统：mac os， 需要提前安装好jdk,scala等，如果已经安装好，检查版本和安装位置即可</p></blockquote><h3 id="一、安装JDK"><a href="#一、安装JDK" class="headerlink" title="一、安装JDK"></a>一、安装JDK</h3><blockquote><p>JDK全称Java SE Development kit(JDK)，即java开发工具包，是Oracle提供的一套用于开发java应用程序的开发包，它提供编译，运行java程序所需要的各种工具和资源，包括java编译器，java运行时环境，以及常用的java类库等。</p></blockquote><blockquote><p>JRE   Java Runtime Environment(JRE) Java运行环境</p></blockquote><blockquote><p>JVM  Java Virtual Machine Java虚拟机，JRE包含JVM。JVM是运行java程序的核心虚拟机，还需要其他的类加载器，字节码校验器，以及大量的基础类库。JRM除了包含JVM之外，还包含运行java程序的其它环境支持。</p></blockquote><h4 id="1-下载JDK安装包"><a href="#1-下载JDK安装包" class="headerlink" title="1. 下载JDK安装包"></a>1. 下载JDK安装包</h4><p>前往<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">官网</a><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd7673qsnzj31z40ta42y.jpg" alt="官网界面"><br>点击 <strong>JDK Download</strong><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd76ed6n6kj31kg0u0qb6.jpg" alt="选择对应的版本"><br>会提示需要登陆：可以使用下面这个账号和密码，（注：转载的，但是找不到原贴了）</p><ul><li>账号：<a href="mailto:2696671285@qq.com" target="_blank" rel="noopener">2696671285@qq.com</a></li><li>密码：Oracle123<br>下载完成直接按提示安装即可</li></ul><h4 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h4><p>打开Mac终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在其中加入以下环境变量，注意自己的JDK安装路径，主要是版本可能不同<br>如果复制粘贴格式乱了可以考虑用vim的paste模式： <strong>esc -&gt; :set paste -&gt; ente</strong><br>退出保存 <strong>esc -&gt; :wq -&gt; enter</strong><br>输入：<strong>source ~/.bash_profile</strong> 或者重启系统 使新新增的环境变量生效<br>可以键入 <strong>echo $PATH</strong> 查看是否添加成功</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token constant">JAVA_HOME</span><span class="token operator">=</span><span class="token operator">/</span><span class="token constant">Library</span><span class="token operator">/</span><span class="token constant">Java</span><span class="token operator">/</span><span class="token constant">JavaVirtualMachines</span><span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_241<span class="token punctuation">.</span>jdk<span class="token operator">/</span><span class="token constant">Contents</span><span class="token operator">/</span><span class="token constant">Home</span><span class="token constant">CLASSPAHT</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">:</span><span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar<span class="token punctuation">:</span><span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jar<span class="token constant">PATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token variable">$PATH</span>export <span class="token constant">JAVA_HOME</span>export <span class="token constant">CLASS_PATH</span>export <span class="token constant">PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-检查安装环境"><a href="#3-检查安装环境" class="headerlink" title="3. 检查安装环境"></a>3. 检查安装环境</h4><p>终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash">$ java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-ruby"><code class="language-ruby">java version <span class="token string">"1.8.0_241"</span><span class="token function">Java</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token constant">SE</span> <span class="token constant">Runtime</span> <span class="token function">Environment</span> <span class="token punctuation">(</span>build <span class="token number">1.8</span><span class="token punctuation">.</span>0_241<span class="token operator">-</span>b07<span class="token punctuation">)</span><span class="token constant">Java</span> <span class="token function">HotSpot</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token constant">Bit</span> <span class="token constant">Server</span> <span class="token function">VM</span> <span class="token punctuation">(</span>build <span class="token number">25.241</span><span class="token operator">-</span>b07<span class="token punctuation">,</span> mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、安装Scala"><a href="#二、安装Scala" class="headerlink" title="二、安装Scala"></a>二、安装Scala</h3><blockquote><p>Scala 是一门多范式（multi-paradigm）的编程语言，设计初衷是要集成面向对象编程和函数式编程的各种特性。<br>Scala 运行在Java虚拟机上，并兼容现有的Java程序。<br>Scala 源代码被编译成Java字节码，所以它可以运行于JVM之上，并可以调用现有的Java类库。<br>所以请预先安装好Java环境</p></blockquote><h4 id="1-brew安装"><a href="#1-brew安装" class="headerlink" title="1. brew安装"></a>1. brew安装</h4><p>有多种方法安装，首先尝试一下 <strong>brew</strong> 安装，如果没有安装brew, 参考<a href="https://www.cnblogs.com/yaogengzhu/p/10833285.html" target="_blank" rel="noopener">安装brew</a><br>打开Mac终端输入</p><pre class="line-numbers language-vim"><code class="language-vim">$ brew install scala<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一直停在 <strong>Updating Homebrew…</strong>, 可以使用Control + C 暂时停止其更新<br>注意：brew安装后会自动设置环境变量，所以不用再手动设置环境变量 -&gt;<a href="https://www.jianshu.com/p/529b7558a6e0" target="_blank" rel="noopener">Homebrew安装Packages是否需要另外设置环境变量PATH?</a></p><h4 id="2-手动安装"><a href="#2-手动安装" class="headerlink" title="2. 手动安装"></a>2. 手动安装</h4><p>如果brew 安装不上可以手动下载安装<br><a href="https://www.scala-lang.org/download/" target="_blank" rel="noopener">Scala官网 下载</a></p><ul><li>下载 Scala 二进制包解压缩文件包然后移动到自己指定的安装位置</li><li>配置环境变量 在 <strong>~/.bash_profile</strong> 中加入下列路径（根据自己的安装路径修改）步骤同上, 最后不能忘记终端运行 <strong>source ~/.bash_profile</strong></li></ul><pre class="line-numbers language-ruby"><code class="language-ruby">export <span class="token constant">PATH</span><span class="token operator">=</span><span class="token string">"$PATH:/usr/local/share/scala/bin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-检查安装"><a href="#3-检查安装" class="headerlink" title="3. 检查安装"></a>3. 检查安装</h4><ul><li>检查版本</li></ul><p>终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash">$ scala -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token constant">Scala</span> code runner version <span class="token number">2.13</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">--</span> <span class="token constant">Copyright</span> <span class="token number">2002</span><span class="token operator">-</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token constant">LAMP</span><span class="token operator">/</span><span class="token constant">EPFL</span> <span class="token keyword">and</span> <span class="token constant">Lightbend</span><span class="token punctuation">,</span> <span class="token constant">Inc</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>测试环境：</li></ul><p>终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash">$ scala<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token constant">Welcome</span> to <span class="token constant">Scala</span> <span class="token number">2.13</span><span class="token punctuation">.</span><span class="token function">1</span> <span class="token punctuation">(</span><span class="token constant">Java</span> <span class="token function">HotSpot</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token constant">Bit</span> <span class="token constant">Server</span> <span class="token constant">VM</span><span class="token punctuation">,</span> <span class="token constant">Java</span> <span class="token number">1.8</span><span class="token punctuation">.</span>0_241<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token constant">Type</span> <span class="token keyword">in</span> expressions <span class="token keyword">for</span> evaluation<span class="token punctuation">.</span> <span class="token constant">Or</span> try <span class="token symbol">:help</span><span class="token punctuation">.</span>scala<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、配置sshd"><a href="#三、配置sshd" class="headerlink" title="三、配置sshd"></a>三、配置sshd</h3><blockquote><ul><li>sshd为secure shell的简称；SSH为建立在应用层基础上的安全协议。SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议</li><li>连接方式（在客户端）：<ul><li>ssh username@ip  #文本模式</li><li>ssh -X username@ip  #可以在链接成功后开启图形界面</li></ul></li><li>注意：<ul><li>第一次链接陌生主机是要建立认证文件,然后会询问是否建立，需要输入yes</li><li>再次链接此台主机时，因为已经生成~/.ssh/know_hosts文件所以不需要再次输入yes</li></ul></li><li>远程复制：格式<ul><li>scp file root@id:dir(文件的上传)</li><li>scp root@if:/dir file(文件的下载)</li></ul></li></ul></blockquote><p><strong>在mac终端依次执行以下命令</strong></p><pre class="line-numbers language-bash"><code class="language-bash">$ ssh-keygen -t dsa -P <span class="token string">''</span> -f ~/.ssh/id_dsa$ <span class="token function">cat</span> ~/.ssh/id_dsa.pub <span class="token operator">>></span> ~/.ssh/authorized_keysmac 启动sshd$ <span class="token function">sudo</span> launchctl load -w /System/Library/LaunchDaemons/ssh.plist查看启动$ <span class="token function">sudo</span> launchctl list <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span>输出- 0 com.openssh.sshd 表示启动成功停止sshd服务$ <span class="token function">sudo</span> launchctl unload -w /System/Library/LaunchDaemons/ssh.plist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试ssh免密码登录</strong></p><p>终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ssh</span> localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token constant">Last</span> login<span class="token punctuation">:</span> <span class="token constant">Thu</span> <span class="token constant">Mar</span> <span class="token number">26</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">09</span> <span class="token number">2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果输出：</p><pre class="line-numbers language-ruby"><code class="language-ruby">ssh<span class="token punctuation">:</span> connect to host localhost port <span class="token number">22</span><span class="token punctuation">:</span> <span class="token constant">Connection</span> refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则需要打开mac远程登陆功能： System Preferences -&gt; Sharing -&gt; 勾选Remote Login</p><p><strong>解释：</strong></p><ul><li><strong>id_rsa.pub和id_dsa.pub有什么区别？</strong><br>id_rsa.pub和id_dsa.pub是id_rsa和id_dsa的。如果您要求与SSH相关，id_rsa是 RSA 密钥，可与SSH一起使用协议1或2，而id_dsa是 DSA 密钥，只能与SSH协议2一起使用。两者都非常安全，但DSA似乎是标准的（假设所有的客户端/服务器支持SSH 2）。<br>参见：<a href="https://www.it1352.com/680491.html" target="_blank" rel="noopener">id_rsa.pub和id_dsa.pub有什么区别？</a></li><li><strong>launchctl 命令的作用</strong><br>使sshd开机启动<br>参见：<br><a href="https://www.jianshu.com/p/4addd9b455f2" target="_blank" rel="noopener">Mac中的定时任务利器：launchctl</a><br><a href="http://codingpub.github.io/2016/10/27/OS-X-%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">OS X 添加定时任务</a></li><li><strong>ssh 和 sshd</strong><br>当主机中开启openssh服务，那么就对外开放了远程连接的接口<br>ssh为openssh服务的客户端，sshd为openssh服务的服务端<br>远程管理工具ssh具有数据加密传输、网络开销小以及应用平台范围广的特点，是远程管理中最常见的控制工具<br>参见：<a href="https://blog.csdn.net/weixin_41476978/article/details/79913158" target="_blank" rel="noopener">Linux系统的ssh与sshd服务</a></li></ul><h3 id="四、安装Hadoop"><a href="#四、安装Hadoop" class="headerlink" title="四、安装Hadoop"></a>四、安装Hadoop</h3><blockquote><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。<br>Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。<br>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，而MapReduce则为海量的数据提供了计算</p></blockquote><p><strong>Spark 有预装hadoop的包和不预装的包， 如果安装spark可以先跳过hadoop的安装试一下</strong></p><h4 id="1-brew安装-1"><a href="#1-brew安装-1" class="headerlink" title="1. brew安装"></a>1. brew安装</h4><p>如果没有安装brew, 参考<a href="https://www.cnblogs.com/yaogengzhu/p/10833285.html" target="_blank" rel="noopener">安装brew</a><br>终端输入：</p><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> Hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>brew 安装不需要手动配置环境，同上。</p><h4 id="2-手动安装-1"><a href="#2-手动安装-1" class="headerlink" title="2. 手动安装"></a>2. 手动安装</h4><p>brew安装不成功可以采用手动安装<br><a href="http://hadoop.apache.org/releases.html" target="_blank" rel="noopener">官网下载安装包</a><br>binary是编译好的可以直接使用，source是还没编译过的源代码，需要自行编译。这里我们下载binary就好。<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd7hm461sxj31lq0u04c6.jpg" alt="下载界面"></p><p><strong>配置环境变量</strong></p><p>打开Mac终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在其中输入，退出保存</p><pre class="line-numbers language-ruby"><code class="language-ruby">$ export <span class="token constant">HADOOP_HOME</span><span class="token operator">=</span> 安装的位置，如<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token constant">Cellar</span><span class="token operator">/</span>hadoop<span class="token operator">/</span><span class="token number">3.2</span><span class="token punctuation">.</span>1_1$ export <span class="token constant">PATH</span><span class="token operator">=</span><span class="token variable">$PATH</span><span class="token punctuation">:</span><span class="token variable">$HADOOP_HOME</span><span class="token operator">/</span>bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使环境配置生效</p><h4 id="3-Hadoop配置"><a href="#3-Hadoop配置" class="headerlink" title="3.Hadoop配置"></a>3.Hadoop配置</h4><p><strong>/usr/local/Cellar/hadoop/3.2.1_1/libexec/etc/hadoop</strong> 目录下添加下列内容</p><ul><li>core-site.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/usr/local/Cellar/hadoop/3.2.1.1/libexec/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://localhost:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>hadoop-env.sh</li></ul><pre class="line-numbers language-jsx"><code class="language-jsx"># 配置Hadoop使用的JDK版本，注意不要使用jdk1<span class="token number">.9</span><span class="token punctuation">,</span> 高版本会有问题<span class="token keyword">export</span> JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_241<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home # 增加导出<span class="token keyword">export</span> HADOOP_OPTS<span class="token operator">=</span><span class="token string">"-Djava.library.path=${HADOOP_HOME}/lib/native"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>hdfs-site.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.permissions.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.http.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>localhost:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/usr/local/Cellar/hadoop/3.2.1.1/libexec/tmp/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/usr/local/Cellar/hadoop/3.2.1.1/libexec/tmp/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mapred-site.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>yarn-site.xml</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-hadoop启动"><a href="#4-hadoop启动" class="headerlink" title="4. hadoop启动"></a>4. hadoop启动</h4><ul><li>查看安装版本</li></ul><p>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ hadoop version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">830</span> <span class="token constant">DEBUG</span> util<span class="token punctuation">.</span><span class="token constant">VersionInfo</span><span class="token punctuation">:</span> version<span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token constant">Hadoop</span> <span class="token number">3.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token constant">Source</span> code repository https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>gitbox<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>repos<span class="token operator">/</span>asf<span class="token operator">/</span>hadoop<span class="token punctuation">.</span>git <span class="token operator">-</span>r b3cbbb467e22ea829b3808f4b7b01d07e0bf3842<span class="token constant">Compiled</span> by rohithsharmaks on <span class="token number">2019</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span>10T15<span class="token punctuation">:</span>56Z<span class="token constant">Compiled</span> with protoc <span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token constant">From</span> source with checksum 776eaf9eee9c0ffc370bcbc1888737<span class="token constant">This</span> command was run using <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token constant">Cellar</span><span class="token operator">/</span>hadoop<span class="token operator">/</span><span class="token number">3.2</span><span class="token punctuation">.</span>1_1<span class="token operator">/</span>libexec<span class="token operator">/</span>share<span class="token operator">/</span>hadoop<span class="token operator">/</span>common<span class="token operator">/</span>hadoop<span class="token operator">-</span>common<span class="token number">-3.2</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>格式化hdfs</li></ul><p>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> /usr/local/Cellar/hadoop/3.2.1_1<span class="token comment" spellcheck="true"># 然后格式化文件系统</span>$ bin/hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>如果不成功，检查一下前面的环境配置</strong><br><strong>只需要格式化一次，如果需要再次格式化</strong></p><ul><li>启动</li></ul><p>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> /usr/local/Cellar/hadoop/3.2.1_1<span class="token comment" spellcheck="true"># 启动NameNode和DataNode的守护进程</span>$ sbin/start-dfs.sh<span class="token comment" spellcheck="true"># 启动ResourceManager和NodeManager的守护进程</span>$ sbin/start-yarn.sh<span class="token comment" spellcheck="true"># 启动所有进程</span>$ sbin/start-all.sh<span class="token comment" spellcheck="true"># 停止所有进程</span>$ sbin/stop-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-检查安装"><a href="#4-检查安装" class="headerlink" title="4. 检查安装"></a>4. 检查安装</h4><ul><li>终端输入： <strong>jps</strong></li></ul><p>输出：</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token number">54401</span> <span class="token constant">NodeManager</span><span class="token number">54305</span> <span class="token constant">ResourceManager</span><span class="token number">54067</span> <span class="token constant">SecondaryNameNode</span><span class="token number">53747</span> <span class="token constant">NameNode</span><span class="token number">53933</span> <span class="token constant">DataNode</span><span class="token number">66062</span> <span class="token constant">Jps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看Hadoop集群的信息<br><a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a></li><li>查看hadoop集群运行情况<br><a href="http://localhost:50070" target="_blank" rel="noopener">http://localhost:50070</a></li></ul><p><strong>如果有问题，请检查前面的hadoop配置，如果有问题-&gt;停止所有进程-&gt;删除hdfs-site.xml中设置的两个文件夹-&gt;重新进行hdfs格式化-&gt;重新启动</strong><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd7j0kbfqsj31mz0u0gwf.jpg" alt="Hadoop集群的信息"><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd7j1tprgmj31ed0u0k0r.jpg" alt="hadoop集群运行情况"></p><h3 id="五、安装Spark-amp-pyspark"><a href="#五、安装Spark-amp-pyspark" class="headerlink" title="五、安装Spark&amp;pyspark"></a>五、安装Spark&amp;pyspark</h3><h4 id="1-brew安装-2"><a href="#1-brew安装-2" class="headerlink" title="1.brew安装"></a>1.brew安装</h4><p>如果没有安装brew, 参考<a href="https://www.cnblogs.com/yaogengzhu/p/10833285.html" target="_blank" rel="noopener">安装brew</a></p><p>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ brew <span class="token function">install</span> apache-spark<span class="token comment" spellcheck="true"># 检测是否安装成功，启动spark</span><span class="token function">cd</span> /usr/local/Cellar/apache-spark/1.3.0/bin/./spark-shell<span class="token comment" spellcheck="true"># 或者直接输入</span>spark-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-手动安装-2"><a href="#2-手动安装-2" class="headerlink" title="2. 手动安装"></a>2. 手动安装</h4><p>如果brew安装不了，可以手动安装</p><ul><li><p>官网下载安装包,<a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">传送门</a><br>根据是否预装了hadoop选择相应版本 参见：<a href="https://blog.csdn.net/yoshubom/article/details/104598483" target="_blank" rel="noopener">Spark 下载版本间的区别</a></p></li><li><p>解压缩安装包到/usr/local下<br>如：$sudo tar -zxf ~/Dowmloads/spark-2.0.2-bin-hadoop2.7.tgz -C /usr/local/$<br>可以更改一下文件名 $sudo mv ./spark-2.0.2-bin-hadoop2.7 ./spark$</p></li><li><p>配置环境变量</p></li></ul><p>打开Mac终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在其中输入，退出保存</p><pre class="line-numbers language-ruby"><code class="language-ruby">$ export <span class="token constant">SPARK_HOME</span><span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>spark$ export <span class="token constant">PATH</span><span class="token operator">=</span><span class="token variable">$PATH</span><span class="token punctuation">:</span><span class="token variable">$HADOOP_HOME</span><span class="token operator">/</span>bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使环境配置生效</p><h4 id="3-Spark配置"><a href="#3-Spark配置" class="headerlink" title="3. Spark配置"></a>3. Spark配置</h4><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># 打开自己的安装路径，如果是brew安装的应该会在/usr/local/Cellar/下</span>$ cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token constant">Cellar</span><span class="token operator">/</span>apache<span class="token operator">-</span>spark<span class="token operator">/</span><span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">/</span>libexec<span class="token operator">/</span>conf$ cp spark<span class="token operator">-</span>env<span class="token punctuation">.</span>sh<span class="token punctuation">.</span>template spark<span class="token operator">-</span>env<span class="token punctuation">.</span>sh$ vim spark<span class="token operator">-</span>env<span class="token punctuation">.</span>sh<span class="token comment" spellcheck="true"># 添加如下内容</span><span class="token comment" spellcheck="true"># 根据自己的安装路径更改</span>export <span class="token constant">JAVA_HOME</span><span class="token operator">=</span><span class="token operator">/</span><span class="token constant">Library</span><span class="token operator">/</span><span class="token constant">Java</span><span class="token operator">/</span><span class="token constant">JavaVirtualMachines</span><span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_241<span class="token punctuation">.</span>jdk<span class="token operator">/</span><span class="token constant">Contents</span><span class="token operator">/</span><span class="token constant">Home</span>export <span class="token constant">SCALA_HOME</span><span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token constant">Cellar</span><span class="token operator">/</span>scala<span class="token operator">/</span><span class="token number">2.13</span><span class="token punctuation">.</span>1_1export <span class="token constant">HADOOP_CONF_DIR</span><span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token constant">Cellar</span><span class="token operator">/</span>hadoop<span class="token operator">/</span><span class="token number">3.2</span><span class="token punctuation">.</span>1_1<span class="token operator">/</span>libexec<span class="token operator">/</span>etc<span class="token operator">/</span>hadoopexport <span class="token constant">SPARK_MASTER_IP</span><span class="token operator">=</span>localhostexport <span class="token constant">SPARK_LOCAL_IP</span><span class="token operator">=</span>localhostexport <span class="token constant">SPARK_WORKER_CORES</span><span class="token operator">=</span><span class="token number">2</span>export <span class="token constant">SPARK_WORKER_MEMORY</span><span class="token operator">=</span>2g$ cp slaves<span class="token punctuation">.</span>template slaves<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-检查安装-1"><a href="#4-检查安装-1" class="headerlink" title="4. 检查安装"></a>4. 检查安装</h4><ul><li>启动shell</li></ul><p>打开Mac终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">spark-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动Spark</li></ul><p>打开Mac终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> /usr/local/Cellar/apache-spark/2.4.5/libexec$ sbin/start-all.sh<span class="token comment" spellcheck="true"># 查看JPS</span>$ jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出,多了一个Master，worker进程</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token number">54401</span> <span class="token constant">NodeManager</span><span class="token number">54305</span> <span class="token constant">ResourceManager</span><span class="token number">54067</span> <span class="token constant">SecondaryNameNode</span><span class="token number">53747</span> <span class="token constant">NameNode</span><span class="token number">68269</span> <span class="token constant">Jps</span><span class="token number">68221</span> <span class="token constant">Master</span><span class="token number">53933</span> <span class="token constant">DataNode</span><span class="token number">68252</span> <span class="token constant">Worker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>查看执行状态</p><ul><li>查看spark 集群运行情况。<br><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>如果冲突：可以在spark-env.sh 中加入export SPARK_MASTER_WEBUI_PORT=98080来指定端口</li><li>查看 spark task job运行情况<br><a href="http://localhost:4040/jobs/" target="_blank" rel="noopener">http://localhost:4040/jobs/</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd7lstejkhj31mf0u0ai3.jpg" alt="spark 集群运行情况"></p><!-- ![]() --></li></ul><h4 id="5-安装pyspark"><a href="#5-安装pyspark" class="headerlink" title="5. 安装pyspark"></a>5. 安装pyspark</h4><p>mac 终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ pip <span class="token function">install</span> --upgrade pyspark -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token constant">Looking</span> <span class="token keyword">in</span> indexes<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple<span class="token constant">Requirement</span> already up<span class="token operator">-</span>to<span class="token operator">-</span>date<span class="token punctuation">:</span> pyspark <span class="token keyword">in</span> <span class="token operator">/</span><span class="token constant">Users</span><span class="token regex">/tawn/</span><span class="token punctuation">.</span>pyenv<span class="token operator">/</span>versions<span class="token operator">/</span><span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token number">.6</span><span class="token operator">/</span>site<span class="token operator">-</span><span class="token function">packages</span> <span class="token punctuation">(</span><span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token constant">Requirement</span> already satisfied<span class="token punctuation">,</span> skipping upgrade<span class="token punctuation">:</span> py4j<span class="token operator">==</span><span class="token number">0.10</span><span class="token punctuation">.</span><span class="token number">7</span> <span class="token keyword">in</span> <span class="token operator">/</span><span class="token constant">Users</span><span class="token regex">/tawn/</span><span class="token punctuation">.</span>pyenv<span class="token operator">/</span>versions<span class="token operator">/</span><span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token number">.6</span><span class="token operator">/</span>site<span class="token operator">-</span><span class="token function">packages</span> <span class="token punctuation">(</span>from pyspark<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">0.10</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果报错：ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.<br>可以先尝试:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> pip <span class="token function">install</span> --upgrade pip$ <span class="token function">sudo</span> pip <span class="token function">install</span> --upgrade setuptools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果报错：ERROR: Could not find a version that satisfies the requirement pypandoc<br>单独安装pypandoc</p><pre class="line-numbers language-bash"><code class="language-bash">$ pip <span class="token function">install</span> pypandoc$ pip <span class="token function">install</span> --upgrade pyspark -i https://pypi.tuna.tsinghua.edu.cn/simple --trusted-host mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-pyspark-启动jupyter"><a href="#6-pyspark-启动jupyter" class="headerlink" title="6. pyspark 启动jupyter"></a>6. pyspark 启动jupyter</h4><p>在 .bash_profile 中加入以下内容</p><pre class="line-numbers language-ruby"><code class="language-ruby">export <span class="token constant">SPARK_HOME</span><span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token constant">Cellar</span><span class="token operator">/</span>apache<span class="token operator">-</span>spark<span class="token operator">/</span><span class="token number">2.4</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">/</span>libexecexport <span class="token constant">PATH</span><span class="token operator">=</span><span class="token variable">$SPARK_HOME</span><span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token variable">$PATH</span>export <span class="token constant">PYSPARK_DRIVER_PYTHON</span><span class="token operator">=</span>jupyterexport <span class="token constant">PYSPARK_DRIVER_PYTHON_OPTS</span><span class="token operator">=</span><span class="token string">"notebook"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终端输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使环境配置生效</p><p>demo</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># $ pyspark</span><span class="token comment" spellcheck="true"># 会自动启动jupyter notebook</span><span class="token comment" spellcheck="true"># 新建一个交互脚本，输入</span>myRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'joey'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>myRDD<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Rose'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'joey'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>[参考资料]</strong></p><ul><li><a href="https://www.jianshu.com/p/5a46a3193ca0" target="_blank" rel="noopener">Spark 安装和配置</a></li><li><a href="https://blog.csdn.net/shuaigexiaobo/article/details/85280084" target="_blank" rel="noopener">JDK介绍与安装</a></li><li><a href="https://www.runoob.com/scala/scala-tutorial.html" target="_blank" rel="noopener">Scala 教程</a></li><li><a href="https://www.cnblogs.com/yaogengzhu/p/10833285.html" target="_blank" rel="noopener">安装brew</a></li><li><a href="https://www.jianshu.com/p/529b7558a6e0" target="_blank" rel="noopener">Homebrew安装Packages是否需要另外设置环境变量PATH?</a></li><li><a href="https://www.cnblogs.com/hizhaolei/p/10600449.html" target="_blank" rel="noopener">Linux系统的环境变量$PATH</a></li><li><a href="https://www.cnblogs.com/tinywan/p/7224011.html" target="_blank" rel="noopener">Linux 命令详解（一）export 命令</a></li><li><a href="https://www.cnblogs.com/uthnb/p/9367875.html" target="_blank" rel="noopener">Linux之sshd服务</a></li><li><a href="https://www.it1352.com/680491.html" target="_blank" rel="noopener">id_rsa.pub和id_dsa.pub有什么区别？</a></li><li><a href="https://www.jianshu.com/p/4addd9b455f2" target="_blank" rel="noopener">Mac中的定时任务利器：launchctl</a></li><li><a href="http://codingpub.github.io/2016/10/27/OS-X-%E6%B7%BB%E5%8A%A0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/" target="_blank" rel="noopener">OS X 添加定时任务</a></li><li><a href="https://blog.csdn.net/weixin_41476978/article/details/79913158" target="_blank" rel="noopener">Linux系统的ssh与sshd服务</a></li><li><a href="https://blog.csdn.net/xianpanjia4616/article/details/87696925" target="_blank" rel="noopener">hadoop的启动和停止命令</a></li><li><a href="https://www.cnblogs.com/mfrbuaa/p/4743105.html" target="_blank" rel="noopener">hadoop出现namenode running as process 18472. Stop it first.</a></li><li><a href="http://codingxiaxw.cn/2016/12/06/59-mac-hadoop/" target="_blank" rel="noopener">『 Hadoop 』mac下Hadoop的安装与使用</a></li><li><a href="http://codingxiaxw.cn/2016/12/07/60-mac-spark/" target="_blank" rel="noopener">『 Spark 』mac下Spark的安装与使用</a></li><li><a href="https://www.cnblogs.com/little-YTMM/p/6238847.html" target="_blank" rel="noopener">Spark学习（一） – Spark安装及简介</a></li><li><a href="https://blog.csdn.net/yoshubom/article/details/104598483" target="_blank" rel="noopener">Spark 下载版本间的区别</a></li><li><a href="https://blog.csdn.net/qq_37189082/article/details/97658103" target="_blank" rel="noopener">安装tldr出错ERROR:…python setup.py egg_info Check</a></li><li><a href="https://blog.csdn.net/qq_35374722/article/details/103319220" target="_blank" rel="noopener">ERROR: xxxx setup.py egg_info xxxs for fullxx</a></li></ul><p><strong>[声明]</strong><br>部分资源源自网络，侵删！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily Schedule</title>
      <link href="/2020/02/08/daily-schedule/"/>
      <url>/2020/02/08/daily-schedule/</url>
      
        <content type="html"><![CDATA[<h2 id="2020-02-28"><a href="#2020-02-28" class="headerlink" title="2020/02/28"></a>2020/02/28</h2><ol><li>6：30前必须起完床。完成</li><li>6: 30开始听听力和做阅读并对好答案 -&gt; 8:30</li><li>8: 30 去吃饭</li><li>9: 00 口语练习，zoom 录制 至少要完成两个part2的作品</li><li>10 - 11 桌子上开始订正听力和阅读 1h</li><li>1:00 - 1:30 开始作文书 未完</li><li>1:30 - 2:00 听力阅读更正 未完</li><li>2:00 - 3:00 口语录音，至少两个 一半 考虑继续来一个</li><li>3:00 - 3:30 写作批改</li><li>3:30 - 4:30 作文 完成task2</li><li>5:00 - 5:40 静听真题section1</li><li>8:40 - 9:30 静听真题section1</li><li>9:40 - 11:00 完成未完成的</li></ol><h2 id="2020-02-26"><a href="#2020-02-26" class="headerlink" title="2020/02/26"></a>2020/02/26</h2><ol start="0"><li>口语练习前四个，录制后两个</li><li>顾家北作文书</li><li>九分达人听力</li><li>九分达人阅读</li><li>听力section1section2静听</li><li>听力静听</li><li>阅读passage</li><li>整理和复习作文，听力，阅读词汇</li></ol><h2 id="2020-02-20"><a href="#2020-02-20" class="headerlink" title="2020/02/20"></a>2020/02/20</h2><ul><li>8:00 起床</li><li>8:30-9:00 listening</li><li>9:00-9:30 更正listening</li><li>9:30-10:00 speaking aloud 口语365</li><li>10:00-11:20 看作文批改 看完写篇小作文</li><li>11:00-12:30 吃饭</li><li>12:30-13:00 睡觉</li><li>13:00-14:00 练习口语</li><li>14:00-15:00 静听听力 + listening problems</li><li>15:00-16:00 练习口语</li><li>16:00-17:00 阅读 + 口语B站课堂</li><li>17:00-18:30 吃饭</li><li>18:30-20:00 大小作文</li><li>20:00-later 自习</li></ul><h2 id="2020-02-19"><a href="#2020-02-19" class="headerlink" title="2020/02/19"></a>2020/02/19</h2><ul><li>Morning<ul><li>8:00 起床</li><li>8:30-9:00 listening</li><li>9:10-10:10 reading</li><li>10:20-11:20 writing</li></ul></li><li>Noon<ul><li>11:20 - 1:00 中饭加更正reading 和 listening</li></ul></li><li>Afternoon<ul><li>1:00 - 1:30 午休</li><li>1:30 - 2:00 guitar or play</li><li>2:00 - 5:00 speaking Simon : choosing speaking recording re-speaking</li></ul></li><li>Dinner</li><li>Night<ul><li>7:00 - 8:30 静听听力 + listening problems</li><li>8:30 - … self-studying lesson + graduation design</li><li>before 12 sleeping</li></ul></li></ul><h2 id="2020-02-18"><a href="#2020-02-18" class="headerlink" title="2020/02/18"></a>2020/02/18</h2><ul><li>精听一篇听力</li><li>listening 6-4 / 5.5</li><li>reading 6-4 / 8.0</li><li>speaking - 开言英语</li><li>writing task1，2</li></ul><h2 id="2020-02-17"><a href="#2020-02-17" class="headerlink" title="2020/02/17"></a>2020/02/17</h2><ul><li>writing task 1，2</li><li>reading 6-3/7.5</li><li>listening 6-3/5.5</li><li>听力problems10</li><li>精听一篇听力 未完成</li></ul><h2 id="2020-02-16"><a href="#2020-02-16" class="headerlink" title="2020/02/16"></a>2020/02/16</h2><ul><li>leetcode 176</li><li>reading 6-2 / 8.0</li><li>listening 6-2 / 6.0</li><li><a href="https://www.bilibili.com/video/av79633193/?p=1" target="_blank" rel="noopener">精听一篇听力</a> <a href="https://mp.weixin.qq.com/s/nRAhcyaI9Ea6niUl_3LtQg" target="_blank" rel="noopener">如何精听</a></li><li><a href="https://www.bilibili.com/video/av75555387/?p=1" target="_blank" rel="noopener">听力problem</a></li><li>magazines</li><li>更正andWriting</li></ul><h2 id="2020-02-13"><a href="#2020-02-13" class="headerlink" title="2020/02/13"></a>2020/02/13</h2><ul><li>毕设开题报告 完成</li></ul><h2 id="2020-02-12"><a href="#2020-02-12" class="headerlink" title="2020/02/12"></a>2020/02/12</h2><ul><li><p>Make notes for Simon lesson 4</p><details><summary><b>Notes:</b></summary><ul><li>Topics: 6 main topic areas  <ul><li>Describe a person/ a place / an object / an event / an activity / your favourites.  </li></ul></li><li>Describe a place  <ul><li>Work on ideas and vocabulary</li><li>Not grammar or linking</li><li>a place<ul><li>one<ul><li>a city (you’ve visited)</li><li>a city (you would like to visit)</li><li>somewhere you want on holiday</li><li>a historic place</li><li>a river, lake or sea</li><li>a journey(where your went)</li></ul></li><li>two<ul><li>show</li><li>a restaurant</li><li>a street</li></ul></li></ul></li><li>contents<ul><li>which place</li><li>where</li><li>what you did / can do there</li><li>why you like it</li></ul></li><li>Preparation tips<ul><li>think a <strong>‘theme’</strong> for any place</li><li>start with easy <strong>adjective</strong>  fun, lively</li><li>search for <strong>better words</strong> and phrases  - fascinating, unforgettable, the time flew by</li><li><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbth07ywqhj31430u0e52.jpg" alt="interesting/fun city 'theme'"></li><li><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbth0kfmuvj31430u04ig.jpg" alt="historic theme"></li><li><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbth0vya0rj31400u0h7t.jpg" alt="friendly theme (i.g. restaurant)"></li><li>Final step in preparation : think of examples or stories to demonstrate each theme</li><li>you can’t prepare for everything, you need adapt your ideas and improvise in the test.</li><li>practise, record, write down and improve, re-record …</li></ul></li><li>examples<ul><li><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbtgq8pt37j30u016jn6h.jpg" alt="Describe a river, lake or sea"></li><li><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbtgqtlhxbj30u016i47t.jpg" alt="Describe a restaurant"></li></ul></li></ul></li></ul></details></li></ul><ul><li>完成了LeetcodeContest174</li><li>LeetcodeContest174题解博客</li><li>完成了一个 Writing</li><li>完成了一个 Listening</li><li>完成了一个 Reading</li></ul><h2 id="2020-02-11"><a href="#2020-02-11" class="headerlink" title="2020/02/11"></a>2020/02/11</h2><ul><li>完成了LeetcodeContest173</li><li>LeetcodeContest173题解博客</li><li>更正了reading</li><li>查描述衣服的词语 未完成<ul><li>明亮，暗淡</li></ul></li><li>a part exercise 未完成<ul><li>choose a theme and a person</li><li>start with easy adjective (what I can think)</li><li>search for better words or phrase</li><li>think of stories and speak it</li><li>combine the adjective and stories to complete a part two</li><li>record it , write it, improve it and repeat</li></ul></li><li>Magazine<ul><li><a href="https://zhidao.baidu.com/question/691214671650146764.html" target="_blank" rel="noopener">if 引导虚拟语气</a></li></ul></li><li>Listening 7-4 23/6.0</li></ul><h2 id="2020-02-10"><a href="#2020-02-10" class="headerlink" title="2020/02/10"></a>2020/02/10</h2><ul><li>correct the Listening 完成</li><li>查描述衣服的词语 未完成<ul><li>明亮，暗淡</li></ul></li><li>a part exercise 未完成<ul><li>choose a theme and a person</li><li>start with easy adjective (what I can think)</li><li>search for better words or phrase</li><li>think of stories and speak it</li><li>combine the adjective and stories to complete a part two</li><li>record it , write it, improve it and repeat</li></ul></li><li>Make notes for Simon lesson 4 未完成<ul><li>Describe a place<ul><li>Work on ideas and vocabulary</li><li>Not grammar or linking</li></ul></li></ul></li><li>完成了LeetcodeContest172</li><li>LeetcodeContest172题解博客</li><li>完成了一篇reading 8.0 - 3.5/4.0</li><li>Reading magazine</li></ul><h2 id="2020-02-09"><a href="#2020-02-09" class="headerlink" title="2020/02/09"></a>2020/02/09</h2><ul><li>完成了LeetcodeContest175</li><li>LeetcodeContest175题解博客</li><li>Reading magazine</li><li>复习Simon口语第三课part2</li><li>学习Simon口语第四课</li><li>Listen a recording</li><li>Writing</li><li>王陆雅思听力</li></ul><h2 id="2020-02-08"><a href="#2020-02-08" class="headerlink" title="2020/02/08"></a>2020/02/08</h2><ul><li><p>完成LeetcodeContest171</p></li><li><p>LeetcodeContest171题解博客</p></li><li><p>完成xcode安装</p></li><li><p>Reading magazines 36‘</p></li><li><p>复习Simon 口语课二 part1</p><details><summary><b>Notes:</b></summary><ul><li>4 - 5 minutes</li><li>10 or 11 questions  </li><li>3 topic areas<ul><li>2-3 introduction questions about your work、studies of where you live</li><li>4 questions about one short topic</li><li>4 questions about a second minimal topic</li></ul></li><li>easy!</li><li>Remember:<ul><li>try to show your fluency</li><li>don’t stop and think</li><li>don’t worry about vocabulary and grammar</li><li>don’t show off you language skills</li><li>it’s an easy warm-up</li><li>just give a short, simple answer but use full sentences</li><li>your can’t get a high score in part1</li><li>Stop with confidence</li><li>don’t keey talking</li><li>smile at the examiner</li></ul></li><li>Topics : often seem childish<ul><li>what your favorite colour? simple answer + give reason full sentences.</li><li>practise: Do you like/enjoy … ?  walking, games, gardens, flowers, dancing, you can give negative answers.</li></ul></li></ul></details>  </li></ul><ul><li><p>练习Simon part1 assignment</p>  <details>  <summary><b>assignment:<b></b></b></summary><p>  <b> Here are my sample answers for the 8 questions in the video lesson: </b></p><ul><li><p>Do you like sport?<br>No, I’m not really a sports fan. I like swimming, but I don’t get much time to go these days<br>because I’m too busy with work.</p></li><li><p>Do you think it’s better to watch sports or play them yourself?<br>It’s much healthier to play sports than to watch them, but it can be fun to be a spectator<br>and support a team or a particular athlete.</p></li><li><p>Why do you think some sports are so popular?<br>Well, if I take football as an example, I think the fans like the feeling of winning and sharing an exciting experience with their friends and other fans.</p></li><li><p>Do you think children should all have to do sports at school?<br>Yes, I think children should all be encouraged to try a variety of sports, firstly because they<br>need the exercise, and secondly because children need to have fun.</p></li><li><p>What’s your favourite colour? Why?<br>My favourite colour is blue because it’s the colour of the sky on a nice day.</p></li><li><p>Do different colours have different meanings in your country?<br>Yes they do. For example, red is usually used to mean danger, and green is always the<br>colour we use for anything related to the environment or nature.</p></li><li><p>Do you think that colours can affect the way people feel?<br>Yes, colours do seem to affect our emotions. Bright colours like yellow or red can make us<br>feel happier or more active, for example.</p></li><li><p>Do you wear different coloured clothes now compared to when you were a child?<br>I can’t really remember. I probably wore much more colourful clothes back then, because<br>children usually like fun clothes rather than boring dark colours.</p></li></ul></details></li></ul><li><p>Simon 第三课 part2</p><details><summary><b>Notes:<b></b></b></summary><ul><li><p>3 to 4 minutes</p></li><li><p>1 minute to prepare</p></li><li><p>speak for two minutes</p></li><li><p>task card</p></li><li><p>Make notes : Quickly decide what you’re going to talk about</p></li><li><p>Technique :</p><ul><li>Follow the point on the task card, they help you structure and give something to say.</li><li>Say as much as you can for each point.</li></ul></li><li><p>Before the exam :</p><ul><li>Prepare for common topic areas.</li><li>Ideas and Vocabulary are the key.</li></ul></li><li><p>Topics: 6 main topic areas</p><ul><li>Describe a person/ a place / an object / an event / an activity / your favourites.</li></ul></li><li><p>Prepare ideas and vocabulary</p><ul><li>not grammar or linking</li><li>Speak naturally, explain in detail</li><li>content, not structure</li><li>Describe a person<ul><li>teacher</li><li>famous person</li><li>friend</li><li>friend</li><li>family member</li><li>child</li><li>someone who helps people</li><li>someone who does something well</li></ul></li><li>Describe a person<ul><li>who (appearance, personality)</li><li>what he / she does</li><li>when/ how / where you met</li><li>how you know this person</li><li>why you like/respect this person</li></ul></li><li>Preparation tips<ul><li>think a <strong>‘theme’</strong> for any person (friend, family, famous, child, etc) - hard-working</li><li>start with easy <strong>adjective</strong>  bush, active</li><li>search for <strong>better words</strong> and phrases  - conscientious, someone you can count on<ul><li>hard-working “theme”<ul><li>enthusiastic</li><li>energetic</li><li>studious</li><li>persistent</li><li>motivated</li><li>determined to succeed</li><li>someone who see things thorough</li><li>a good team player</li><li>likes to challenge himself / herself</li></ul></li><li>friendly “theme”<ul><li>kind, caring</li><li>generous, selfish</li><li>big - hearted</li><li>supportive</li><li>down-to-earth, easy going</li><li>always there when you need him / her</li><li>someone who cheers me up</li><li>a big / magnetic personality</li><li>lights up the room</li></ul></li></ul></li><li>think of examples or stories to demonstrate each theme</li><li>practise, record, write down and improve, re-record …</li></ul></li><li>examples<br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbpcvthocoj30u00wv12n.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/0082zybpgy1gbpcwm201qj311m0u0gr7.jpg" alt=""></li></ul></li></ul></details></li><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode Week Contest</title>
      <link href="/2020/02/08/leetcode-week-contest/"/>
      <url>/2020/02/08/leetcode-week-contest/</url>
      
        <content type="html"><![CDATA[<h2 id="Contest-176"><a href="#Contest-176" class="headerlink" title="Contest 176"></a><a href="https://leetcode-cn.com/contest/weekly-contest-176/" target="_blank" rel="noopener">Contest 176</a></h2><h3 id="5340-统计有序矩阵中的负数"><a href="#5340-统计有序矩阵中的负数" class="headerlink" title="5340. 统计有序矩阵中的负数"></a><a href="https://leetcode-cn.com/problems/count-negative-numbers-in-a-sorted-matrix/" target="_blank" rel="noopener">5340. 统计有序矩阵中的负数</a></h3><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><ul><li>直接统计即可</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countNegatives</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    res <span class="token operator">+</span><span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> j<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5341-最后-K-个数的乘积"><a href="#5341-最后-K-个数的乘积" class="headerlink" title="5341. 最后 K 个数的乘积"></a><a href="https://leetcode-cn.com/problems/product-of-the-last-k-numbers/" target="_blank" rel="noopener">5341. 最后 K 个数的乘积</a></h3><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><ul><li>存储数并从后向前遍历累乘即可</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ProductOfNumbers</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vs<span class="token punctuation">;</span>    <span class="token function">ProductOfNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> vs<span class="token punctuation">[</span>vs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your ProductOfNumbers object will be instantiated and called as such: * ProductOfNumbers* obj = new ProductOfNumbers(); * obj->add(num); * int param_2 = obj->getProduct(k); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5342-最多可以参加的会议数目"><a href="#5342-最多可以参加的会议数目" class="headerlink" title="5342. 最多可以参加的会议数目"></a><a href="https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended/solution/" target="_blank" rel="noopener">5342. 最多可以参加的会议数目</a></h3><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><ul><li>首先给所有会议按开始时间从先到后排序</li><li>统计天数最大值$maxd$</li><li>将日期从1遍历到$maxd$, 将符合条件的区间都丢入堆，取出会议结束时间最早的会议进行匹配</li><li>累加会议数</li></ul><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxEvents</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sort</span><span class="token punctuation">(</span>events<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> events<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> x<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> events<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          maxd <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxd<span class="token punctuation">,</span> events<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> que<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> events<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> events<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> t <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">>=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>res<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5343-多次求和构造目标数组"><a href="#5343-多次求和构造目标数组" class="headerlink" title="5343. 多次求和构造目标数组"></a><a href="https://leetcode-cn.com/problems/construct-target-array-with-multiple-sums/submissions/" target="_blank" rel="noopener">5343. 多次求和构造目标数组</a></h3><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><ul><li>反向模拟，每次找到数列中的最大值进行逆推</li><li>利用堆优化查找最大值</li><li>注意求和会溢出int型</li></ul><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPossible</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> target<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> p <span class="token operator">=</span> sum <span class="token operator">-</span> t<span class="token punctuation">;</span>            sum <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">-</span> p <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-</span>p <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Contest-175"><a href="#Contest-175" class="headerlink" title="Contest 175"></a><a href="https://leetcode-cn.com/contest/weekly-contest-175/" target="_blank" rel="noopener">Contest 175</a></h2><h3 id="1346-检查整数及其两倍数是否存在"><a href="#1346-检查整数及其两倍数是否存在" class="headerlink" title="1346. 检查整数及其两倍数是否存在"></a><a href="https://leetcode-cn.com/problems/check-if-n-and-its-double-exist/" target="_blank" rel="noopener">1346. 检查整数及其两倍数是否存在</a></h3><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><ul><li>遍历记录各个数是否出现</li><li>遍历查询其倍数是否出现</li><li>标记0的个数，特判</li><li>由于有负数，并且有double的可能，所以整体前移$ 2 * 10^3 $</li></ul><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">checkIfExist</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> exit<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>exit<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>exit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                exit<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>exit<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2000</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1347-制造字母异位词的最小步骤数"><a href="#1347-制造字母异位词的最小步骤数" class="headerlink" title="1347. 制造字母异位词的最小步骤数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/" target="_blank" rel="noopener">1347. 制造字母异位词的最小步骤数</a></h3><h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><ul><li>按字母统计</li><li>累计差额</li></ul><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minSteps</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cs<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ct<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cs<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            ct<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ct<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1348-推文计数"><a href="#1348-推文计数" class="headerlink" title="1348. 推文计数"></a><a href="https://leetcode-cn.com/problems/tweet-counts-per-frequency/" target="_blank" rel="noopener">1348. 推文计数</a></h3><h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><ul><li>直接模拟， map映射 + 动态数组统计排序</li><li>注意只统计startTime - endTime， $ 最大区间数 = （endTime - startTime）/ interval $</li></ul><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">TweetCounts</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    map <span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> vs<span class="token punctuation">;</span>    <span class="token keyword">int</span> tot<span class="token punctuation">;</span>    <span class="token function">TweetCounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">recordTweet</span><span class="token punctuation">(</span>string tweetName<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tweetName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>tweetName<span class="token punctuation">]</span> <span class="token operator">=</span> tot <span class="token operator">++</span><span class="token punctuation">;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span>            vs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vs<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>tweetName<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getTweetCountsPerFrequency</span><span class="token punctuation">(</span>string freq<span class="token punctuation">,</span> string tweetName<span class="token punctuation">,</span> <span class="token keyword">int</span> startTime<span class="token punctuation">,</span> <span class="token keyword">int</span> endTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> mp<span class="token punctuation">[</span>tweetName<span class="token punctuation">]</span><span class="token punctuation">;</span>        vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> interval<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>freq <span class="token operator">==</span> <span class="token string">"minute"</span><span class="token punctuation">)</span> interval <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>freq <span class="token operator">==</span> <span class="token string">"hour"</span><span class="token punctuation">)</span> interval <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> interval <span class="token operator">=</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxs <span class="token operator">=</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// for(int i = 0; i &lt; vs[index].size(); i++)</span>        <span class="token comment" spellcheck="true">//     if(vs[index][i] >= startTime &amp;&amp; vs[index][i] &lt;= endTime)</span>        <span class="token comment" spellcheck="true">//         maxs = max(maxs, vs[index][i]);</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxs<span class="token operator">/</span>interval<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> startTime <span class="token operator">&amp;&amp;</span> vs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> endTime<span class="token punctuation">)</span>             res<span class="token punctuation">[</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">/</span>interval<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your TweetCounts object will be instantiated and called as such: * TweetCounts* obj = new TweetCounts(); * obj->recordTweet(tweetName,time); * vector&lt;int> param_2 = obj->getTweetCountsPerFrequency(freq,tweetName,startTime,endTime); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1349-参加考试的最大学生数"><a href="#1349-参加考试的最大学生数" class="headerlink" title="1349. 参加考试的最大学生数"></a><a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/" target="_blank" rel="noopener">1349. 参加考试的最大学生数</a></h3><h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><ul><li>状压DP</li><li>$dp[i][j]$ 表示统计前i行，（且第i行状态为j时的）所坐的最大学生数。</li><li>状态转移方程： $$ dp[i][j] = max(dp[i-1][k] + count(j))\\ k 为第i-1行的状态, count(j) 为状态j的学生数，即二进制1的个数  $$</li><li>第一行单独初始化， 注意边界条件和判断状态是否能存在，判断状态是否能转移，相互矛盾则不能转移。</li><li>注意二进制统计时 x &amp; y 判断 非0 而不是 判断是1</li><li>时间复杂度: $ O(m * x^n * 2^n) $</li></ul><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> seat<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> xa<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ya<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> t <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            xa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            ya<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> seat<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ya<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> seat<span class="token punctuation">[</span>r<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xa<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> ya<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> p<span class="token number">-1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xa<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">||</span> ya<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>xa<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">||</span> xa<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> ya<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">||</span> ya<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">check1</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> seat<span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">int</span> xa<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> t <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>                xa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> seat<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> xa<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maxStudents</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> seat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> seat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> seat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check1</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> p<span class="token punctuation">,</span> seat<span class="token punctuation">)</span><span class="token punctuation">)</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p<span class="token punctuation">,</span>seat<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">count</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token number">-1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>       <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Biweekly-Contest-19"><a href="#Biweekly-Contest-19" class="headerlink" title="Biweekly Contest 19"></a><a href="https://leetcode-cn.com/contest/biweekly-contest-19/" target="_blank" rel="noopener">Biweekly Contest 19</a></h2><h3 id="1342-将数字变成-0-的操作次数"><a href="#1342-将数字变成-0-的操作次数" class="headerlink" title="1342. 将数字变成 0 的操作次数"></a><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">1342. 将数字变成 0 的操作次数</a></h3><h4 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h4><ul><li>统计num二进制位数和二进制位上1的个数，答案为其和-1，因为所有除1外所有单数会要减1和右移1位，而1⃣️只要进行两者操作中的一个。</li><li>特判num为0</li></ul><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numberOfSteps</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">++</span><span class="token punctuation">;</span>            res <span class="token operator">++</span><span class="token punctuation">;</span>            num <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1343-大小为-K-且平均值大于等于阈值的子数组数目"><a href="#1343-大小为-K-且平均值大于等于阈值的子数组数目" class="headerlink" title="1343. 大小为 K 且平均值大于等于阈值的子数组数目"></a><a href="https://leetcode-cn.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/submissions/" target="_blank" rel="noopener">1343. 大小为 K 且平均值大于等于阈值的子数组数目</a></h3><h4 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h4><ul><li>先统计前k个数组元素之和</li><li>利用滑动窗口思想，向后滑动，减去第一个元素，加上后一个元素得到下一个子数组的和</li><li>判断sum是否满足题目要求</li></ul><h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numOfSubarrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            sum <span class="token operator">+</span><span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> threshold<span class="token operator">*</span>k<span class="token punctuation">)</span> res <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> threshold<span class="token operator">*</span>k<span class="token punctuation">)</span> res <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1344-时钟指针的夹角"><a href="#1344-时钟指针的夹角" class="headerlink" title="1344. 时钟指针的夹角"></a><a href="https://leetcode-cn.com/problems/angle-between-hands-of-a-clock/" target="_blank" rel="noopener">1344. 时钟指针的夹角</a></h3><h4 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h4><ul><li>统计分针和圆心到12点的连线的夹角</li><li>统计时针和圆心到12点的连线的夹角，需要注意要加上相应比例的【非整数时】所带来的偏移角度</li><li>两者角度可能成锐角和钝角，所以所得【时分角度差】应该和【与360度取差的结果】取最小值</li><li>注意处理小数</li></ul><h4 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">angleClock</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">,</span> <span class="token keyword">int</span> minutes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> x <span class="token operator">=</span> minutes<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> y <span class="token operator">=</span> hour <span class="token operator">*</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token punctuation">(</span>minutes<span class="token operator">*</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token operator">-</span><span class="token function">fabs</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fabs</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1345-跳跃游戏-IV"><a href="#1345-跳跃游戏-IV" class="headerlink" title="1345. 跳跃游戏 IV"></a><a href="https://leetcode-cn.com/problems/jump-game-iv/" target="_blank" rel="noopener">1345. 跳跃游戏 IV</a></h3><h4 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h4><ul><li>将所有value相同的元素的下标统计在一起</li><li>利用$unordered\_map$构造$<a href="key:value" target="_blank" rel="noopener">key:value</a> = &lt;数组值:数组下标集合&gt;的键值对$</li><li>$unordered\_ map$的是基于$hash$实现无序映射，其查找和删除的复杂度大部分情况下为$O(1)$，优于$map$的$O(logn)$, 但相较于$map$，其空间占用更多。</li><li>利用$bfs$进行最短距离搜索，由于所有同值的下标只会访问一次，所以可以在扩展后直接删除。</li><li>时间复杂度为$O(n)$</li></ul><h4 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minJumps</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>      unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> mp<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token operator">*</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>      q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token number">-1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>t<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dis<span class="token punctuation">[</span>t<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>dis<span class="token punctuation">[</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">int</span> tmp <span class="token operator">=</span> mp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            dis<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mp<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Contest-174"><a href="#Contest-174" class="headerlink" title="Contest 174"></a><a href="https://leetcode-cn.com/contest/weekly-contest-174/" target="_blank" rel="noopener">Contest 174</a></h2><h3 id="1337-方阵中战斗力最弱的-K-行"><a href="#1337-方阵中战斗力最弱的-K-行" class="headerlink" title="1337. 方阵中战斗力最弱的 K 行"></a><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/submissions/" target="_blank" rel="noopener">1337. 方阵中战斗力最弱的 K 行</a></h3><h4 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h4><ul><li>统计战斗力</li><li>根据战斗力和行标排序</li><li>时间复杂度$O(m*n)$</li></ul><h4 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">kWeakestRows</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token operator">*</span> capacity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            capacity<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                capacity<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>capacity<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> capacity<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span>            <span class="token keyword">return</span> capacity<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1338-数组大小减半"><a href="#1338-数组大小减半" class="headerlink" title="1338. 数组大小减半"></a><a href="https://leetcode-cn.com/problems/reduce-array-size-to-the-half/" target="_blank" rel="noopener">1338. 数组大小减半</a></h3><h4 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h4><ul><li>统计数组元素大小的最大值作为统计元素出现频率数组的大小</li><li>统计频率并排序</li><li>频数从大到小累加到半或过半则停止</li></ul><h4 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minSetSize</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            maxl <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxl<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxl<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token operator">*</span> cnt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxl<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxl<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cnt<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> cnt<span class="token operator">+</span>maxl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxl<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                   ans<span class="token operator">++</span><span class="token punctuation">;</span>                   sum <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1339-分裂二叉树的最大乘积"><a href="#1339-分裂二叉树的最大乘积" class="headerlink" title="1339. 分裂二叉树的最大乘积"></a><a href="https://leetcode-cn.com/problems/maximum-product-of-splitted-binary-tree/" target="_blank" rel="noopener">1339. 分裂二叉树的最大乘积</a></h3><h4 id="题解-14"><a href="#题解-14" class="headerlink" title="题解"></a>题解</h4><ul><li>递归求和，将$node-&gt;val$ 替换成所在子树的和</li><li>递归求积，统计所有子树和整体断开时的积的最大值 = (整树和-子树和) * 子树和，需要用$long long int$存储</li><li>结果取余 $10^9 + 7$</li></ul><h4 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sum</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">ans</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">ans</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token operator">*</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">ans</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ans</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1340-跳跃游戏-V"><a href="#1340-跳跃游戏-V" class="headerlink" title="1340. 跳跃游戏 V"></a><a href="https://leetcode-cn.com/problems/jump-game-v/submissions/" target="_blank" rel="noopener">1340. 跳跃游戏 V</a></h3><h4 id="题解-15"><a href="#题解-15" class="headerlink" title="题解"></a>题解</h4><ul><li>按高度从低到高排序,即得按高度排列的$a[i]$</li><li>第一维从低到高进行DP，第二维DP时在未排序排列左右方向DP，选取未超过d且视线内高度小的进行DP</li><li>DP方程:$dp[a[i]] = max(dp[a[i]], dp[j]+1), d &lt;= a[i]-j &lt;= d \&amp;\&amp; arr[a[i]] &gt; arr[j]$</li><li>统计答案:$res = max(res, dp[a[i]])$</li><li>时间复杂度为: $O(n*d + nlogn)$</li></ul><h4 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxJumps</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token operator">*</span> a  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>j <span class="token operator">&lt;=</span> d <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> d <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Contest-173"><a href="#Contest-173" class="headerlink" title="Contest 173"></a><a href="https://leetcode-cn.com/contest/weekly-contest-173/" target="_blank" rel="noopener">Contest 173</a></h2><h3 id="1332-删除回文子序列"><a href="#1332-删除回文子序列" class="headerlink" title="1332. 删除回文子序列"></a><a href="https://leetcode-cn.com/problems/remove-palindromic-subsequences/" target="_blank" rel="noopener">1332. 删除回文子序列</a></h3><h4 id="题解-16"><a href="#题解-16" class="headerlink" title="题解"></a>题解</h4><ul><li>此题是删除回文子序列，而非字串，子序列只要求顺序不变，不必相邻</li><li>因为只有a，b，所以最多的操作也只有2次，单独挑出所有的a或者所有的b进行删除</li><li>当原字符串为空的时候返回0，当原字符串为回文串的时候返回1，其他进行上述操作都返回2</li></ul><h4 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">removePalindromeSub</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1333-餐厅过滤器"><a href="#1333-餐厅过滤器" class="headerlink" title="1333. 餐厅过滤器"></a><a href="https://leetcode-cn.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/" target="_blank" rel="noopener">1333. 餐厅过滤器</a></h3><h4 id="题解-17"><a href="#题解-17" class="headerlink" title="题解"></a>题解</h4><ul><li>先模拟筛选，注意当$veganFriendly$为False时所有restaurant都满足</li><li>对筛选过后的restaurants按rating和id排序</li></ul><h4 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">filterRestaurants</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> restaurants<span class="token punctuation">,</span> <span class="token keyword">int</span> veganFriendly<span class="token punctuation">,</span> <span class="token keyword">int</span> maxPrice<span class="token punctuation">,</span> <span class="token keyword">int</span> maxDistance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> restaurants<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>restaurants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>veganFriendly<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> restaurants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> maxPrice <span class="token operator">&amp;&amp;</span> restaurants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> maxDistance<span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>restaurants<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> x<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1334-阈值距离内邻居最少的城市"><a href="#1334-阈值距离内邻居最少的城市" class="headerlink" title="1334. 阈值距离内邻居最少的城市"></a><a href="https://leetcode-cn.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/solution/" target="_blank" rel="noopener">1334. 阈值距离内邻居最少的城市</a></h3><h4 id="题解-18"><a href="#题解-18" class="headerlink" title="题解"></a>题解</h4><ul><li>利用floyd算法统计出点与点之间的最短距离</li><li>利用distanceThreshold进行筛选出符合题目要求的解</li><li>还可以考虑用其他最短路算法，Bellmanford，spfa，dijkstra 求最短距离</li></ul><h4 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findTheCity</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> edges<span class="token punctuation">,</span> <span class="token keyword">int</span> distanceThreshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edges<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  注意k是第一层循环，dp[k][i][j] 表示前k个点作为插点能达到的最短距离</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> distanceThreshold<span class="token punctuation">)</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minc <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> minc<span class="token punctuation">)</span>  res <span class="token operator">=</span> i<span class="token punctuation">,</span> minc <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1335-工作计划的最低难度"><a href="#1335-工作计划的最低难度" class="headerlink" title="1335. 工作计划的最低难度"></a><a href="https://leetcode-cn.com/problems/minimum-difficulty-of-a-job-schedule/" target="_blank" rel="noopener">1335. 工作计划的最低难度</a></h3><h4 id="题解-19"><a href="#题解-19" class="headerlink" title="题解"></a>题解</h4><ul><li>区间预处理 + 动态规划， 时间复杂度 $O(d*n^2)$</li><li>$dp[i][j]$ 表示 前i天完成j项工作的总困难</li><li>$dp[i][j] = min(dp[i-1][k] + diff[k+1][j]) , diff[i][j] 代表从i到j的任务的最小难度  $</li></ul><h4 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDifficulty</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> jobDifficulty<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>jobDifficulty<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> d<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> diff<span class="token punctuation">[</span><span class="token number">310</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">310</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jobDifficulty<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> jobDifficulty<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> jobDifficulty<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                    diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> jobDifficulty<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">310</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> jobDifficulty<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> diff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> diff<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> dp<span class="token punctuation">[</span>d<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>jobDifficulty<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Contest-172"><a href="#Contest-172" class="headerlink" title="Contest 172"></a><a href="https://leetcode-cn.com/contest/weekly-contest-172/" target="_blank" rel="noopener">Contest 172</a></h2><h3 id="1323-6-和-9-组成的最大数字"><a href="#1323-6-和-9-组成的最大数字" class="headerlink" title="1323. 6 和 9 组成的最大数字"></a><a href="https://leetcode-cn.com/problems/maximum-69-number/" target="_blank" rel="noopener">1323. 6 和 9 组成的最大数字</a></h3><h4 id="题解-20"><a href="#题解-20" class="headerlink" title="题解"></a>题解</h4><ul><li>从后向前扫描，将最前面的一个6变成9</li><li>假设并更正，记录差值，详见代码</li></ul><h4 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maximum69Number</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> p<span class="token operator">*</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">*</span><span class="token number">9</span> <span class="token operator">-</span> dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                dt <span class="token operator">=</span> p<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            p <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1324-竖直打印单词"><a href="#1324-竖直打印单词" class="headerlink" title="1324. 竖直打印单词"></a><a href="https://leetcode-cn.com/problems/print-words-vertically/" target="_blank" rel="noopener">1324. 竖直打印单词</a></h3><h4 id="题解-21"><a href="#题解-21" class="headerlink" title="题解"></a>题解</h4><ul><li>将各个单词的起点下标统计记录</li><li>统计最大单词长，即竖直打印的行数</li><li>最后记得删除行末空格</li></ul><h4 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">printVertically</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> start<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            start<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> maxlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ls <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> start<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> start<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            maxlen <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">,</span> ls<span class="token operator">-</span>start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> maxlen <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">,</span> start<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> start<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> start<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">==</span> start<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> start<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> start<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token operator">&amp;&amp;</span> start<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">&lt;</span> start<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">[</span>start<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">else</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1325-删除给定值的叶子节点"><a href="#1325-删除给定值的叶子节点" class="headerlink" title="1325. 删除给定值的叶子节点"></a><a href="https://leetcode-cn.com/problems/delete-leaves-with-a-given-value/" target="_blank" rel="noopener">1325. 删除给定值的叶子节点</a></h3><h4 id="题解-22"><a href="#题解-22" class="headerlink" title="题解"></a>题解</h4><ul><li>递归操作</li></ul><h4 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">removeLeafNodes</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token function">removeLeafNodes</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token function">removeLeafNodes</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> target<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1326-灌溉花园的最少水龙头数目"><a href="#1326-灌溉花园的最少水龙头数目" class="headerlink" title="1326. 灌溉花园的最少水龙头数目"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/" target="_blank" rel="noopener">1326. 灌溉花园的最少水龙头数目</a></h3><h4 id="题解-23"><a href="#题解-23" class="headerlink" title="题解"></a>题解</h4><ul><li>统计区间并按右边界大小进行排序</li><li>区间动态规划， $dp[i]$ 为覆盖从0到第i个区间的右边界所需的最小区间个数</li><li>动态转移方程：$$ dp[i] = min(dp[j] + 1) ,\  j &lt; i \&amp;\&amp; l[i] &lt;=  r[j] $$</li><li>$$ ans = min(ans, dp[i]) ,\  r[i] &gt;= n $$</li></ul><h4 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">minTaps</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> ranges<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token operator">*</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token operator">*</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>              l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">-</span>ranges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span>ranges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// [&amp;]表示使用了外部变量a/b</span>      <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> r<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> r<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token operator">*</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">>=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Contest-171"><a href="#Contest-171" class="headerlink" title="Contest 171"></a><a href="https://leetcode-cn.com/contest/weekly-contest-171/" target="_blank" rel="noopener">Contest 171</a></h2><h3 id="1317-将整数转换为两个无零整数的和"><a href="#1317-将整数转换为两个无零整数的和" class="headerlink" title="1317. 将整数转换为两个无零整数的和"></a><a href="https://leetcode-cn.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers/" target="_blank" rel="noopener">1317. 将整数转换为两个无零整数的和</a></h3><h4 id="题解-24"><a href="#题解-24" class="headerlink" title="题解"></a>题解</h4><p>  直接模拟</p><h4 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getNoZeroIntegers</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>          vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// for(int i = 0; i &lt; res.size(); i++)</span>      <span class="token comment" spellcheck="true">//   printf("%d ", res[i]);</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1318-或运算的最小翻转次数"><a href="#1318-或运算的最小翻转次数" class="headerlink" title="1318. 或运算的最小翻转次数"></a><a href="https://leetcode-cn.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/" target="_blank" rel="noopener">1318. 或运算的最小翻转次数</a></h3><h4 id="题解-25"><a href="#题解-25" class="headerlink" title="题解"></a>题解</h4><p>  按位模拟</p><h4 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minFlips</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// cout &lt;&lt; res &lt;&lt; endl;</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1319-连通网络的操作次数"><a href="#1319-连通网络的操作次数" class="headerlink" title="1319. 连通网络的操作次数"></a><a href="https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/" target="_blank" rel="noopener">1319. 连通网络的操作次数</a></h3><h4 id="题解-26"><a href="#题解-26" class="headerlink" title="题解"></a>题解</h4><p>  使用并查集抽选必要连接，查询剩余不必要连接是否够转移成必要连接</p><h4 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10010</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">==</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">?</span> x <span class="token operator">:</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">same</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">unit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>  <span class="token punctuation">{</span>f<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">makeConnected</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> connections<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> connections<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> connections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> connections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">same</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token function">unit</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1320-二指输入的的最小距离"><a href="#1320-二指输入的的最小距离" class="headerlink" title="1320. 二指输入的的最小距离"></a><a href="https://leetcode-cn.com/problems/minimum-distance-to-type-a-word-using-two-fingers/" target="_blank" rel="noopener">1320. 二指输入的的最小距离</a></h3><h4 id="题解-27"><a href="#题解-27" class="headerlink" title="题解"></a>题解</h4><ul><li>二维动态规划问题</li><li>$dp[i][j]$ 代表第一个手指移动到i，第二个手指移动到j时的最小移动距离。</li><li>注意边界条件和初始化动态数组，为从0到任何一个位置移动距离为0。</li><li>动态转移, 注意当i，j处于同一位置和相邻位置时可以选一个手指移动范围大于一个字母。<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h4></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">305</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">305</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">dis</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>word<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    x <span class="token operator">--</span><span class="token punctuation">,</span> y <span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token function">abs</span><span class="token punctuation">(</span>dr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>dc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minimumDistance</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxi <span class="token operator">=</span> <span class="token number">0x3f3f3f</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> maxi<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> j<span class="token number">-1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> maxi<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Listening Vocabulary</title>
      <link href="/2020/02/05/listening-vocabulary/"/>
      <url>/2020/02/05/listening-vocabulary/</url>
      
        <content type="html"><![CDATA[<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="预测试"><a href="#预测试" class="headerlink" title="预测试"></a>预测试</h3><ul><li><strong><a href="http://dict.youdao.com/w/eng/hostel" target="_blank" rel="noopener">hostel</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hostel" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈhɒstl]  </li><li>us: [ˈhɑːstl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/accommodation" target="_blank" rel="noopener">accommodation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=accommodation" type="audio/mpeg"><br></audio></p><ul><li>uk: [əˌkɒməˈdeɪʃn]  </li><li>us: [əˌkɑːməˈdeɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/tutorial" target="_blank" rel="noopener">tutorial</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tutorial" type="audio/mpeg"><br></audio></p><ul><li>uk: [tjuːˈtɔːriəl]  </li><li>us: [tuːˈtɔːriəl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/statistics" target="_blank" rel="noopener">statistics</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=statistics" type="audio/mpeg"><br></audio></p><ul><li>uk: [stəˈtɪstɪk]  </li><li>us: [stəˈtɪstɪk]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/metallurgy" target="_blank" rel="noopener">metallurgy</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=metallurgy" type="audio/mpeg"><br></audio></p><ul><li>uk: [məˈtælədʒi]  </li><li>us: [ˈmetəlɜːrdʒi]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/stress" target="_blank" rel="noopener">stress</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=stress" type="audio/mpeg"><br></audio></p><ul><li>uk: [stres]  </li><li>us: [stres]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/performance" target="_blank" rel="noopener">performance</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=performance" type="audio/mpeg"><br></audio></p><ul><li>uk: [pəˈfɔːməns]  </li><li>us: [pərˈfɔːrməns]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fair" target="_blank" rel="noopener">fair</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fair" type="audio/mpeg"><br></audio></p><ul><li>uk: [feə(r)**]  </li><li>us: [fer]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/diploma" target="_blank" rel="noopener">diploma</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=diploma" type="audio/mpeg"><br></audio></p><ul><li>uk: [dɪˈpləʊmə]  </li><li>us: [dɪˈpləʊmə]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/dismissall" target="_blank" rel="noopener">dismissall</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=dismissall" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/manipulation" target="_blank" rel="noopener">manipulation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=manipulation" type="audio/mpeg"><br></audio></p><ul><li>uk: [məˌnɪpjuˈleɪʃn]  </li><li>us: [məˌnɪpjuˈleɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/gear" target="_blank" rel="noopener">gear</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=gear" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɡɪə(r)**]  </li><li>us: [ɡɪr]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/license" target="_blank" rel="noopener">license</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=license" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈlaɪsns]  </li><li>us: [ˈlaɪsns]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/pasture" target="_blank" rel="noopener">pasture</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=pasture" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpɑːstʃə(r)**]  </li><li>us: [ˈpæstʃər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/comparison" target="_blank" rel="noopener">comparison</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=comparison" type="audio/mpeg"><br></audio></p><ul><li>uk: [kəmˈpærɪsn]  </li><li>us: [kəmˈpærɪsn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/microscope" target="_blank" rel="noopener">microscope</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=microscope" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈmaɪkrəskəʊp]  </li><li>us: [ˈmaɪkrəskəʊp]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/butterfly" target="_blank" rel="noopener">butterfly</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=butterfly" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbʌtəflaɪ]</li><li>us: [ˈbʌtərflaɪ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/vision" target="_blank" rel="noopener">vision</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=vision" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈvɪʒn]  </li><li>us: [ˈvɪʒn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/observer" target="_blank" rel="noopener">observer</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=observer" type="audio/mpeg"><br></audio></p><ul><li>uk: [əbˈzɜːvə(r)**]</li><li>us: [əbˈzɜːrvər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/accident" target="_blank" rel="noopener">accident</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=accident" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈæksɪdənt]  </li><li>us: [ˈæksɪdənt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/testimony" target="_blank" rel="noopener">testimony</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=testimony" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈtestɪməni]  </li><li>us: [ˈtestɪmoʊni]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/cellulose" target="_blank" rel="noopener">cellulose</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cellulose" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈseljuləʊs]  </li><li>us: [ˈseljuləʊs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fabric" target="_blank" rel="noopener">fabric</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fabric" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfæbrɪk]  </li><li>us: [ˈfæbrɪk]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/inventor" target="_blank" rel="noopener">inventor</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=inventor" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɪnˈventə(r)**]  </li><li>us: [ɪnˈventər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/chandelier" target="_blank" rel="noopener">chandelier</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=chandelier" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌʃændəˈlɪə(r)**]  </li><li>us: [ˌʃændəˈlɪr]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/technician" target="_blank" rel="noopener">technician</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=technician" type="audio/mpeg"><br></audio></p><ul><li>uk: [tekˈnɪʃn]  </li><li>us: [tekˈnɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/initials" target="_blank" rel="noopener">initials</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=initials" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɪˈnɪʃl]  </li><li>us: [ɪˈnɪʃl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bladders" target="_blank" rel="noopener">bladders</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bladders" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈblædə(r)**]  </li><li>us: [ˈblædər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/surface" target="_blank" rel="noopener">surface</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=surface" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈsɜːfɪs]  </li><li>us: [ˈsɜːrfɪs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/antenna" target="_blank" rel="noopener">antenna</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=antenna" type="audio/mpeg"><br></audio></p><ul><li>uk: [ænˈtenə]  </li><li>us: [ænˈtenə]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/womb" target="_blank" rel="noopener">womb</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=womb" type="audio/mpeg"><br></audio></p><ul><li>uk: [wuːm]</li><li>us: [wuːm]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/pond" target="_blank" rel="noopener">pond</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=pond" type="audio/mpeg"><br></audio></p><ul><li>uk: [pɒnd]  </li><li>us: [pɑːnd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/predator" target="_blank" rel="noopener">predator</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=predator" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpredətə(r)**]  </li><li>us: [ˈpredətər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/variables" target="_blank" rel="noopener">variables</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=variables" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈveəriəbl]  </li><li>us: [ˈveriəbl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/dishwasher" target="_blank" rel="noopener">dishwasher</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=dishwasher" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdɪʃwɒʃə(r)**]  </li><li>us: [ˈdɪʃwɔːʃər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/permission" target="_blank" rel="noopener">permission</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=permission" type="audio/mpeg"><br></audio></p><ul><li>uk: [pəˈmɪʃn]  </li><li>us: [pərˈmɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/interruption" target="_blank" rel="noopener">interruption</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=interruption" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌɪntəˈrʌpʃn]  </li><li>us: [ˌɪntəˈrʌpʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/poverty" target="_blank" rel="noopener">poverty</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=poverty" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpɒvəti]  </li><li>us: [ˈpɑːvərti]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/frustation" target="_blank" rel="noopener">frustation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=frustation" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/concentration" target="_blank" rel="noopener">concentration</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=concentration" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌkɒnsnˈtreɪʃn]  </li><li>us: [ˌkɑːnsnˈtreɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/textile" target="_blank" rel="noopener">textile</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=textile" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈtekstaɪl]  </li><li>us: [ˈtekstaɪl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/orientation" target="_blank" rel="noopener">orientation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=orientation" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌɔːriənˈteɪʃn]  </li><li>us: [ˌɔːriənˈteɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/umbrella" target="_blank" rel="noopener">umbrella</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=umbrella" type="audio/mpeg"><br></audio></p><ul><li>uk: [ʌmˈbrelə]  </li><li>us: [ʌmˈbrelə]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/landscape" target="_blank" rel="noopener">landscape</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=landscape" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈlændskeɪp]  </li><li>us: [ˈlændskeɪp]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/ash" target="_blank" rel="noopener">ash</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ash" type="audio/mpeg"><br></audio></p><ul><li>uk: [æʃ]  </li><li>us: [æʃ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/exterior" target="_blank" rel="noopener">exterior</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=exterior" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɪkˈstɪəriə(r)**]  </li><li>us: [ɪkˈstɪriər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fountain" target="_blank" rel="noopener">fountain</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fountain" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfaʊntən]  </li><li>us: [ˈfaʊntn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/engineering" target="_blank" rel="noopener">engineering</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=engineering" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌendʒɪˈnɪərɪŋ]  </li><li>us: [ˌendʒɪˈnɪrɪŋ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/journalism" target="_blank" rel="noopener">journalism</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=journalism" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdʒɜːnəlɪzəm]  </li><li>us: [ˈdʒɜːrnəlɪzəm]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/theme" target="_blank" rel="noopener">theme</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=theme" type="audio/mpeg"><br></audio></p><ul><li>uk: [θiːm]  </li><li>us: [θiːm]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/juniors" target="_blank" rel="noopener">juniors</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=juniors" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdʒuːniə(r)**]  </li><li>us: [ˈdʒuːniər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/teenages" target="_blank" rel="noopener">teenages</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=teenages" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈtiːneɪdʒ]  </li><li>us: [ˈtiːneɪdʒ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/hairdresser" target="_blank" rel="noopener">hairdresser</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hairdresser" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈheədresə(r)**]  </li><li>us: [ˈherdresər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/ingredients" target="_blank" rel="noopener">ingredients</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ingredients" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɪnˈɡriːdiənt]  </li><li>us: [ɪnˈɡriːdiənt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/core" target="_blank" rel="noopener">core</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=core" type="audio/mpeg"><br></audio></p><ul><li>uk: [kɔː(r)**]  </li><li>us: [kɔːr]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/massage" target="_blank" rel="noopener">massage</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=massage" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈmæsɑːʒ]  </li><li>us: [məˈsɑːʒ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/ancestor" target="_blank" rel="noopener">ancestor</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ancestor" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈænsestə(r)**]  </li><li>us: [ˈænsestər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/radio" target="_blank" rel="noopener">radio</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=radio" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈreɪdiəʊ]  </li><li>us: [ˈreɪdiəʊ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/cord" target="_blank" rel="noopener">cord</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cord" type="audio/mpeg"><br></audio></p><ul><li>uk: [kɔːd]  </li><li>us: [kɔːrd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bark" target="_blank" rel="noopener">bark</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bark" type="audio/mpeg"><br></audio></p><ul><li>uk: [bɑːk]  </li><li>us: [bɑːrk]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/entertainment" target="_blank" rel="noopener">entertainment</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=entertainment" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌentəˈteɪnmənt]  </li><li>us: [ˌentərˈteɪnmənt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/parachute" target="_blank" rel="noopener">parachute</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=parachute" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpærəʃuːt]  </li><li>us: [ˈpærəʃuːt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/valve" target="_blank" rel="noopener">valve</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=valve" type="audio/mpeg"><br></audio></p><ul><li>uk: [vælv]  </li><li>us: [vælv]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/chimpanzees" target="_blank" rel="noopener">chimpanzees</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=chimpanzees" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌtʃɪmpænˈziː]  </li><li>us: [ˌtʃɪmpænˈziː]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/behavior" target="_blank" rel="noopener">behavior</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=behavior" type="audio/mpeg"><br></audio></p><ul><li>uk: [bɪˈheɪvjə]  </li><li>us: [bɪ’hevjɚ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/dominance" target="_blank" rel="noopener">dominance</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=dominance" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdɒmɪnəns]  </li><li>us: [ˈdɑːmɪnəns]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/binoculars" target="_blank" rel="noopener">binoculars</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=binoculars" type="audio/mpeg"><br></audio></p><ul><li>uk: [bɪˈnɒkjələz]</li><li>us: [bɪˈnɑːkjələrz]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/Eskimo" target="_blank" rel="noopener">Eskimo</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Eskimo" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈeskɪməʊ]  </li><li>us: [ˈeskɪməʊ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/steel" target="_blank" rel="noopener">steel</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=steel" type="audio/mpeg"><br></audio></p><ul><li>uk: [stiːl]  </li><li>us: [stiːl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/athlete" target="_blank" rel="noopener">athlete</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=athlete" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈæθliːt]  </li><li>us: [ˈæθliːt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/vibration" target="_blank" rel="noopener">vibration</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=vibration" type="audio/mpeg"><br></audio></p><ul><li>uk: [vaɪˈbreɪʃn]  </li><li>us: [vaɪˈbreɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bulb" target="_blank" rel="noopener">bulb</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bulb" type="audio/mpeg"><br></audio></p><ul><li>uk: [bʌlb]  </li><li>us: [bʌlb]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/mud" target="_blank" rel="noopener">mud</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=mud" type="audio/mpeg"><br></audio></p><ul><li>uk: [mʌd]  </li><li>us: [mʌd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/waitress" target="_blank" rel="noopener">waitress</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=waitress" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈweɪtrəs]  </li><li>us: [ˈweɪtrəs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/reservoir" target="_blank" rel="noopener">reservoir</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=reservoir" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈrezəvwɑː(r)**]  </li><li>us: [ˈrezərvwɑːr]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/partner" target="_blank" rel="noopener">partner</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=partner" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpɑːtnə(r)**]  </li><li>us: [ˈpɑːrtnər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/peas" target="_blank" rel="noopener">peas</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=peas" type="audio/mpeg"><br></audio></p><ul><li>uk: [piː]  </li><li>us: [piː]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fertilizer" target="_blank" rel="noopener">fertilizer</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fertilizer" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfɜːtəlaɪzə(r)**]  </li><li>us: [ˈfɜːrtəlaɪzər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/porcelain" target="_blank" rel="noopener">porcelain</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=porcelain" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpɔːsəlɪn]  </li><li>us: [ˈpɔːrsəlɪn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/cattle" target="_blank" rel="noopener">cattle</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cattle" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈkætl]  </li><li>us: [ˈkætl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/production" target="_blank" rel="noopener">production</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=production" type="audio/mpeg"><br></audio></p><ul><li>uk: [prəˈdʌkʃn]  </li><li>us: [prəˈdʌkʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/plough" target="_blank" rel="noopener">plough</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=plough" type="audio/mpeg"><br></audio></p><ul><li>uk: [plaʊ]  </li><li>us: [plaʊ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/duration" target="_blank" rel="noopener">duration</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=duration" type="audio/mpeg"><br></audio></p><ul><li>uk: [djuˈreɪʃn]  </li><li>us: [duˈreɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/gym" target="_blank" rel="noopener">gym</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=gym" type="audio/mpeg"><br></audio></p><ul><li>uk: [dʒɪm]  </li><li>us: [dʒɪm]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/judo" target="_blank" rel="noopener">judo</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=judo" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdʒuːdəʊ]  </li><li>us: [ˈdʒuːdəʊ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fiancee" target="_blank" rel="noopener">fiancee</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fiancee" type="audio/mpeg"><br></audio></p><ul><li>uk: [fiˈɒnseɪ]  </li><li>us: [ˌfiːɑːnˈseɪ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/discussion" target="_blank" rel="noopener">discussion</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=discussion" type="audio/mpeg"><br></audio></p><ul><li>uk: [dɪˈskʌʃn]  </li><li>us: [dɪˈskʌʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/representative" target="_blank" rel="noopener">representative</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=representative" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌreprɪˈzentətɪv]  </li><li>us: [ˌreprɪˈzentətɪv]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/reconstruction" target="_blank" rel="noopener">reconstruction</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=reconstruction" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌriːkənˈstrʌkʃn]  </li><li>us: [ˌriːkənˈstrʌkʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/failure" target="_blank" rel="noopener">failure</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=failure" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfeɪljə(r)**]  </li><li>us: [ˈfeɪljər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/voicemail" target="_blank" rel="noopener">voicemail</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=voicemail" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈvɔɪsmeɪl]  </li><li>us: [ˈvɔɪsmeɪl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/stripe" target="_blank" rel="noopener">stripe</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=stripe" type="audio/mpeg"><br></audio></p><ul><li>uk: [straɪp]  </li><li>us: [straɪp]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/warnings" target="_blank" rel="noopener">warnings</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=warnings" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈwɔːnɪŋ]  </li><li>us: [ˈwɔːrnɪŋ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/Mars" target="_blank" rel="noopener">Mars</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Mars" type="audio/mpeg"><br></audio></p><ul><li>uk: [mɑːz]  </li><li>us: [mɑːrz]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/chess" target="_blank" rel="noopener">chess</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=chess" type="audio/mpeg"><br></audio></p><ul><li>uk: [tʃes]  </li><li>us: [tʃes]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/balcony" target="_blank" rel="noopener">balcony</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=balcony" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbælkəni]  </li><li>us: [ˈbælkəni]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/squirrel" target="_blank" rel="noopener">squirrel</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=squirrel" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈskwɪrəl]  </li><li>us: [ˈskwɜːrəl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/invasion" target="_blank" rel="noopener">invasion</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=invasion" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɪnˈveɪʒn]  </li><li>us: [ɪnˈveɪʒn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/restriction" target="_blank" rel="noopener">restriction</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=restriction" type="audio/mpeg"><br></audio></p><ul><li>uk: [rɪˈstrɪkʃn]  </li><li>us: [rɪˈstrɪkʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/polytechnic" target="_blank" rel="noopener">polytechnic</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=polytechnic" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌpɒliˈteknɪk]  </li><li>us: [ˌpɑːliˈteknɪk]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/hectares" target="_blank" rel="noopener">hectares</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hectares" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈhekteə(r)**]  </li><li>us: [ˈhektɑː(r)**]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/kangaroo" target="_blank" rel="noopener">kangaroo</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=kangaroo" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌkæŋɡəˈruː]  </li><li>us: [ˌkæŋɡəˈruː]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/rubber" target="_blank" rel="noopener">rubber</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=rubber" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈrʌbə(r)**]  </li><li>us: [ˈrʌbər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/preservation" target="_blank" rel="noopener">preservation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=preservation" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌprezəˈveɪʃn]  </li><li>us: [ˌprezərˈveɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/refrigerator" target="_blank" rel="noopener">refrigerator</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=refrigerator" type="audio/mpeg"><br></audio></p><ul><li>uk: [rɪˈfrɪdʒəreɪtə(r)**]  </li><li>us: [rɪˈfrɪdʒəreɪtər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/virus" target="_blank" rel="noopener">virus</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=virus" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈvaɪrəs]  </li><li>us: [ˈvaɪrəs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/personnel" target="_blank" rel="noopener">personnel</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=personnel" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌpɜːsəˈnel]  </li><li>us: [ˌpɜːrsəˈnel]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/pot" target="_blank" rel="noopener">pot</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=pot" type="audio/mpeg"><br></audio></p><ul><li>uk: [pɒt]  </li><li>us: [pɑːt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/jewelry" target="_blank" rel="noopener">jewelry</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=jewelry" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdʒuːəlri]</li><li>us: [ˈdʒuːəlri]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/teenagers" target="_blank" rel="noopener">teenagers</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=teenagers" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈtiːneɪdʒə(r)**]  </li><li>us: [ˈtiːneɪdʒər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/minority" target="_blank" rel="noopener">minority</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=minority" type="audio/mpeg"><br></audio></p><ul><li>uk: [maɪˈnɒrəti]  </li><li>us: [maɪˈnɔːrəti]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/cabin" target="_blank" rel="noopener">cabin</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cabin" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈkæbɪn]  </li><li>us: [ˈkæbɪn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/calendar" target="_blank" rel="noopener">calendar</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=calendar" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈkælɪndə(r)**]  </li><li>us: [ˈkælɪndər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/teapot" target="_blank" rel="noopener">teapot</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=teapot" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈtiːpɒt]  </li><li>us: [ˈtiːpɑːt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/gardening" target="_blank" rel="noopener">gardening</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=gardening" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈɡɑːdnɪŋ]  </li><li>us: [ˈɡɑːrdnɪŋ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/gloves" target="_blank" rel="noopener">gloves</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=gloves" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɡlʌv]  </li><li>us: [ɡlʌv]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/necklace" target="_blank" rel="noopener">necklace</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=necklace" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈnekləs]  </li><li>us: [ˈnekləs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/niece" target="_blank" rel="noopener">niece</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=niece" type="audio/mpeg"><br></audio></p><ul><li>uk: [niːs]  </li><li>us: [niːs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/footwear" target="_blank" rel="noopener">footwear</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=footwear" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfʊtweə(r)**]  </li><li>us: [ˈfʊtwer]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/campaign" target="_blank" rel="noopener">campaign</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=campaign" type="audio/mpeg"><br></audio></p><ul><li>uk: [kæmˈpeɪn]  </li><li>us: [kæmˈpeɪn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fault" target="_blank" rel="noopener">fault</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fault" type="audio/mpeg"><br></audio></p><ul><li>uk: [fɔːlt]  </li><li>us: [fɔːlt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/centralization" target="_blank" rel="noopener">centralization</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=centralization" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌsentrəlaɪˈzeɪʃn]  </li><li>us: [ˌsentrələˈzeɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/slug" target="_blank" rel="noopener">slug</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=slug" type="audio/mpeg"><br></audio></p><ul><li>uk: [slʌɡ]  </li><li>us: [slʌɡ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/worms" target="_blank" rel="noopener">worms</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=worms" type="audio/mpeg"><br></audio></p><ul><li>uk: [wɜːmz]  </li><li>us: [wɜːrmz]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/snails" target="_blank" rel="noopener">snails</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=snails" type="audio/mpeg"><br></audio></p><ul><li>uk: [sneɪl]  </li><li>us: [sneɪl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/habitat" target="_blank" rel="noopener">habitat</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=habitat" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈhæbɪtæt]  </li><li>us: [ˈhæbɪtæt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/indicator" target="_blank" rel="noopener">indicator</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=indicator" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈɪndɪkeɪtə(r)**]  </li><li>us: [ˈɪndɪkeɪtər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/speech" target="_blank" rel="noopener">speech</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=speech" type="audio/mpeg"><br></audio></p><ul><li>uk: [spiːtʃ]  </li><li>us: [spiːtʃ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/grape" target="_blank" rel="noopener">grape</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=grape" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɡreɪp]  </li><li>us: [ɡreɪp]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/density" target="_blank" rel="noopener">density</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=density" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdensəti]  </li><li>us: [ˈdensəti]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/insulation" target="_blank" rel="noopener">insulation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=insulation" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌɪnsjuˈleɪʃn]  </li><li>us: [ˌɪnsəˈleɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/trays" target="_blank" rel="noopener">trays</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=trays" type="audio/mpeg"><br></audio></p><ul><li>uk: [treɪ]  </li><li>us: [treɪ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/friction" target="_blank" rel="noopener">friction</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=friction" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfrɪkʃn]  </li><li>us: [ˈfrɪkʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/stuff" target="_blank" rel="noopener">stuff</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=stuff" type="audio/mpeg"><br></audio></p><ul><li>uk: [stʌf]  </li><li>us: [stʌf]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/apron" target="_blank" rel="noopener">apron</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=apron" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈeɪprən]  </li><li>us: [ˈeɪprən]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/pyramid" target="_blank" rel="noopener">pyramid</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=pyramid" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpɪrəmɪd]  </li><li>us: [ˈpɪrəmɪd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/dolphin" target="_blank" rel="noopener">dolphin</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=dolphin" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdɒlfɪn]  </li><li>us: [ˈdɑːlfɪn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/soldiers" target="_blank" rel="noopener">soldiers</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=soldiers" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈsəʊldʒə(r)**]  </li><li>us: [ˈsəʊldʒər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/whales" target="_blank" rel="noopener">whales</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=whales" type="audio/mpeg"><br></audio></p><ul><li>uk: [weɪl]  </li><li>us: [weɪl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/absence" target="_blank" rel="noopener">absence</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=absence" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈæbsəns]  </li><li>us: [ˈæbsəns]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/workforce" target="_blank" rel="noopener">workforce</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=workforce" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈwɜːkfɔːs]  </li><li>us: [ˈwɜːrkfɔːrs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/cupboard" target="_blank" rel="noopener">cupboard</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cupboard" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈkʌbəd]  </li><li>us: [ˈkʌbərd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/generalisation" target="_blank" rel="noopener">generalisation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=generalisation" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/voting" target="_blank" rel="noopener">voting</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=voting" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈvəʊtɪŋ]  </li><li>us: [ˈvəʊtɪŋ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/dialogue" target="_blank" rel="noopener">dialogue</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=dialogue" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdaɪəlɒɡ]  </li><li>us: [ˈdaɪəlɔːɡ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/hammer" target="_blank" rel="noopener">hammer</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hammer" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈhæmə(r)**]  </li><li>us: [ˈhæmər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/incubator" target="_blank" rel="noopener">incubator</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=incubator" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈɪŋkjubeɪtə(r)**]  </li><li>us: [ˈɪŋkjubeɪtər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/manpower" target="_blank" rel="noopener">manpower</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=manpower" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈmænpaʊə(r)**]  </li><li>us: [ˈmænpaʊər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/jam" target="_blank" rel="noopener">jam</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=jam" type="audio/mpeg"><br></audio></p><ul><li>uk: [dʒæm]  </li><li>us: [dʒæm]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/categories" target="_blank" rel="noopener">categories</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=categories" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/twilight" target="_blank" rel="noopener">twilight</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=twilight" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈtwaɪlaɪt]  </li><li>us: [ˈtwaɪlaɪt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/passport" target="_blank" rel="noopener">passport</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=passport" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpɑːspɔːt]  </li><li>us: [ˈpæspɔːrt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/windsurfing" target="_blank" rel="noopener">windsurfing</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=windsurfing" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈwɪndsɜːfɪŋ]  </li><li>us: [ˈwɪndsɜːrfɪŋ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/van" target="_blank" rel="noopener">van</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=van" type="audio/mpeg"><br></audio></p><ul><li>uk: [væn]  </li><li>us: [væn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/authority" target="_blank" rel="noopener">authority</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=authority" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɔːˈθɒrəti]  </li><li>us: [əˈθɔːrəti]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/competitors" target="_blank" rel="noopener">competitors</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=competitors" type="audio/mpeg"><br></audio></p><ul><li>uk: [kəmˈpetɪtə(r)**]  </li><li>us: [kəmˈpetɪtər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/camel" target="_blank" rel="noopener">camel</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=camel" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈkæml]  </li><li>us: [ˈkæml]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/label" target="_blank" rel="noopener">label</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=label" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈleɪbl]  </li><li>us: [ˈleɪbl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/sprain" target="_blank" rel="noopener">sprain</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sprain" type="audio/mpeg"><br></audio></p><ul><li>uk: [spreɪn]  </li><li>us: [spreɪn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/asprin" target="_blank" rel="noopener">asprin</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=asprin" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/critic" target="_blank" rel="noopener">critic</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=critic" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈkrɪtɪk]  </li><li>us: [ˈkrɪtɪk]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/biography" target="_blank" rel="noopener">biography</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=biography" type="audio/mpeg"><br></audio></p><ul><li>uk: [baɪˈɒɡrəfi]  </li><li>us: [baɪˈɑːɡrəfi]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/stage-set" target="_blank" rel="noopener">stage-set</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=stage-set" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/storage" target="_blank" rel="noopener">storage</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=storage" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈstɔːrɪdʒ]  </li><li>us: [ˈstɔːrɪdʒ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/graffiti" target="_blank" rel="noopener">graffiti</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=graffiti" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɡrəˈfiːti]  </li><li>us: [ɡrəˈfiːti]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bins" target="_blank" rel="noopener">bins</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bins" type="audio/mpeg"><br></audio></p><ul><li>uk: [bɪn]  </li><li>us: [bɪn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/sauna" target="_blank" rel="noopener">sauna</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sauna" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈsɔːnə]  </li><li>us: [ˈsaʊnə]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/documentary" target="_blank" rel="noopener">documentary</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=documentary" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌdɒkjuˈmentri]  </li><li>us: [ˌdɑːkjuˈmentri]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/landscape" target="_blank" rel="noopener">landscape</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=landscape" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈlændskeɪp]  </li><li>us: [ˈlændskeɪp]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bronze" target="_blank" rel="noopener">bronze</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bronze" type="audio/mpeg"><br></audio></p><ul><li>uk: [brɒnz]  </li><li>us: [brɑːnz]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/facilities" target="_blank" rel="noopener">facilities</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=facilities" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/calorie" target="_blank" rel="noopener">calorie</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=calorie" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈkæləri]  </li><li>us: [ˈkæləri]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/wallet" target="_blank" rel="noopener">wallet</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=wallet" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈwɒlɪt]  </li><li>us: [ˈwɑːlɪt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/dinosaur" target="_blank" rel="noopener">dinosaur</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=dinosaur" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈdaɪnəsɔː(r)**]  </li><li>us: [ˈdaɪnəsɔːr]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fossils" target="_blank" rel="noopener">fossils</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fossils" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfɒsl]  </li><li>us: [ˈfɑːsl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/moa" target="_blank" rel="noopener">moa</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=moa" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈməʊə]  </li><li>us: [ˈməʊə]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/attitude" target="_blank" rel="noopener">attitude</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=attitude" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈætɪtjuːd]  </li><li>us: [ˈætɪtuːd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/wreckage" target="_blank" rel="noopener">wreckage</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=wreckage" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈrekɪdʒ]  </li><li>us: [ˈrekɪdʒ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/tortoise" target="_blank" rel="noopener">tortoise</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tortoise" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈtɔːtəs]  </li><li>us: [ˈtɔːrtəs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/certificate" target="_blank" rel="noopener">certificate</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=certificate" type="audio/mpeg"><br></audio></p><ul><li>uk: [səˈtɪfɪkət]  </li><li>us: [sərˈtɪfɪkət]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/Cantonese" target="_blank" rel="noopener">Cantonese</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Cantonese" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌkæntəˈniːz]  </li><li>us: [ˌkæntəˈniːz]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/interpreter" target="_blank" rel="noopener">interpreter</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=interpreter" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɪnˈtɜːprətə(r)**]  </li><li>us: [ɪnˈtɜːrprətər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/purchase" target="_blank" rel="noopener">purchase</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=purchase" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈpɜːtʃəs]  </li><li>us: [ˈpɜːrtʃəs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/forestry" target="_blank" rel="noopener">forestry</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=forestry" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfɒrɪstri]  </li><li>us: [ˈfɔːrɪstri]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/degradation" target="_blank" rel="noopener">degradation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=degradation" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌdeɡrəˈdeɪʃn]  </li><li>us: [ˌdeɡrəˈdeɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fishery" target="_blank" rel="noopener">fishery</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fishery" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈfɪʃəri]  </li><li>us: [ˈfɪʃəri]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/contaminants" target="_blank" rel="noopener">contaminants</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=contaminants" type="audio/mpeg"><br></audio></p><ul><li>uk: [kənˈtæmɪnənt]  </li><li>us: [kənˈtæmɪnənt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/innocence" target="_blank" rel="noopener">innocence</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=innocence" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈɪnəsns]  </li><li>us: [ˈɪnəsns]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/subtitles" target="_blank" rel="noopener">subtitles</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=subtitles" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈsʌbtaɪtl]  </li><li>us: [ˈsʌbtaɪtl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/amber" target="_blank" rel="noopener">amber</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=amber" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈæmbə(r)**]  </li><li>us: [ˈæmbər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/resin" target="_blank" rel="noopener">resin</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=resin" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈrezɪn]  </li><li>us: [ˈrezn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/fungi" target="_blank" rel="noopener">fungi</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fungi" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/bridge" target="_blank" rel="noopener">bridge</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bridge" type="audio/mpeg"><br></audio></p><ul><li>uk: [brɪdʒ]  </li><li>us: [brɪdʒ]</li></ul><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><ul><li><strong><a href="http://dict.youdao.com/w/eng/adult" target="_blank" rel="noopener">adult</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=adult" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈædʌlt]  </li><li>us: [əˈdʌlt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/aim" target="_blank" rel="noopener">aim</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=aim" type="audio/mpeg"><br></audio></p><ul><li>uk: [eɪm]  </li><li>us: [eɪm]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/air" target="_blank" rel="noopener">air</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=air" type="audio/mpeg"><br></audio></p><ul><li>uk: [eə(r)**]  </li><li>us: [er]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/alternation" target="_blank" rel="noopener">alternation</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=alternation" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌɔːltəˈneɪʃn]  </li><li>us: [ˌɔːltərˈneɪʃn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/amount" target="_blank" rel="noopener">amount</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=amount" type="audio/mpeg"><br></audio></p><ul><li>uk: [əˈmaʊnt]  </li><li>us: [əˈmaʊnt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/analysis" target="_blank" rel="noopener">analysis</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=analysis" type="audio/mpeg"><br></audio></p><ul><li>uk: [əˈnæləsɪs]  </li><li>us: [əˈnæləsɪs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/anger" target="_blank" rel="noopener">anger</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=anger" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈæŋɡə(r)**]  </li><li>us: [ˈæŋɡər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/ankle" target="_blank" rel="noopener">ankle</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ankle" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈæŋkl]  </li><li>us: [ˈæŋkl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/Antarctica" target="_blank" rel="noopener">Antarctica</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Antarctica" type="audio/mpeg"><br></audio></p><ul><li>uk: [ænˈtɑːktɪkə]  </li><li>us: [ænˈtɑːrktɪkə]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/architect" target="_blank" rel="noopener">architect</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=architect" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈɑːkɪtekt]  </li><li>us: [ˈɑːrkɪtekt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/architectures" target="_blank" rel="noopener">architectures</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=architectures" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈɑːkɪtektʃə(r)**]  </li><li>us: [ˈɑːrkɪtektʃər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/aristocrat" target="_blank" rel="noopener">aristocrat</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=aristocrat" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈærɪstəkræt]  </li><li>us: [əˈrɪstəkræt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/art" target="_blank" rel="noopener">art</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=art" type="audio/mpeg"><br></audio></p><ul><li>uk: [ɑːt]  </li><li>us: [ɑːrt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/aspirin" target="_blank" rel="noopener">aspirin</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=aspirin" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈæsprɪn]  </li><li>us: [ˈæspərɪn]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/atlas" target="_blank" rel="noopener">atlas</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=atlas" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈætləs]  </li><li>us: [ˈætləs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/auditorium" target="_blank" rel="noopener">auditorium</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=auditorium" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˌɔːdɪˈtɔːriəm]  </li><li>us: [ˌɔːdɪˈtɔːriəm]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/badge" target="_blank" rel="noopener">badge</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=badge" type="audio/mpeg"><br></audio></p><ul><li>uk: [bædʒ]  </li><li>us: [bædʒ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/baldness" target="_blank" rel="noopener">baldness</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=baldness" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbɔːldnəs]  </li><li>us: [ˈbɔːldnəs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/band" target="_blank" rel="noopener">band</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=band" type="audio/mpeg"><br></audio></p><ul><li>uk: [bænd]  </li><li>us: [bænd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bandage" target="_blank" rel="noopener">bandage</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bandage" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbændɪdʒ]  </li><li>us: [ˈbændɪdʒ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bands" target="_blank" rel="noopener">bands</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bands" type="audio/mpeg"><br></audio></p><ul><li>uk: [bænd]  </li><li>us: [bænd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bank" target="_blank" rel="noopener">bank</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bank" type="audio/mpeg"><br></audio></p><ul><li>uk: [bæŋk]  </li><li>us: [bæŋk]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/banquet" target="_blank" rel="noopener">banquet</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=banquet" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbæŋkwɪt]  </li><li>us: [ˈbæŋkwɪt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bases" target="_blank" rel="noopener">bases</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bases" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbeɪsiːz]  </li><li>us: [ˈbeɪsiːz]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/basis" target="_blank" rel="noopener">basis</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=basis" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbeɪsɪs]  </li><li>us: [ˈbeɪsɪs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/batteries" target="_blank" rel="noopener">batteries</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=batteries" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/battery" target="_blank" rel="noopener">battery</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=battery" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbætri]  </li><li>us: [ˈbætəri]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/beats" target="_blank" rel="noopener">beats</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=beats" type="audio/mpeg"><br></audio></p><ul><li>uk: [biːt]  </li><li>us: [biːt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bed%20sheet" target="_blank" rel="noopener">bed sheet</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bed%20sheet" type="audio/mpeg"><br></audio></p><ul><li><strong><a href="http://dict.youdao.com/w/eng/bedsit" target="_blank" rel="noopener">bedsit</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bedsit" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbedsɪt]  </li><li>us: [ˈbedsɪt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/belt" target="_blank" rel="noopener">belt</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=belt" type="audio/mpeg"><br></audio></p><ul><li>uk: [belt]  </li><li>us: [belt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/blouse" target="_blank" rel="noopener">blouse</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=blouse" type="audio/mpeg"><br></audio></p><ul><li>uk: [blaʊz]  </li><li>us: [blaʊs]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/board" target="_blank" rel="noopener">board</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=board" type="audio/mpeg"><br></audio></p><ul><li>uk: [bɔːd]  </li><li>us: [bɔːrd]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/boarder" target="_blank" rel="noopener">boarder</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=boarder" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbɔːdə(r)**]  </li><li>us: [ˈbɔːrdər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/boat" target="_blank" rel="noopener">boat</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=boat" type="audio/mpeg"><br></audio></p><ul><li>uk: [bəʊt]  </li><li>us: [bəʊt]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bowl" target="_blank" rel="noopener">bowl</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bowl" type="audio/mpeg"><br></audio></p><ul><li>uk: [bəʊl]  </li><li>us: [bəʊl]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/brick" target="_blank" rel="noopener">brick</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=brick" type="audio/mpeg"><br></audio></p><ul><li>uk: [brɪk]  </li><li>us: [brɪk]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bridge" target="_blank" rel="noopener">bridge</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bridge" type="audio/mpeg"><br></audio></p><ul><li>uk: [brɪdʒ]  </li><li>us: [brɪdʒ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/brochures" target="_blank" rel="noopener">brochures</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=brochures" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbrəʊʃə(r)**]  </li><li>us: [brəʊˈʃʊr]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/bungalow" target="_blank" rel="noopener">bungalow</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bungalow" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbʌŋɡələʊ]  </li><li>us: [ˈbʌŋɡələʊ]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/burger" target="_blank" rel="noopener">burger</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=burger" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbɜːɡə(r)**]  </li><li>us: [ˈbɜːrɡər]</li></ul><ul><li><strong><a href="http://dict.youdao.com/w/eng/burglar" target="_blank" rel="noopener">burglar</a></strong></li></ul><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=burglar" type="audio/mpeg"><br></audio></p><ul><li>uk: [ˈbɜːɡlə(r)**]  </li><li>us: [ˈbɜːrɡlər]</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
            <tag> Vocabulary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex Grammar Notes</title>
      <link href="/2020/01/28/latex-grammar-notes/"/>
      <url>/2020/01/28/latex-grammar-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="1-建立文档"><a href="#1-建立文档" class="headerlink" title="1. 建立文档"></a>1. 建立文档</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% hello.tex</span><span class="token function selector">\documentclass</span><span class="token punctuation">[</span>a4paper<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">zcpaper</span><span class="token punctuation">}</span><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">multicol</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span>Hello World !<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在latex中%号表示注释</li><li>用 \\ 开始的字母串来表示一个命令</li><li>的 \\documentclass 是 LATEX 文档的基本命令，用于指明文档类。</li><li>命令后面用花括号 {} 包含的内容是该命令的参数，必不可少。</li><li>命令后用方括号 [] 包含的内容是该命令的选项，选项可以省略，省略时必需连同方括号也去掉。如果选项省略，将会使用默认值。</li><li>的 \\usepackage 命令也是 LATEX 的基本命令，用于载入 LATEX 宏包。</li></ul><h2 id="2-建立环境"><a href="#2-建立环境" class="headerlink" title="2. 建立环境"></a>2. 建立环境</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">large</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">large</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>$\begin{}, \end{}$ 表示建立环境，如列表环境：无序列表（itemize）、<br>有序列表（enumerate）和描述列表（description）</li></ul><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span><span class="token function selector">\item</span> 无编号的列表<span class="token function selector">\item</span> 带编号的列表<span class="token function selector">\item</span> 带标签的列表<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">enumerate</span><span class="token punctuation">}</span><span class="token function selector">\item</span> 无编号的列表<span class="token function selector">\item</span> 带编号的列表<span class="token function selector">\item</span> 带标签的列表<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">enumerate</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">description</span><span class="token punctuation">}</span><span class="token function selector">\item</span><span class="token punctuation">[</span>无序列表<span class="token punctuation">]</span> 无编号的列表。<span class="token function selector">\item</span><span class="token punctuation">[</span>有序列表<span class="token punctuation">]</span> 带编号的列表。<span class="token function selector">\item</span><span class="token punctuation">[</span>描述列表<span class="token punctuation">]</span> 带标签的列表。<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">description</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/01/28/mIvZL5UVgQcbzsJ.png" alt="效果"></p><h2 id="3-多列排版"><a href="#3-多列排版" class="headerlink" title="3. 多列排版"></a>3. 多列排版</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">multicols</span><span class="token punctuation">}</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">multicols</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-加粗居中"><a href="#4-加粗居中" class="headerlink" title="4. 加粗居中"></a>4. 加粗居中</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% 加粗</span><span class="token function selector">\textbf</span><span class="token punctuation">{</span>Hello World!<span class="token punctuation">}</span><span class="token comment" spellcheck="true">% 加粗</span><span class="token punctuation">{</span><span class="token function selector">\bfseries</span> Hello World!<span class="token punctuation">}</span><span class="token comment" spellcheck="true">% 居中</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>Hello World!<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">% 居中</span><span class="token function selector">\centering</span><span class="token punctuation">{</span>Hello World!<span class="token punctuation">}</span><span class="token comment" spellcheck="true">% 加粗并居中</span><span class="token function selector">\centering</span><span class="token punctuation">{</span><span class="token function selector">\textbf</span><span class="token punctuation">{</span>Hello World!<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-罗马数字"><a href="#5-罗马数字" class="headerlink" title="5. 罗马数字"></a>5. 罗马数字</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\textbf</span><span class="token punctuation">{</span><span class="token function selector">\large</span><span class="token punctuation">{</span><span class="token function selector">\uppercase</span><span class="token function selector">\expandafter</span><span class="token punctuation">{</span><span class="token function selector">\romannumeral</span> 1<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-空格缩进"><a href="#6-空格缩进" class="headerlink" title="6. 空格缩进"></a>6. 空格缩进</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% 空格</span><span class="token function selector">\quad</span><span class="token comment" spellcheck="true">% 缩进</span><span class="token function selector">\indent</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-添加表格"><a href="#7-添加表格" class="headerlink" title="7. 添加表格"></a>7. 添加表格</h2><ul><li>\\multirow \\multicol \\hline \\cline 可以用来合并行或者列</li><li>\\resizebox{200pt}{150pt}{} 用来调整表格大小</li></ul><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% \usepackage{multirow}</span><span class="token comment" spellcheck="true">% \usepackage{multicol}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">table</span><span class="token punctuation">}</span><span class="token punctuation">[</span>H<span class="token punctuation">]</span><span class="token comment" spellcheck="true">%添加表格</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token function selector">\caption</span><span class="token punctuation">{</span>输入层数据源信息<span class="token punctuation">}</span><span class="token function selector">\resizebox</span><span class="token punctuation">{</span>200pt<span class="token punctuation">}</span><span class="token punctuation">{</span>150pt<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span>ccc<span class="token punctuation">}</span><span class="token function selector">\toprule</span>  <span class="token comment" spellcheck="true">%添加表格头部粗线</span><span class="token function selector">\toprule</span>  <span class="token comment" spellcheck="true">%添加表格头部粗线</span>字段名<span class="token punctuation">&amp;</span> 字段数据<span class="token punctuation">&amp;</span> 标记 <span class="token function selector">\\</span><span class="token function selector">\midrule</span>  <span class="token comment" spellcheck="true">%添加表格中横线</span>房子代码<span class="token punctuation">&amp;</span> 1010088440<span class="token punctuation">&amp;</span> <span class="token function selector">\\</span><span class="token function selector">\multirow</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token punctuation">{</span>*<span class="token punctuation">}</span><span class="token punctuation">{</span>姓名<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span>  Run Qian Qiu<span class="token function selector">\\</span>                        <span class="token punctuation">&amp;</span> Jia Yuan <span class="token function selector">\\</span>年代<span class="token punctuation">&amp;</span> 2006 <span class="token function selector">\\</span><span class="token function selector">\multirow</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token punctuation">{</span>*<span class="token punctuation">}</span><span class="token punctuation">{</span>学校数量<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\multirow</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token punctuation">{</span>*<span class="token punctuation">}</span><span class="token punctuation">{</span>12<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> 北京大学, <span class="token function selector">\\</span> <span class="token punctuation">&amp;</span> <span class="token punctuation">&amp;</span> 61 幼儿园, 海淀小学... <span class="token function selector">\\</span><span class="token function selector">\multirow</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token punctuation">{</span>*<span class="token punctuation">}</span><span class="token punctuation">{</span>设施数量<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> <span class="token function selector">\multirow</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token punctuation">{</span>*<span class="token punctuation">}</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span> <span class="token punctuation">&amp;</span> 颐和园, <span class="token function selector">\\</span> <span class="token punctuation">&amp;</span> <span class="token punctuation">&amp;</span> 百望山森林公园...<span class="token function selector">\\</span>...<span class="token punctuation">&amp;</span> ...<span class="token punctuation">&amp;</span> ... <span class="token function selector">\\</span>公交站数量 <span class="token punctuation">&amp;</span> 17 <span class="token punctuation">&amp;</span> 328路公交车...<span class="token function selector">\\</span>地铁数量 <span class="token punctuation">&amp;</span> 1 <span class="token punctuation">&amp;</span> 马连贵地铁<span class="token function selector">\\</span>地理位置 <span class="token punctuation">&amp;</span> 5 <span class="token punctuation">&amp;</span> 五环至六环<span class="token function selector">\\</span>X <span class="token punctuation">&amp;</span> 116.269981...<span class="token punctuation">&amp;</span> <span class="token function selector">\\</span>Y <span class="token punctuation">&amp;</span> 40.0336799...<span class="token punctuation">&amp;</span> <span class="token function selector">\\</span>房价 <span class="token punctuation">&amp;</span> 84533 <span class="token punctuation">&amp;</span>单位: 元/平方<span class="token function selector">\\</span><span class="token function selector">\bottomrule</span> <span class="token comment" spellcheck="true">%添加表格底部粗线</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">table</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/01/29/WNHKebSn9ohl4XZ.png" alt="效果图"></p><h2 id="8-添加公式"><a href="#8-添加公式" class="headerlink" title="8. 添加公式"></a>8. 添加公式</h2><ul><li>\\eqno{((1))} 添加公式标号</li><li><a href="https://www.jianshu.com/p/df2792fc9c9f" target="_blank" rel="noopener">latex特殊字符汇总</a></li></ul><pre class="line-numbers language-latex"><code class="language-latex"><span class="token equation string">$$</span>x = <span class="token function selector">\frac</span><span class="token punctuation">{</span>x-<span class="token function selector">\mu</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\sigma</span>^2<span class="token punctuation">}</span><span class="token function selector">\eqno</span><span class="token punctuation">{</span>(1)<span class="token punctuation">}</span><span class="token equation string">$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$$x = \frac{x-\mu}{\sigma^2}  \quad \quad (1) $$</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token equation string">$$</span>f(x) =<span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">cases</span><span class="token punctuation">}</span>1 <span class="token punctuation">&amp;</span> x > 0  <span class="token function selector">\\</span>0 <span class="token punctuation">&amp;</span> x <span class="token function selector">\leq</span> 0<span class="token function selector">\\</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">cases</span><span class="token punctuation">}</span><span class="token function selector">\eqno</span><span class="token punctuation">{</span>(2)<span class="token punctuation">}</span><span class="token equation string">$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>f(x) =<br>\begin{cases}<br>1 &amp; x &gt; 0\\\<br>0 &amp; x \leq 0<br>\end{cases}<br>\quad \quad (2)$$</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token equation string">$$</span>i_t = g<span class="token function selector">\big</span>(W_<span class="token punctuation">{</span>xi<span class="token punctuation">}</span> x_t + W_<span class="token punctuation">{</span>hi<span class="token punctuation">}</span> h_<span class="token punctuation">{</span>t-1<span class="token punctuation">}</span> + b_i<span class="token function selector">\big</span>) <span class="token function selector">\eqno</span><span class="token punctuation">{</span>(3)<span class="token punctuation">}</span><span class="token equation string">$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$$i_t = g\big(W_{xi} x_t + W_{hi} h_{t-1} + b_i\big) \quad \quad (3)$$</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">gather*</span><span class="token punctuation">}</span><span class="token equation string">Z_t = <span class="token equation-command regex">\varphi</span>_1Z_{t-1} + <span class="token equation-command regex">\varphi</span>_2Z_{t-2} + <span class="token equation-command regex">\varphi</span>_{p}Z_{t-p} <span class="token equation-command regex">\\</span>+ <span class="token equation-command regex">\alpha</span>_t - <span class="token equation-command regex">\theta</span>_1<span class="token equation-command regex">\alpha</span>_{t-1} - ... - <span class="token equation-command regex">\theta</span>_q<span class="token equation-command regex">\alpha</span>_{t-q}<span class="token equation-command regex">\eqno</span>{(4)}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">gather*</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>Z_t = \varphi_1Z_{t-1} + \varphi_2Z_{t-2} + \varphi_{p}Z_{t-p} \\\<br>+\alpha_t - \theta_1\alpha_{t-1} - … - \theta_q\alpha_{t-q} \quad(4)$$</p><h2 id="9-添加图片"><a href="#9-添加图片" class="headerlink" title="9. 添加图片"></a>9. 添加图片</h2><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">figure</span><span class="token punctuation">}</span><span class="token punctuation">[</span>H<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">%H表示图强制在下面，想设置浮动环境用htp</span>    <span class="token function selector">\centering</span>  <span class="token comment" spellcheck="true">%插入的图片居中表示</span>    <span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>scale=0.9<span class="token punctuation">]</span><span class="token punctuation">{</span>pic/Relationship between location and housing price.png<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">%插入的图，包括JPG,PNG,PDF,EPS等，放在源文件目录下,相对路径</span>    <span class="token function selector">\caption</span><span class="token punctuation">{</span>位置与房价的关系<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">%图片的名称</span><span class="token comment" spellcheck="true">%     \label{fig2}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">figure</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/01/29/7oMmRnjP4LONTIg.png" alt="效果图"></p><h2 id="10-参考文献"><a href="#10-参考文献" class="headerlink" title="10. 参考文献"></a>10. 参考文献</h2><ul><li><a href="https://blog.csdn.net/beta_2187/article/details/79994441" target="_blank" rel="noopener">LaTeX中的参考文献</a></li></ul><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">% 引用： \cite{1}</span><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\upcite</span><span class="token punctuation">}</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token function selector">\textsuperscript</span><span class="token punctuation">{</span><span class="token function selector">\textsuperscript</span><span class="token punctuation">{</span><span class="token function selector">\cite</span><span class="token punctuation">{</span><span class="token keyword">#1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">% 引用</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">thebibliography</span><span class="token punctuation">}</span><span class="token punctuation">{</span>3<span class="token punctuation">}</span><span class="token comment" spellcheck="true">%宽度</span><span class="token function selector">\small</span><span class="token function selector">\bibitem</span><span class="token punctuation">{</span>1<span class="token punctuation">}</span> xxx<span class="token function selector">\bibitem</span><span class="token punctuation">{</span>2<span class="token punctuation">}</span> xxx<span class="token function selector">\bibitem</span><span class="token punctuation">{</span>3<span class="token punctuation">}</span> xxx<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">thebibliography</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-页眉页脚"><a href="#11-页眉页脚" class="headerlink" title="11.页眉页脚"></a>11.页眉页脚</h2><ul><li><a href="https://blog.csdn.net/robertchenguangzhi/article/details/48187119" target="_blank" rel="noopener">LATEX中的页眉设置术语</a></li><li><a href="https://blog.csdn.net/zhangyunfei_happy/article/details/44460903" target="_blank" rel="noopener">在LATEX中设置页眉页脚以及页码</a></li></ul><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\usepackage</span><span class="token punctuation">{</span><span class="token keyword">lastpage</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">%获得总页数</span><span class="token function selector">\pagestyle</span><span class="token punctuation">{</span>fancy<span class="token punctuation">}</span><span class="token comment" spellcheck="true">% \lhead{xxx}</span><span class="token comment" spellcheck="true">% \chead{xxx}</span><span class="token comment" spellcheck="true">% \rhead{xxx}</span><span class="token comment" spellcheck="true">% \lfoot{xxx}</span><span class="token comment" spellcheck="true">% \cfoot{xxx}</span><span class="token comment" spellcheck="true">% \rfoot{xxx}</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\headrulewidth</span><span class="token punctuation">}</span><span class="token punctuation">{</span>0pt<span class="token punctuation">}</span><span class="token comment" spellcheck="true">%改为0pt即可去掉页眉下面的横线</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\footrulewidth</span><span class="token punctuation">}</span><span class="token punctuation">{</span>0pt<span class="token punctuation">}</span><span class="token comment" spellcheck="true">%改为0pt即可去掉页脚上面的横线</span><span class="token function selector">\cfoot</span><span class="token punctuation">{</span><span class="token function selector">\thepage</span><span class="token function selector">\ </span>/ <span class="token function selector">\pageref</span><span class="token punctuation">{</span>LastPage<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">%当前页 of 总页数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some useful scripts</title>
      <link href="/2019/11/28/some-useful-scripts/"/>
      <url>/2019/11/28/some-useful-scripts/</url>
      
        <content type="html"><![CDATA[<h2 id="利用json进行MongoDB文件转移"><a href="#利用json进行MongoDB文件转移" class="headerlink" title="利用json进行MongoDB文件转移"></a>利用json进行MongoDB文件转移</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">Transform</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>MONGO_URI <span class="token operator">=</span> <span class="token string">'mongodb://127.0.0.1:27017'</span>        self<span class="token punctuation">.</span>client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>self<span class="token punctuation">.</span>MONGO_URI<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>database <span class="token operator">=</span> self<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>collection <span class="token operator">=</span> self<span class="token punctuation">.</span>database<span class="token punctuation">[</span><span class="token string">'your_collection_name'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> st<span class="token punctuation">,</span> num<span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> cur<span class="token punctuation">:</span>                <span class="token keyword">del</span> item<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span>                json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>item<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}条数据加载入{}文件完成..."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> load_f<span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                line <span class="token operator">=</span> load_f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> line<span class="token punctuation">:</span>                    r <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>line<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    transform <span class="token operator">=</span> Transform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#     transform.count()</span><span class="token comment" spellcheck="true">#     transform.read("json/record_1.json")</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        transform<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">"json/record_%03d.json"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="python-多进程的简单使用"><a href="#python-多进程的简单使用" class="headerlink" title="python 多进程的简单使用"></a>python 多进程的简单使用</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymongo<span class="token keyword">import</span> json   <span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 注意父子进程不能共用同一MongoDB connection</span>    MONGO_URI <span class="token operator">=</span> <span class="token string">'mongodb://127.0.0.1:27017'</span>    client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>MONGO_URI<span class="token punctuation">)</span>    database <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span>    col1 <span class="token operator">=</span> database<span class="token punctuation">[</span><span class="token string">'your_collection_name1'</span><span class="token punctuation">]</span>    col2 <span class="token operator">=</span> database<span class="token punctuation">[</span><span class="token string">'your_collection_name2'</span><span class="token punctuation">]</span>    cur <span class="token operator">=</span> col1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>skip<span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> cur<span class="token punctuation">:</span>        <span class="token keyword">del</span> item<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span>        raw_key <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'raw_key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'college'</span><span class="token punctuation">]</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'major'</span><span class="token punctuation">]</span>        col2<span class="token punctuation">.</span>update_many<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'raw_key'</span><span class="token punctuation">:</span> raw_key<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'$set'</span><span class="token punctuation">:</span> dict<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> upsert<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    st <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ed <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    process_num <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>ed<span class="token operator">-</span>st<span class="token punctuation">)</span><span class="token operator">/</span>process_num<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> process_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>st<span class="token operator">+</span>x<span class="token operator">*</span>i<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scripts </tag>
            
            <tag> json </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-Means-Simple understanding and code implementation</title>
      <link href="/2019/11/28/k-means-simple-understanding-and-code-implementation/"/>
      <url>/2019/11/28/k-means-simple-understanding-and-code-implementation/</url>
      
        <content type="html"><![CDATA[<h2 id="一、聚类定义"><a href="#一、聚类定义" class="headerlink" title="一、聚类定义"></a>一、聚类定义</h2><blockquote><p>聚类分析(cluster analysis)是一组将研究对象分为相对同质的群组(clusters)的统计分析技术。 聚类分析区别于分类分析(classification analysis) ，后者是有监督的学习。</p></blockquote><ul><li>依据研究对象（样品或指标）的特征，对其进行分类的方法，减少研究对象的数目。</li><li>各类事物缺乏可靠的历史资料，无法确定共有多少类别，目的是将性质相近事物归入一类。</li><li>各指标之间具有一定的相关关系。</li></ul><blockquote><p>变量类型：定类变量、定量（离散和连续）变量</p></blockquote><h2 id="二、划分聚类方法-Kmeans"><a href="#二、划分聚类方法-Kmeans" class="headerlink" title="二、划分聚类方法-Kmeans:"></a>二、划分聚类方法-Kmeans:</h2><p>对于给定的样本集，按照样本之间的距离大小，将样本集划分为K个簇。让簇内的点尽量紧密的连在一起，而让簇间的距离尽量的大。</p><ul><li>步骤1：取得k个初始中心点</li><li>步骤2：利用中心点划分样本集为k个簇</li><li>步骤3：根据已经被分类的数据分别重新计算各自的中心点，如果中心点发生变化回到步骤2，未发生变化转到步骤4</li><li>步骤4：收敛</li></ul><p>缺点：<br>初始值敏感、采用迭代方法，得到的结果只是局部最优、K值的选取不好把握、对于不是凸的数据集比较难收敛<br>如何衡量Kmeans 算法的精确度？<br>SSE(Sum of Square Error) 误差平方和， SSE越小，精确度越高。</p><h2 id="三、改进算法-二分Kmeans"><a href="#三、改进算法-二分Kmeans" class="headerlink" title="三、改进算法-二分Kmeans"></a>三、改进算法-二分Kmeans</h2><ul><li>首先将所有点作为一个簇，然后将其一分为二。</li><li>每次选择一个簇一分为二，选取簇的依据取决于其是否能最大程度降低SSE即选取聚类后SSE最小的一个簇进行划分。</li><li>直至有k个簇</li></ul><h2 id="四、Kmeans-Code"><a href="#四、Kmeans-Code" class="headerlink" title="四、Kmeans Code"></a>四、Kmeans Code</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>io <span class="token keyword">as</span> scio<span class="token comment" spellcheck="true"># %matplotlib inline</span><span class="token keyword">def</span> <span class="token function">K_Means</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 计算临近点</span>    <span class="token keyword">def</span> <span class="token function">near</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        dis <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>x<span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> sp<span class="token punctuation">]</span>        <span class="token keyword">return</span> dis<span class="token punctuation">.</span>index<span class="token punctuation">(</span>min<span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 打印结果</span>    <span class="token keyword">def</span> <span class="token function">print_result</span><span class="token punctuation">(</span>sp_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#打印中心点迭代轨迹</span>        sp_list <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> sp_list<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>sp_list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sp_list<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'k->'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'type{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#分类打印其他点</span>        p_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> X<span class="token punctuation">:</span>            i <span class="token operator">=</span> near<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                        p_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        p_list <span class="token operator">=</span> <span class="token punctuation">[</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> p_list<span class="token punctuation">]</span>        color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>            plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>p_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'o'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'K-Means Result'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 迭代中心点</span>    sp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    sp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sp<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>K<span class="token punctuation">)</span>        sp_t <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> X<span class="token punctuation">:</span>            i <span class="token operator">=</span> near<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                        count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            sp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> p        sp_t <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>sp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        SSE <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>sp<span class="token operator">-</span>sp_t<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> SSE <span class="token operator">&lt;</span> <span class="token number">0.001</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        sp <span class="token operator">=</span> sp_t        sp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sp<span class="token punctuation">)</span>    print_result<span class="token punctuation">(</span>sp_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'聚类中心:'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> sp<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> scio<span class="token punctuation">.</span>loadmat<span class="token punctuation">(</span><span class="token string">'ex7data2.mat'</span><span class="token punctuation">)</span>    X <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span>    K <span class="token operator">=</span> <span class="token number">3</span>    sp <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># starting point</span>    K_Means<span class="token punctuation">(</span>X<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> K<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/28/gWQ9ZO6CwVMrA34.png" alt="kmeans聚类结果"></p><p><strong>K为3聚类中心</strong>: [1.95399466 5.02557006],[3.04367119 1.01541041],[6.03366736 3.00052511]</p><p>[测试数据下载地址]： <a href="https://uploader.shimo.im/f/7cTjEl5cRAINXBO8.mat?attname=ex7data2.mat&amp;download" target="_blank" rel="noopener">ex7data2.mat</a><br>[参考资料]：<a href="https://www.cnblogs.com/pinard/p/6164214.html" target="_blank" rel="noopener">K-Means聚类算法原理</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> Clustering </tag>
            
            <tag> KMeans </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm Problem List</title>
      <link href="/2019/11/08/algorithm-problem-list/"/>
      <url>/2019/11/08/algorithm-problem-list/</url>
      
        <content type="html"><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>1.<a href="/2018/12/17/luogup1028/">luoguP1028 数的计算</a><br>2.<a href="/2019/02/09/luogup2789/">luoguP2789 直线交点数</a></p><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><ol><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-1">POJ2376 清洁倒班</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-2">POJ1328 雷达安装</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-3">POJ3190 牛栏预订</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-4">POJ1700 过河问题</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-5">HDU1338 游戏预测</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-6">ZOJ2229 乘车上学</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-7">POJ1456 超级市场</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-8">POJ1042 钓鱼去了</a></li><li><a href="/2020/04/02/greedy-problem-set/#toc-heading-9">HDU1789 再次作业</a></li></ol><h2 id="D-P"><a href="#D-P" class="headerlink" title="D P"></a>D P</h2><h3 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h3><h4 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h4><ol><li><a href="/2019/02/04/luogup1060/">luoguP1060 开心的金明</a></li><li><a href="/2019/02/04/luogup1164/">luoguP1164 小A点菜</a></li><li><a href="/2019/02/04/luogup1064/">luoguP1064 金明的预算方案</a></li><li><a href="/2019/02/04/luogup1048/">luoguP1048 采药</a></li><li><a href="/2019/02/04/luogup1049/">luoguP1049 装箱问题</a></li><li><a href="/2019/01/23/nowcoder317C/">nowcoder317C 小a与星际探索</a></li><li><a href="/2018/12/17/hdu3466/">HDU3466 Proud Merchants</a></li><li><a href="/2018/12/17/hdu2955/">HDU2955 01 背包 Robberies</a></li><li><a href="/2018/12/17/hdu5890/">HDU5890 Eighty seven</a></li></ol><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><ol><li><a href="/2019/02/04/luogup1616/">luoguP1616 疯狂的采药</a></li></ol><h4 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h4><h3 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h3><ol><li><a href="/2019/02/11/luogup1020/">luoguP1020 导弹拦截</a></li><li><a href="/2019/02/12/luogup1091/">luoguP1091 合唱队形</a></li><li><a href="/2019/02/25/luogup1280/">luoguP1280 尼克的任务</a></li><li><a href="/2019/02/25/luogup1880/">luoguP1880 石子合并</a></li><li><a href="/2019/02/26/luogup1140/">luoguP1140 相似基因</a></li><li><a href="/2019/02/26/luogup1282">luoguP1282 多米诺骨牌</a></li></ol><h3 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h3><ol><li><a href="/2019/02/26/poj3280/">poj3280 Cheapest Palindrome</a></li><li><a href="/2019/02/26/poj2955/">poj2955 Brackets</a></li><li><a href="/2019/02/26/poj1651/">poj1651 Multiplication Puzzle</a></li><li><a href="/2019/02/26/luogup2758/">luoguP2758 编辑距离</a></li></ol><h3 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h3><ol><li><a href="/2019/02/26/luogup1122/">luoguP1122 最大子树和</a></li><li><a href="/2019/02/26/hdu2412/">HDU2412 Party at Hali-Bula</a></li></ol><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a><a href="https://tawn0000.github.io/2019/09/27/graph-theory-template/">Template</a></h3><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><ol><li><a href="http://blog.csdn.net/tawn0000/article/details/79080072" target="_blank" rel="noopener">CF——Codeforces 592 D. Super M</a>（树的直径）</li><li><a href="http://blog.csdn.net/tawn0000/article/details/77254693" target="_blank" rel="noopener">CF——Codeforces Round #428 (Div. 2)C. Journey</a>(dfs+期望）</li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82424182" target="_blank" rel="noopener">HDU 5877 Weak Pair</a>(dfs +树状数组 、 树上逆元思想)</li></ol><h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><p><a href="http://blog.csdn.net/tawn0000/article/details/65960089" target="_blank" rel="noopener">BFS</a></p><ol><li><a href="http://blog.csdn.net/tawn0000/article/details/69791153" target="_blank" rel="noopener">BFS （图）——Codeforces 788 C. The Great Mixing</a></li><li><a href="http://blog.csdn.net/tawn0000/article/details/65628537" target="_blank" rel="noopener">BFS——Poj 3669 Meteor Shower</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/80232164" target="_blank" rel="noopener">BFS_set优化扩展边</a>(set优化）</li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82453574" target="_blank" rel="noopener">补图求最短路 bfs + 双set优化，用上面的那个TLE了，这个写法比较保险</a></li></ol><h4 id="迭代加深搜索ID"><a href="#迭代加深搜索ID" class="headerlink" title="迭代加深搜索ID"></a>迭代加深搜索ID</h4><ol><li><a href="/2019/02/26/codevs1288/">codevs1288 埃及分数</a></li><li><a href="/2019/02/27/uva11212/">uva11212 Editing a Book</a></li></ol><h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/79911215" target="_blank" rel="noopener">Poj 2117 Electricity</a>(求割点）</li><li><a href="https://blog.csdn.net/Tawn0000/article/details/79911455" target="_blank" rel="noopener">Poj1144 Network</a>(求割点）</li></ol><h3 id="强连通分量分解"><a href="#强连通分量分解" class="headerlink" title="强连通分量分解"></a>强连通分量分解</h3><ul><li>两遍dfs O(VE)</li></ul><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/83018079" target="_blank" rel="noopener">强连通分量分解模板及例题</a></li></ol><h3 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h3><ol><li><a href="http://blog.csdn.net/tawn0000/article/details/79506507" target="_blank" rel="noopener">HDU2224The shortest path</a>(BTSP)</li></ol><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p><a href="http://blog.csdn.net/tawn0000/article/details/69791207" target="_blank" rel="noopener">并查集——模板</a></p><h3 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h3><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><p><a href="http://blog.csdn.net/tawn0000/article/details/69791221" target="_blank" rel="noopener">Kruskal——模板</a><br><a href="https://blog.csdn.net/Tawn0000/article/details/80057371" target="_blank" rel="noopener">Prime——模板</a></p><ol><li><a href="http://blog.csdn.net/tawn0000/article/details/78613045" target="_blank" rel="noopener">Codeforces 891 C Envy</a></li></ol><h4 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h4><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/82980339" target="_blank" rel="noopener">Poj 1679 The Unique MST 次小生成树</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82980416" target="_blank" rel="noopener">HDU 4081 Qin Shi Huang’s National Road System 次小生成树</a></li></ol><h4 id="最小树形图"><a href="#最小树形图" class="headerlink" title="最小树形图"></a>最小树形图</h4><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/82980486" target="_blank" rel="noopener">Poj 3467 Command Network 最小树形图</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82980509" target="_blank" rel="noopener">HDU 2121 Ice_cream’s world II 无根最小树形图</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82980544" target="_blank" rel="noopener">HDU 4049 Transfer water 多根最小树形图</a></li></ol><h4 id="生成树计数"><a href="#生成树计数" class="headerlink" title="生成树计数"></a>生成树计数</h4><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/82987162" target="_blank" rel="noopener">UVA - 10766 Organising the Organisation (生成树计数-补图） 基尔霍夫矩阵</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82988044" target="_blank" rel="noopener">URAL - 1627 Join 生成树计数模板题</a></li></ol><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/80071653" target="_blank" rel="noopener">洛谷P1268树的重量</a>(LCA、树的的构造)</li></ol><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><h4 id="最大流最小割"><a href="#最大流最小割" class="headerlink" title="最大流最小割"></a>最大流最小割</h4><ol><li><a href="/2019/01/23/luogup3171/">luoguP3171 CQOI2015网络吞吐量</a></li><li><a href="/2019/01/23/luogup2766/">luoguP2766 最长不下降子序列问题</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82825290" target="_blank" rel="noopener">EK、Dinic、SAP三种算法模板</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/80251495" target="_blank" rel="noopener">HDU 3572 Task Schedule</a>(建图)</li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82251438" target="_blank" rel="noopener">HDU 5889 Barricade</a>(最短路径上跑最小割 spfa + dicnic(当前弧优化）</li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82526594" target="_blank" rel="noopener">HDU 1532 Drainage Ditches(入门) [最大流]</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82526730" target="_blank" rel="noopener">HDU 3549 Flow Problem(入门) [最大流]</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/83239620" target="_blank" rel="noopener">洛谷 P2763 试题库问题  最大流</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82594984" target="_blank" rel="noopener">HDU 3572 Task Schedule 网络流 判断满流 建图</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82597626" target="_blank" rel="noopener">HDU 2732 Leapin’ Lizards 最大流拆点+建图</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82669658" target="_blank" rel="noopener">HDU 3338 Kakuro Extension 最大流 行进列出</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82685263" target="_blank" rel="noopener">HDU 2883 kebab 离散化 + 最大流 判断满流</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82695465" target="_blank" rel="noopener">HDU 3605 Escape 最大流 二进制并点建图</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82696169" target="_blank" rel="noopener">HDU 4240 Route Redundancy 求一条（流最大）的路径</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82824716" target="_blank" rel="noopener">HDU 3081 Marriage Match II 最大流 之 二分图匹配 + 二分</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82824716" target="_blank" rel="noopener">HDU 3277 Marriage Match III 最大流 + 二分 + 并查集 + 拆点建图</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82830586" target="_blank" rel="noopener">HDU 3416 Marriage Match IV 最短路跑路径 + 最大流</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/83218185" target="_blank" rel="noopener">洛谷 P2765 魔术球问题 最大流 解决最小路径覆盖问题</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/83268203" target="_blank" rel="noopener">洛谷  P2774 方格取数问题  建图  最大取和= 最大和-最小舍弃和 =  最小割  = 最大流</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/83268107" target="_blank" rel="noopener">洛谷 P2766 最长不下降子序列问题 最大流 分层建图</a></li></ol><h4 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h4><p><a href="https://blog.csdn.net/Tawn0000/article/details/82840655" target="_blank" rel="noopener">mcf-spfa 模板</a></p><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/82841352" target="_blank" rel="noopener">HDU 1533 Going Home 最小费用最大流基础题</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82851868" target="_blank" rel="noopener">HDU 3488 Tour 有向环最小权值覆盖 最小费用最大流</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82862739" target="_blank" rel="noopener">HDU 3667 Transportation 最小费用最大流 平方扩边</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82918539" target="_blank" rel="noopener">HDU 4411 Arrest 费用流之可行流</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82975392" target="_blank" rel="noopener">青岛区域赛 Finding Hotels 最小费用流概率建图</a></li><li><a href="/2019/01/22/luogup2604/">luoguP2604 ZJOI2010网络扩容</a></li></ol><h4 id="上下界网络流"><a href="#上下界网络流" class="headerlink" title="上下界网络流"></a>上下界网络流</h4><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/82945305" target="_blank" rel="noopener">ZOJ  2314 Reactor Cooling (上下界无源汇可行流)</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82945326" target="_blank" rel="noopener">POJ 2396 Budget (上下界有源汇可行流)</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82944818" target="_blank" rel="noopener">ZOJ 3229 Shoot the Bullet (上下界有源汇最大流)</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/82947746" target="_blank" rel="noopener">HDU 3157 Crazy Circuits （上下界有源汇最小流）</a></li></ol><h4 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h4><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/83304384" target="_blank" rel="noopener">洛谷 P2805 [NOI2009]植物大战僵尸 网络流 - 最大权闭合子图</a></li></ol><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><h4 id="Template-1"><a href="#Template-1" class="headerlink" title="Template"></a>Template</h4><ol><li><a href="http://blog.csdn.net/tawn0000/article/details/78239077" target="_blank" rel="noopener">二分图匹配 判断是否为二分图 —— 模板</a></li><li><a href="http://blog.csdn.net/tawn0000/article/details/78239165" target="_blank" rel="noopener">二分图匹配 Hopcroft-Carp算法——模板</a></li><li><a href="http://blog.csdn.net/tawn0000/article/details/78239110" target="_blank" rel="noopener">二分图匹配匈牙利算法——模板</a></li></ol><h4 id="二分图-1"><a href="#二分图-1" class="headerlink" title="二分图"></a>二分图</h4><ol><li><a href="/2019/02/01/luogup3386/">luoguP3386   模板 二分图匹配</a></li><li><a href="/2019/02/01/luogup1640/">luoguP1640 SCOI2010连续攻击游戏</a></li><li><a href="/2019/02/01/luogup1129/">luoguP1129 ZJOI2007矩阵游戏</a></li><li><a href="http://blog.csdn.net/tawn0000/article/details/78278997" target="_blank" rel="noopener">HDU5737 Necklace</a></li><li><a href="http://blog.csdn.net/tawn0000/article/details/78239322" target="_blank" rel="noopener">HDU2389 Rain on your Parade</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/80147587" target="_blank" rel="noopener">洛谷P1525 关押罪犯</a>(二分+二分图染色)</li></ol><h4 id="最小路径覆盖"><a href="#最小路径覆盖" class="headerlink" title="最小路径覆盖"></a>最小路径覆盖</h4><ol><li><a href="https://blog.csdn.net/Tawn0000/article/details/83218185" target="_blank" rel="noopener">洛谷 P2765 魔术球问题 最大流 解决最小路径覆盖问题</a></li><li><a href="https://blog.csdn.net/Tawn0000/article/details/83239096" target="_blank" rel="noopener">洛谷 P2764 最小路径覆盖问题</a></li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Problem Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily New Words</title>
      <link href="/2019/11/03/daily-new-words/"/>
      <url>/2019/11/03/daily-new-words/</url>
      
        <content type="html"><![CDATA[<h2 id="19Feb"><a href="#19Feb" class="headerlink" title="19Feb"></a>19Feb</h2><h3 id="acoustic"><a href="#acoustic" class="headerlink" title="acoustic"></a><a href="http://dict.youdao.com/w/eng/acoustic" target="_blank" rel="noopener">acoustic</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=acoustic" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [əˈkuːstɪk]  us: [əˈkuːstɪk]</li><li>听觉的</li></ul></blockquote><h3 id="plight"><a href="#plight" class="headerlink" title="plight"></a><a href="http://dict.youdao.com/w/eng/plight" target="_blank" rel="noopener">plight</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=plight" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [plaɪt]  us: [plaɪt]</li><li>困境</li></ul></blockquote><h3 id="distress"><a href="#distress" class="headerlink" title="distress"></a><a href="http://dict.youdao.com/w/eng/distress" target="_blank" rel="noopener">distress</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=distress" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [dɪˈstres]  us: [dɪˈstres]</li><li>危难，凭困，使悲痛</li></ul></blockquote><h3 id="nervous"><a href="#nervous" class="headerlink" title="nervous"></a><a href="http://dict.youdao.com/w/eng/nervous" target="_blank" rel="noopener">nervous</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=nervous" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈnɜːvəs]  us: [ˈnɜːrvəs]</li><li>神经紧张的</li></ul></blockquote><h2 id="18-Feb"><a href="#18-Feb" class="headerlink" title="18 Feb"></a>18 Feb</h2><h3 id="elevator"><a href="#elevator" class="headerlink" title="elevator"></a><a href="http://dict.youdao.com/w/eng/elevator" target="_blank" rel="noopener">elevator</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=elevator" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈelɪveɪtə(r)]  us: [ˈelɪveɪtər]</li><li>电梯</li></ul></blockquote><h3 id="intercom"><a href="#intercom" class="headerlink" title="intercom"></a><a href="http://dict.youdao.com/w/eng/intercom" target="_blank" rel="noopener">intercom</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=intercom" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɪntəkɒm]  us: [ˈɪntərkɑːm]</li><li>对讲机</li></ul></blockquote><h3 id="inspection"><a href="#inspection" class="headerlink" title="inspection"></a><a href="http://dict.youdao.com/w/eng/inspection" target="_blank" rel="noopener">inspection</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=inspection" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˈspekʃn]  us: [ɪnˈspekʃn]</li><li>检查</li></ul></blockquote><h2 id="17-Feb"><a href="#17-Feb" class="headerlink" title="17 Feb"></a>17 Feb</h2><h3 id="sanction"><a href="#sanction" class="headerlink" title="sanction"></a><a href="http://dict.youdao.com/w/eng/sanction" target="_blank" rel="noopener">sanction</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sanction" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsæŋkʃn]  us: [ˈsæŋkʃn]</li><li>制裁，处罚</li></ul></blockquote><h3 id="ultraviolet"><a href="#ultraviolet" class="headerlink" title="ultraviolet"></a><a href="http://dict.youdao.com/w/eng/ultraviolet" target="_blank" rel="noopener">ultraviolet</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ultraviolet" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌʌltrəˈvaɪələt]  us: [ˌʌltrəˈvaɪələt]</li><li>紫外线</li></ul></blockquote><h3 id="ultrabook"><a href="#ultrabook" class="headerlink" title="ultrabook"></a><a href="http://dict.youdao.com/w/eng/ultrabook" target="_blank" rel="noopener">ultrabook</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ultrabook" type="audio/mpeg"><br></audio></p><blockquote><ul><li>超级笔记本</li></ul></blockquote><h3 id="capsule"><a href="#capsule" class="headerlink" title="capsule"></a><a href="http://dict.youdao.com/w/eng/capsule" target="_blank" rel="noopener">capsule</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=capsule" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkæpsjuːl]  us: [ˈkæpsl,ˈkæpsuːl]</li><li>胶囊</li></ul></blockquote><h3 id="a-3-day-course-of-medicine"><a href="#a-3-day-course-of-medicine" class="headerlink" title="a 3-day course of medicine"></a><a href="http://dict.youdao.com/w/eng/a%203-day%20course%20of%20medicine" target="_blank" rel="noopener">a 3-day course of medicine</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=a%203-day%20course%20of%20medicine" type="audio/mpeg"><br></audio></p><blockquote><ul><li>一个三天的疗程</li></ul></blockquote><h3 id="living-room"><a href="#living-room" class="headerlink" title="living room"></a><a href="http://dict.youdao.com/w/eng/living%20room" target="_blank" rel="noopener">living room</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=living%20room" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [‘lɪvɪŋ ru:m]  us: [‘lɪvɪŋ rum]</li><li>起居室，客厅</li></ul></blockquote><h3 id="study"><a href="#study" class="headerlink" title="study"></a><a href="http://dict.youdao.com/w/eng/study" target="_blank" rel="noopener">study</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=study" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈstʌdi]  us: [ˈstʌdi]</li><li>书房</li></ul></blockquote><h3 id="stunned"><a href="#stunned" class="headerlink" title="stunned"></a><a href="http://dict.youdao.com/w/eng/stunned" target="_blank" rel="noopener">stunned</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=stunned" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [stʌnd]  us: [stʌnd]</li><li>目瞪口呆的</li></ul></blockquote><h3 id="thrilled"><a href="#thrilled" class="headerlink" title="thrilled"></a><a href="http://dict.youdao.com/w/eng/thrilled" target="_blank" rel="noopener">thrilled</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=thrilled" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [θrɪld]  us: [θrɪld]</li><li>兴奋的</li></ul></blockquote><h3 id="leap"><a href="#leap" class="headerlink" title="leap"></a><a href="http://dict.youdao.com/w/eng/leap" target="_blank" rel="noopener">leap</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=leap" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [liːp]  us: [liːp]</li><li>跳跃，激增</li></ul></blockquote><h3 id="extraordinary"><a href="#extraordinary" class="headerlink" title="extraordinary"></a><a href="http://dict.youdao.com/w/eng/extraordinary" target="_blank" rel="noopener">extraordinary</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=extraordinary" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪkˈstrɔːdnri]  us: [ɪkˈstrɔːrdəneri]</li><li>非凡的</li></ul></blockquote><h3 id="classical"><a href="#classical" class="headerlink" title="classical"></a><a href="http://dict.youdao.com/w/eng/classical" target="_blank" rel="noopener">classical</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=classical" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈklæsɪkl]  us: [ˈklæsɪkl]</li><li>古典音乐</li></ul></blockquote><h3 id="department-store"><a href="#department-store" class="headerlink" title="department store"></a><a href="http://dict.youdao.com/w/eng/department%20store" target="_blank" rel="noopener">department store</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=department%20store" type="audio/mpeg"><br></audio></p><blockquote><ul><li>百货商店</li></ul></blockquote><h3 id="jazz"><a href="#jazz" class="headerlink" title="jazz"></a><a href="http://dict.youdao.com/w/eng/jazz" target="_blank" rel="noopener">jazz</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=jazz" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [dʒæz]  us: [dʒæz]</li><li>爵士乐</li></ul></blockquote><h3 id="pub"><a href="#pub" class="headerlink" title="pub"></a><a href="http://dict.youdao.com/w/eng/pub" target="_blank" rel="noopener">pub</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=pub" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [pʌb]  us: [pʌb]</li><li>酒馆</li></ul></blockquote><h3 id="opera-house"><a href="#opera-house" class="headerlink" title="opera house"></a><a href="http://dict.youdao.com/w/eng/opera%20house" target="_blank" rel="noopener">opera house</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=opera%20house" type="audio/mpeg"><br></audio></p><blockquote><ul><li>歌剧院</li></ul></blockquote><h3 id="hypothesis"><a href="#hypothesis" class="headerlink" title="hypothesis"></a><a href="http://dict.youdao.com/w/eng/hypothesis" target="_blank" rel="noopener">hypothesis</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hypothesis" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [haɪˈpɒθəsɪs]  us: [haɪˈpɑːθəsɪs]</li><li>假说</li></ul></blockquote><h3 id="considerable"><a href="#considerable" class="headerlink" title="considerable"></a><a href="http://dict.youdao.com/w/eng/considerable" target="_blank" rel="noopener">considerable</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=considerable" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kənˈsɪdərəbl]  us: [kənˈsɪdərəbl]</li><li>相当大的，值得考虑的</li></ul></blockquote><h3 id="archaeological"><a href="#archaeological" class="headerlink" title="archaeological"></a><a href="http://dict.youdao.com/w/eng/archaeological" target="_blank" rel="noopener">archaeological</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=archaeological" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɑːrkiəˈlɑːdʒɪkl]  us: [ ,ɑ:kiə’lɔdʒikəl ]</li><li>考古学的</li></ul></blockquote><h3 id="cattle"><a href="#cattle" class="headerlink" title="cattle"></a><a href="http://dict.youdao.com/w/eng/cattle" target="_blank" rel="noopener">cattle</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cattle" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkætl]  us: [ˈkætl]</li><li>牛</li></ul></blockquote><h3 id="embed"><a href="#embed" class="headerlink" title="embed"></a><a href="http://dict.youdao.com/w/eng/embed" target="_blank" rel="noopener">embed</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=embed" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪmˈbed]  us: [ɪmˈbed]</li><li>使镶嵌，使嵌入</li></ul></blockquote><h3 id="axe"><a href="#axe" class="headerlink" title="axe"></a><a href="http://dict.youdao.com/w/eng/axe" target="_blank" rel="noopener">axe</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=axe" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [æks]  us: [æks]</li><li>斧头</li></ul></blockquote><h3 id="simultaneously"><a href="#simultaneously" class="headerlink" title="simultaneously"></a><a href="http://dict.youdao.com/w/eng/simultaneously" target="_blank" rel="noopener">simultaneously</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=simultaneously" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌsɪmlˈteɪniəsli]  us: [ˌsaɪmlˈteɪniəsli]</li><li>同时的</li></ul></blockquote><h2 id="16-Feb"><a href="#16-Feb" class="headerlink" title="16 Feb"></a>16 Feb</h2><h3 id="laundromat"><a href="#laundromat" class="headerlink" title="laundromat"></a><a href="http://dict.youdao.com/w/eng/laundromat" target="_blank" rel="noopener">laundromat</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=laundromat" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [‘lɔ:ndrəumæt, ‘lɑ:n-]  us: [ ‘lɔ:ndrəumæt, ‘lɑ:n- ]</li><li>自助洗衣店</li></ul></blockquote><h3 id="castle"><a href="#castle" class="headerlink" title="castle"></a><a href="http://dict.youdao.com/w/eng/castle" target="_blank" rel="noopener">castle</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=castle" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkɑːsl]  us: [ˈkæsl]</li><li>城堡</li></ul></blockquote><h3 id="sauna"><a href="#sauna" class="headerlink" title="sauna"></a><a href="http://dict.youdao.com/w/eng/sauna" target="_blank" rel="noopener">sauna</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sauna" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsɔːnə; ˈsaʊnə]  us: [ˈsɔːnə,ˈsaʊnə]</li><li>桑拿</li></ul></blockquote><h3 id="washing-machine"><a href="#washing-machine" class="headerlink" title="washing machine"></a><a href="http://dict.youdao.com/w/eng/washing%20machine" target="_blank" rel="noopener">washing machine</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=washing%20machine" type="audio/mpeg"><br></audio></p><blockquote><ul><li>洗衣机</li></ul></blockquote><h3 id="deposit"><a href="#deposit" class="headerlink" title="deposit"></a><a href="http://dict.youdao.com/w/eng/deposit" target="_blank" rel="noopener">deposit</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=deposit" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [dɪˈpɒzɪt]  us: [dɪˈpɑːzɪt]</li><li>定金，押金</li></ul></blockquote><h3 id="garage"><a href="#garage" class="headerlink" title="garage"></a><a href="http://dict.youdao.com/w/eng/garage" target="_blank" rel="noopener">garage</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=garage" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɡærɑːʒ; ˈɡærɑːdʒ; ˈɡærɪdʒ]  us: [ɡəˈrɑːʒ,ɡəˈrɑːdʒ]</li><li>停车房</li></ul></blockquote><h3 id="jewelry"><a href="#jewelry" class="headerlink" title="jewelry"></a><a href="http://dict.youdao.com/w/eng/jewelry" target="_blank" rel="noopener">jewelry</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=jewelry" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [‘dʒuːəlrɪ]  us: [‘dʒʊəlri]</li><li>珠宝</li></ul></blockquote><h3 id="flower-pendant"><a href="#flower-pendant" class="headerlink" title="flower pendant"></a><a href="http://dict.youdao.com/w/eng/flower%20pendant" target="_blank" rel="noopener">flower pendant</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=flower%20pendant" type="audio/mpeg"><br></audio></p><blockquote><ul><li>花型缀饰</li></ul></blockquote><h3 id="vacuum-cleaner"><a href="#vacuum-cleaner" class="headerlink" title="vacuum cleaner"></a><a href="http://dict.youdao.com/w/eng/vacuum%20cleaner" target="_blank" rel="noopener">vacuum cleaner</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=vacuum%20cleaner" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈvækjuəm ˈkli:nə]  us: [ˈvækjuəm ˈklinɚ]</li><li>真空吸尘器</li></ul></blockquote><h3 id="lately"><a href="#lately" class="headerlink" title="lately"></a><a href="http://dict.youdao.com/w/eng/lately" target="_blank" rel="noopener">lately</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=lately" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈleɪtli]  us: [ˈleɪtli]</li><li>最近</li></ul></blockquote><h3 id="square-shaped-glasses"><a href="#square-shaped-glasses" class="headerlink" title="square-shaped glasses"></a><a href="http://dict.youdao.com/w/eng/square-shaped%20glasses" target="_blank" rel="noopener">square-shaped glasses</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=square-shaped%20glasses" type="audio/mpeg"><br></audio></p><blockquote><ul><li>方形眼镜</li></ul></blockquote><h3 id="butter"><a href="#butter" class="headerlink" title="butter"></a><a href="http://dict.youdao.com/w/eng/butter" target="_blank" rel="noopener">butter</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=butter" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈbʌtə(r)]  us: [ˈbʌtər]</li><li>黄油奶油</li></ul></blockquote><h3 id="closet"><a href="#closet" class="headerlink" title="closet"></a><a href="http://dict.youdao.com/w/eng/closet" target="_blank" rel="noopener">closet</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=closet" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈklɒzɪt]  us: [ˈklɑːzɪt]</li><li>储藏室 壁橱</li></ul></blockquote><h2 id="12-Feb"><a href="#12-Feb" class="headerlink" title="12 Feb"></a>12 Feb</h2><h3 id="improvise"><a href="#improvise" class="headerlink" title="improvise"></a><a href="http://dict.youdao.com/w/eng/improvise" target="_blank" rel="noopener">improvise</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=improvise" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɪmprəvaɪz]  us: [ˈɪmprəvaɪz]</li><li>即兴创作</li></ul></blockquote><h3 id="in-excess-of"><a href="#in-excess-of" class="headerlink" title="in excess of"></a><a href="http://dict.youdao.com/w/eng/in%20excess%20of" target="_blank" rel="noopener">in excess of</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=in%20excess%20of" type="audio/mpeg"><br></audio></p><blockquote><ul><li>超过</li></ul></blockquote><h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a><a href="http://dict.youdao.com/w/eng/spawn" target="_blank" rel="noopener">spawn</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=spawn" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [spɔːn]  us: [spɔːn]</li><li>产卵，引发</li></ul></blockquote><h3 id="fishery"><a href="#fishery" class="headerlink" title="fishery"></a><a href="http://dict.youdao.com/w/eng/fishery" target="_blank" rel="noopener">fishery</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fishery" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈfɪʃəri]  us: [ˈfɪʃəri]</li><li>渔业，渔场</li></ul></blockquote><h3 id="prosper"><a href="#prosper" class="headerlink" title="prosper"></a><a href="http://dict.youdao.com/w/eng/prosper" target="_blank" rel="noopener">prosper</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=prosper" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈprɒspə(r)]  us: [ˈprɑːspər]</li><li>繁荣，兴旺，发达</li></ul></blockquote><h3 id="devastate"><a href="#devastate" class="headerlink" title="devastate"></a><a href="http://dict.youdao.com/w/eng/devastate" target="_blank" rel="noopener">devastate</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=devastate" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈdevəsteɪt]  us: [ˈdevəsteɪt]</li><li>彻底破坏，毁灭</li></ul></blockquote><h3 id="collapse"><a href="#collapse" class="headerlink" title="collapse"></a><a href="http://dict.youdao.com/w/eng/collapse" target="_blank" rel="noopener">collapse</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=collapse" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəˈlæps]  us: [kəˈlæps]</li><li>崩塌</li></ul></blockquote><h2 id="11-Feb"><a href="#11-Feb" class="headerlink" title="11 Feb"></a>11 Feb</h2><h3 id="enduring"><a href="#enduring" class="headerlink" title="enduring"></a><a href="http://dict.youdao.com/w/eng/enduring" target="_blank" rel="noopener">enduring</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=enduring" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˈdjʊərɪŋ]  us: [ɪnˈdʊrɪŋ]</li><li>持久的，耐久的</li></ul></blockquote><h3 id="durable"><a href="#durable" class="headerlink" title="durable"></a><a href="http://dict.youdao.com/w/eng/durable" target="_blank" rel="noopener">durable</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=durable" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈdjʊərəbl]  us: [ˈdʊrəbl]</li><li>耐久的</li></ul></blockquote><h3 id="intricate"><a href="#intricate" class="headerlink" title="intricate"></a><a href="http://dict.youdao.com/w/eng/intricate" target="_blank" rel="noopener">intricate</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=intricate" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɪntrɪkət]  us: [ˈɪntrɪkət]</li><li>错综复杂的</li></ul></blockquote><h3 id="megalopolis"><a href="#megalopolis" class="headerlink" title="megalopolis"></a><a href="http://dict.youdao.com/w/eng/megalopolis" target="_blank" rel="noopener">megalopolis</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=megalopolis" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌmeɡəˈlɒpəlɪs]  us: [ˌmeɡəˈlɑːpəlɪs]</li><li>大都会</li></ul></blockquote><h3 id="metropolitan"><a href="#metropolitan" class="headerlink" title="metropolitan"></a><a href="http://dict.youdao.com/w/eng/metropolitan" target="_blank" rel="noopener">metropolitan</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=metropolitan" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌmetrəˈpɒlɪtən]  us: [ˌmetrəˈpɑːlɪtən]</li><li>大都会的，本土的</li></ul></blockquote><h3 id="territory"><a href="#territory" class="headerlink" title="territory"></a><a href="http://dict.youdao.com/w/eng/territory" target="_blank" rel="noopener">territory</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=territory" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈterətri]  us: [ˈterətɔːri]</li><li>领土</li></ul></blockquote><h3 id="outstrip"><a href="#outstrip" class="headerlink" title="outstrip"></a><a href="http://dict.youdao.com/w/eng/outstrip" target="_blank" rel="noopener">outstrip</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=outstrip" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌaʊtˈstrɪp]  us: [ˌaʊtˈstrɪp]</li><li>超过</li></ul></blockquote><h3 id="ancestor"><a href="#ancestor" class="headerlink" title="ancestor"></a><a href="http://dict.youdao.com/w/eng/ancestor" target="_blank" rel="noopener">ancestor</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ancestor" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈænsestə(r)]  us: [ˈænsestər]</li><li>祖先</li></ul></blockquote><h3 id="hail"><a href="#hail" class="headerlink" title="hail"></a><a href="http://dict.youdao.com/w/eng/hail" target="_blank" rel="noopener">hail</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hail" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [heɪl]  us: [heɪl]</li><li>冰雹，赞扬</li></ul></blockquote><h3 id="masterpiece"><a href="#masterpiece" class="headerlink" title="masterpiece"></a><a href="http://dict.youdao.com/w/eng/masterpiece" target="_blank" rel="noopener">masterpiece</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=masterpiece" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmɑːstəpiːs]  us: [ˈmæstərpiːs]</li><li>杰作</li></ul></blockquote><h3 id="primitive"><a href="#primitive" class="headerlink" title="primitive"></a><a href="http://dict.youdao.com/w/eng/primitive" target="_blank" rel="noopener">primitive</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=primitive" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈprɪmətɪv]  us: [ˈprɪmətɪv]</li><li>原始的，落后的</li></ul></blockquote><h3 id="albeit"><a href="#albeit" class="headerlink" title="albeit"></a><a href="http://dict.youdao.com/w/eng/albeit" target="_blank" rel="noopener">albeit</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=albeit" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɔːlˈbiːɪt]  us: [ˌɔːlˈbiːɪt]</li><li>尽管</li></ul></blockquote><h3 id="foraging"><a href="#foraging" class="headerlink" title="foraging"></a><a href="http://dict.youdao.com/w/eng/foraging" target="_blank" rel="noopener">foraging</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=foraging" type="audio/mpeg"><br></audio></p><blockquote><ul><li>觅食</li></ul></blockquote><h3 id="bearing"><a href="#bearing" class="headerlink" title="bearing"></a><a href="http://dict.youdao.com/w/eng/bearing" target="_blank" rel="noopener">bearing</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bearing" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈbeərɪŋ]  us: [ˈberɪŋ]</li><li>方位，position</li></ul></blockquote><h3 id="scout"><a href="#scout" class="headerlink" title="scout"></a><a href="http://dict.youdao.com/w/eng/scout" target="_blank" rel="noopener">scout</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=scout" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [skaʊt]  us: [skaʊt]</li><li>侦察员</li></ul></blockquote><h3 id="elaborate"><a href="#elaborate" class="headerlink" title="elaborate"></a><a href="http://dict.youdao.com/w/eng/elaborate" target="_blank" rel="noopener">elaborate</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=elaborate" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪˈlæbərət]  us: [ɪˈlæbərət]</li><li>精心的</li></ul></blockquote><h3 id="precaution"><a href="#precaution" class="headerlink" title="precaution"></a><a href="http://dict.youdao.com/w/eng/precaution" target="_blank" rel="noopener">precaution</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=precaution" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [prɪˈkɔːʃn]  us: [prɪˈkɔːʃn]</li><li>预防</li></ul></blockquote><h3 id="compass-bearing"><a href="#compass-bearing" class="headerlink" title="compass bearing"></a><a href="http://dict.youdao.com/w/eng/compass%20bearing" target="_blank" rel="noopener">compass bearing</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=compass%20bearing" type="audio/mpeg"><br></audio></p><blockquote><ul><li>罗盘方位</li></ul></blockquote><h3 id="exhaustive"><a href="#exhaustive" class="headerlink" title="exhaustive"></a><a href="http://dict.youdao.com/w/eng/exhaustive" target="_blank" rel="noopener">exhaustive</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=exhaustive" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪɡˈzɔːstɪv]  us: [ɪɡˈzɔːstɪv]</li><li>详尽的，彻底的，全民的</li></ul></blockquote><h3 id="laboratory"><a href="#laboratory" class="headerlink" title="laboratory"></a><a href="http://dict.youdao.com/w/eng/laboratory" target="_blank" rel="noopener">laboratory</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=laboratory" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ləˈbɒrətri]  us: [ˈlæbrətɔːri]</li><li>实验室</li></ul></blockquote><h3 id="individual"><a href="#individual" class="headerlink" title="individual"></a><a href="http://dict.youdao.com/w/eng/individual" target="_blank" rel="noopener">individual</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=individual" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɪndɪˈvɪdʒuəl]  us: [ˌɪndɪˈvɪdʒuəl]</li><li>个体</li></ul></blockquote><h3 id="forcing-house"><a href="#forcing-house" class="headerlink" title="forcing house"></a><a href="http://dict.youdao.com/w/eng/forcing%20house" target="_blank" rel="noopener">forcing house</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=forcing%20house" type="audio/mpeg"><br></audio></p><blockquote><ul><li>温床</li></ul></blockquote><h3 id="species"><a href="#species" class="headerlink" title="species"></a><a href="http://dict.youdao.com/w/eng/species" target="_blank" rel="noopener">species</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=species" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈspiːʃiːz]  us: [ˈspiːʃiːz]</li><li>种，类</li></ul></blockquote><h3 id="specie"><a href="#specie" class="headerlink" title="specie"></a><a href="http://dict.youdao.com/w/eng/specie" target="_blank" rel="noopener">specie</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=specie" type="audio/mpeg"><br></audio></p><blockquote><ul><li>硬币</li></ul></blockquote><h3 id="secretion"><a href="#secretion" class="headerlink" title="secretion"></a><a href="http://dict.youdao.com/w/eng/secretion" target="_blank" rel="noopener">secretion</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=secretion" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [sɪˈkriːʃn]  us: [sɪˈkriːʃn]</li><li>分泌物</li></ul></blockquote><h3 id="examination"><a href="#examination" class="headerlink" title="examination"></a><a href="http://dict.youdao.com/w/eng/examination" target="_blank" rel="noopener">examination</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=examination" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪɡˌzæmɪˈneɪʃn]  us: [ɪɡˌzæmɪˈneɪʃn]</li><li>调查，审查</li></ul></blockquote><h3 id="compound"><a href="#compound" class="headerlink" title="compound"></a><a href="http://dict.youdao.com/w/eng/compound" target="_blank" rel="noopener">compound</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=compound" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkɒmpaʊnd]  us: [ˈkɑːmpaʊnd]</li><li>复合物</li></ul></blockquote><h3 id="sulphur"><a href="#sulphur" class="headerlink" title="sulphur"></a><a href="http://dict.youdao.com/w/eng/sulphur" target="_blank" rel="noopener">sulphur</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sulphur" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsʌlfə(r)]  us: [ˈsʌlfər]</li><li>硫，硫磺</li></ul></blockquote><h3 id="frontier"><a href="#frontier" class="headerlink" title="frontier"></a><a href="http://dict.youdao.com/w/eng/frontier" target="_blank" rel="noopener">frontier</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=frontier" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈfrʌntɪə(r)]  us: [frʌnˈtɪr]</li><li>边界国界</li></ul></blockquote><h3 id="boundary"><a href="#boundary" class="headerlink" title="boundary"></a><a href="http://dict.youdao.com/w/eng/boundary" target="_blank" rel="noopener">boundary</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=boundary" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈbaʊndri]  us: [ˈbaʊndri]</li><li>边界</li></ul></blockquote><h3 id="ecosystem"><a href="#ecosystem" class="headerlink" title="ecosystem"></a><a href="http://dict.youdao.com/w/eng/ecosystem" target="_blank" rel="noopener">ecosystem</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ecosystem" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈiːkəʊsɪstəm]  us: [ˈiːkəʊsɪstəm]</li><li>生态系统</li></ul></blockquote><h3 id="make-sense"><a href="#make-sense" class="headerlink" title="make sense"></a><a href="http://dict.youdao.com/w/eng/make%20sense" target="_blank" rel="noopener">make sense</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=make%20sense" type="audio/mpeg"><br></audio></p><blockquote><ul><li>合乎情理的</li></ul></blockquote><h3 id="surgeon"><a href="#surgeon" class="headerlink" title="surgeon"></a><a href="http://dict.youdao.com/w/eng/surgeon" target="_blank" rel="noopener">surgeon</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=surgeon" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsɜːdʒən]  us: [ˈsɜːrdʒən]</li><li>外科医生</li></ul></blockquote><h3 id="aversion"><a href="#aversion" class="headerlink" title="aversion"></a><a href="http://dict.youdao.com/w/eng/aversion" target="_blank" rel="noopener">aversion</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=aversion" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [əˈvɜːʃn]  us: [əˈvɜːrʒn]</li><li>厌恶，憎恶</li></ul></blockquote><h3 id="advent"><a href="#advent" class="headerlink" title="advent"></a><a href="http://dict.youdao.com/w/eng/advent" target="_blank" rel="noopener">advent</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=advent" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈædvent]  us: [ˈædvent]</li><li>到来</li></ul></blockquote><h3 id="bar"><a href="#bar" class="headerlink" title="bar"></a><a href="http://dict.youdao.com/w/eng/bar" target="_blank" rel="noopener">bar</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bar" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [bɑː(r)]  us: [bɑːr]</li><li>封堵，阻止，静止</li></ul></blockquote><h3 id="obsolete"><a href="#obsolete" class="headerlink" title="obsolete"></a><a href="http://dict.youdao.com/w/eng/obsolete" target="_blank" rel="noopener">obsolete</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=obsolete" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɒbsəliːt]  us: [ˌɑːbsəˈliːt]</li><li>淘汰的，废弃的，淘汰，废弃</li></ul></blockquote><h3 id="virtually"><a href="#virtually" class="headerlink" title="virtually"></a><a href="http://dict.youdao.com/w/eng/virtually" target="_blank" rel="noopener">virtually</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=virtually" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈvɜːtʃuəli]  us: [ˈvɜːrtʃuəli]</li><li>几乎，差不多，实际上</li></ul></blockquote><h3 id="comeback"><a href="#comeback" class="headerlink" title="comeback"></a><a href="http://dict.youdao.com/w/eng/comeback" target="_blank" rel="noopener">comeback</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=comeback" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkʌmbæk]  us: [ˈkʌmbæk]</li><li>复出，重返，重新受欢迎</li></ul></blockquote><h3 id="intervention"><a href="#intervention" class="headerlink" title="intervention"></a><a href="http://dict.youdao.com/w/eng/intervention" target="_blank" rel="noopener">intervention</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=intervention" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɪntəˈvenʃn]  us: [ˌɪntərˈvenʃn]</li><li>干涉，干预</li></ul></blockquote><h3 id="costly"><a href="#costly" class="headerlink" title="costly"></a><a href="http://dict.youdao.com/w/eng/costly" target="_blank" rel="noopener">costly</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=costly" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkɒstli]  us: [ˈkɔːstli]</li><li>价钱高的;引起困难的;造成损失的</li></ul></blockquote><h3 id="legitimate"><a href="#legitimate" class="headerlink" title="legitimate"></a><a href="http://dict.youdao.com/w/eng/legitimate" target="_blank" rel="noopener">legitimate</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=legitimate" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [lɪˈdʒɪtɪmət]  us: [lɪˈdʒɪtɪmət]</li><li>合法的，正当的</li></ul></blockquote><h3 id="restrictive"><a href="#restrictive" class="headerlink" title="restrictive"></a><a href="http://dict.youdao.com/w/eng/restrictive" target="_blank" rel="noopener">restrictive</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=restrictive" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [rɪˈstrɪktɪv]  us: [rɪˈstrɪktɪv]</li><li>限制的</li></ul></blockquote><h3 id="adverse"><a href="#adverse" class="headerlink" title="adverse"></a><a href="http://dict.youdao.com/w/eng/adverse" target="_blank" rel="noopener">adverse</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=adverse" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈædvɜːs]  us: [ədˈvɜːs]</li><li>不利的</li></ul></blockquote><h3 id="alongside"><a href="#alongside" class="headerlink" title="alongside"></a><a href="http://dict.youdao.com/w/eng/alongside" target="_blank" rel="noopener">alongside</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=alongside" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [əˌlɒŋˈsaɪd]  us: [əˌlɔːŋˈsaɪd]</li><li>在。。。旁边，与。。。并排</li></ul></blockquote><h3 id="insure"><a href="#insure" class="headerlink" title="insure"></a><a href="http://dict.youdao.com/w/eng/insure" target="_blank" rel="noopener">insure</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=insure" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˈʃʊə(r)]  us: [ɪnˈʃɔː(r)]</li><li>保险公司，承保人</li></ul></blockquote><h3 id="further"><a href="#further" class="headerlink" title="further"></a><a href="http://dict.youdao.com/w/eng/further" target="_blank" rel="noopener">further</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=further" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈfɜːðə(r)]  us: [ˈfɜːrðər]</li><li>进一步地</li></ul></blockquote><h3 id="molecular"><a href="#molecular" class="headerlink" title="molecular"></a><a href="http://dict.youdao.com/w/eng/molecular" target="_blank" rel="noopener">molecular</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=molecular" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [məˈlekjələ(r)]  us: [məˈlekjələr]</li><li>分子的</li></ul></blockquote><h3 id="targeted-drugs"><a href="#targeted-drugs" class="headerlink" title="targeted drugs"></a><a href="http://dict.youdao.com/w/eng/targeted%20drugs" target="_blank" rel="noopener">targeted drugs</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=targeted%20drugs" type="audio/mpeg"><br></audio></p><blockquote><ul><li>靶向药</li></ul></blockquote><h3 id="Alzheimer‘s-disease"><a href="#Alzheimer‘s-disease" class="headerlink" title="Alzheimer‘s disease"></a><a href="http://dict.youdao.com/w/eng/Alzheimer‘s%20disease" target="_blank" rel="noopener">Alzheimer‘s disease</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Alzheimer‘s%20disease" type="audio/mpeg"><br></audio></p><blockquote><ul><li>阿兹海默症</li></ul></blockquote><h3 id="protein"><a href="#protein" class="headerlink" title="protein"></a><a href="http://dict.youdao.com/w/eng/protein" target="_blank" rel="noopener">protein</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=protein" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈprəʊtiːn]  us: [ˈprəʊtiːn]</li><li>蛋白</li></ul></blockquote><h3 id="amyloid"><a href="#amyloid" class="headerlink" title="amyloid"></a><a href="http://dict.youdao.com/w/eng/amyloid" target="_blank" rel="noopener">amyloid</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=amyloid" type="audio/mpeg"><br></audio></p><blockquote><ul><li>淀粉的</li></ul></blockquote><h3 id="amylum"><a href="#amylum" class="headerlink" title="amylum"></a><a href="http://dict.youdao.com/w/eng/amylum" target="_blank" rel="noopener">amylum</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=amylum" type="audio/mpeg"><br></audio></p><blockquote><ul><li>淀粉</li></ul></blockquote><h3 id="clump-into"><a href="#clump-into" class="headerlink" title="clump into"></a><a href="http://dict.youdao.com/w/eng/clump%20into" target="_blank" rel="noopener">clump into</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=clump%20into" type="audio/mpeg"><br></audio></p><blockquote><ul><li>聚拢</li></ul></blockquote><h3 id="afflicted"><a href="#afflicted" class="headerlink" title="afflicted"></a><a href="http://dict.youdao.com/w/eng/afflicted" target="_blank" rel="noopener">afflicted</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=afflicted" type="audio/mpeg"><br></audio></p><blockquote><ul><li>痛苦的，受折磨的</li></ul></blockquote><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a><a href="http://dict.youdao.com/w/eng/yield" target="_blank" rel="noopener">yield</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=yield" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [jiːld]  us: [jiːld]</li><li>产生 yield the results we hoped for</li></ul></blockquote><h3 id="novel-pathways"><a href="#novel-pathways" class="headerlink" title="novel pathways"></a><a href="http://dict.youdao.com/w/eng/novel%20pathways" target="_blank" rel="noopener">novel pathways</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=novel%20pathways" type="audio/mpeg"><br></audio></p><blockquote><ul><li>新的路径</li></ul></blockquote><h3 id="tackle"><a href="#tackle" class="headerlink" title="tackle"></a><a href="http://dict.youdao.com/w/eng/tackle" target="_blank" rel="noopener">tackle</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tackle" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtækl]  us: [ˈtækl]</li><li>解决</li></ul></blockquote><h3 id="incredibly"><a href="#incredibly" class="headerlink" title="incredibly"></a><a href="http://dict.youdao.com/w/eng/incredibly" target="_blank" rel="noopener">incredibly</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=incredibly" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˈkredəbli]  us: [ɪnˈkredəbli]</li><li>极其地，令人难以置信地 incredibly complex disease</li></ul></blockquote><h3 id="invasive"><a href="#invasive" class="headerlink" title="invasive"></a><a href="http://dict.youdao.com/w/eng/invasive" target="_blank" rel="noopener">invasive</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=invasive" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˈveɪsɪv]  us: [ɪnˈveɪsɪv]</li><li>开刀的，侵入的 noninvasive 无创的</li></ul></blockquote><h3 id="freestanding"><a href="#freestanding" class="headerlink" title="freestanding"></a><a href="http://dict.youdao.com/w/eng/freestanding" target="_blank" rel="noopener">freestanding</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=freestanding" type="audio/mpeg"><br></audio></p><blockquote><ul><li>独立的</li></ul></blockquote><h3 id="convolutional-neural-network"><a href="#convolutional-neural-network" class="headerlink" title="convolutional neural network"></a><a href="http://dict.youdao.com/w/eng/convolutional%20neural%20network" target="_blank" rel="noopener">convolutional neural network</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=convolutional%20neural%20network" type="audio/mpeg"><br></audio></p><blockquote><ul><li>卷积神经网络</li></ul></blockquote><h3 id="neuron"><a href="#neuron" class="headerlink" title="neuron"></a><a href="http://dict.youdao.com/w/eng/neuron" target="_blank" rel="noopener">neuron</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=neuron" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈnjʊərɒn]  us: [ˈnʊrɑːn]</li><li>神经元</li></ul></blockquote><h3 id="nerve"><a href="#nerve" class="headerlink" title="nerve"></a><a href="http://dict.youdao.com/w/eng/nerve" target="_blank" rel="noopener">nerve</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=nerve" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [nɜːv]  us: [nɜːrv]</li><li>神经</li></ul></blockquote><h3 id="radiology"><a href="#radiology" class="headerlink" title="radiology"></a><a href="http://dict.youdao.com/w/eng/radiology" target="_blank" rel="noopener">radiology</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=radiology" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌreɪdiˈɒlədʒi]  us: [ˌreɪdiˈɑːlədʒi]</li><li>放射学</li></ul></blockquote><h3 id="subtype"><a href="#subtype" class="headerlink" title="subtype"></a><a href="http://dict.youdao.com/w/eng/subtype" target="_blank" rel="noopener">subtype</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=subtype" type="audio/mpeg"><br></audio></p><blockquote><ul><li>亚型</li></ul></blockquote><h3 id="positron"><a href="#positron" class="headerlink" title="positron"></a><a href="http://dict.youdao.com/w/eng/positron" target="_blank" rel="noopener">positron</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=positron" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈpɒzɪtrɒn]  us: [ˈpɑːzɪtrɑːn]</li><li>正电子</li></ul></blockquote><h3 id="negatron"><a href="#negatron" class="headerlink" title="negatron"></a><a href="http://dict.youdao.com/w/eng/negatron" target="_blank" rel="noopener">negatron</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=negatron" type="audio/mpeg"><br></audio></p><blockquote><ul><li>负电子</li></ul></blockquote><h3 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a><a href="http://dict.youdao.com/w/eng/fluid" target="_blank" rel="noopener">fluid</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fluid" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈfluːɪd]  us: [ˈfluːɪd]</li><li>液体</li></ul></blockquote><h3 id="monoclonal-antibody"><a href="#monoclonal-antibody" class="headerlink" title="monoclonal antibody"></a><a href="http://dict.youdao.com/w/eng/monoclonal%20antibody" target="_blank" rel="noopener">monoclonal antibody</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=monoclonal%20antibody" type="audio/mpeg"><br></audio></p><blockquote><ul><li>单克隆抗体</li></ul></blockquote><h3 id="ultimately"><a href="#ultimately" class="headerlink" title="ultimately"></a><a href="http://dict.youdao.com/w/eng/ultimately" target="_blank" rel="noopener">ultimately</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ultimately" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈʌltɪmətli]  us: [ˈʌltɪmətli]</li><li>最终</li></ul></blockquote><h3 id="diabetes"><a href="#diabetes" class="headerlink" title="diabetes"></a><a href="http://dict.youdao.com/w/eng/diabetes" target="_blank" rel="noopener">diabetes</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=diabetes" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌdaɪəˈbiːtiːz]  us: [ˌdaɪəˈbiːtiːz]</li><li>糖尿病</li></ul></blockquote><h3 id="tablet"><a href="#tablet" class="headerlink" title="tablet"></a><a href="http://dict.youdao.com/w/eng/tablet" target="_blank" rel="noopener">tablet</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tablet" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtæblət]  us: [ˈtæblət]</li><li>药片</li></ul></blockquote><h3 id="pill"><a href="#pill" class="headerlink" title="pill"></a><a href="http://dict.youdao.com/w/eng/pill" target="_blank" rel="noopener">pill</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=pill" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [pɪl]  us: [pɪl]</li><li>药丸</li></ul></blockquote><h3 id="hypertension"><a href="#hypertension" class="headerlink" title="hypertension"></a><a href="http://dict.youdao.com/w/eng/hypertension" target="_blank" rel="noopener">hypertension</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hypertension" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌhaɪpəˈtenʃn]  us: [ˌhaɪpərˈtenʃn]</li><li>高血压</li></ul></blockquote><h3 id="hyperlipidemia"><a href="#hyperlipidemia" class="headerlink" title="hyperlipidemia"></a><a href="http://dict.youdao.com/w/eng/hyperlipidemia" target="_blank" rel="noopener">hyperlipidemia</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hyperlipidemia" type="audio/mpeg"><br></audio></p><blockquote><ul><li>高血脂</li></ul></blockquote><h3 id="prescribe"><a href="#prescribe" class="headerlink" title="prescribe"></a><a href="http://dict.youdao.com/w/eng/prescribe" target="_blank" rel="noopener">prescribe</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=prescribe" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [prɪˈskraɪb]  us: [prɪˈskraɪb]</li><li>开处方</li></ul></blockquote><h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a><a href="http://dict.youdao.com/w/eng/lower" target="_blank" rel="noopener">lower</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=lower" type="audio/mpeg"><br></audio></p><blockquote><ul><li>降低</li></ul></blockquote><h3 id="cholesterol"><a href="#cholesterol" class="headerlink" title="cholesterol"></a><a href="http://dict.youdao.com/w/eng/cholesterol" target="_blank" rel="noopener">cholesterol</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cholesterol" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəˈlestərɒl]  us: [kəˈlestərɔːl]</li><li>胆固醇</li></ul></blockquote><h3 id="prescribed-drug"><a href="#prescribed-drug" class="headerlink" title="prescribed drug"></a><a href="http://dict.youdao.com/w/eng/prescribed%20drug" target="_blank" rel="noopener">prescribed drug</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=prescribed%20drug" type="audio/mpeg"><br></audio></p><blockquote><ul><li>处方药</li></ul></blockquote><h3 id="clinical-trial"><a href="#clinical-trial" class="headerlink" title="clinical trial"></a><a href="http://dict.youdao.com/w/eng/clinical%20trial" target="_blank" rel="noopener">clinical trial</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=clinical%20trial" type="audio/mpeg"><br></audio></p><blockquote><ul><li>临床试验</li></ul></blockquote><h2 id="10-Feb"><a href="#10-Feb" class="headerlink" title="10 Feb"></a>10 Feb</h2><h3 id="thorough"><a href="#thorough" class="headerlink" title="thorough"></a><a href="http://dict.youdao.com/w/eng/thorough" target="_blank" rel="noopener">thorough</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=thorough" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈθʌrə]  us: [ˈθɜːrəʊ]</li><li>彻底的;完全的;深入的;</li></ul></blockquote><h3 id="tense"><a href="#tense" class="headerlink" title="tense"></a><a href="http://dict.youdao.com/w/eng/tense" target="_blank" rel="noopener">tense</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tense" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [tens]  us: [tens]</li><li>时态</li></ul></blockquote><h3 id="trek"><a href="#trek" class="headerlink" title="trek"></a><a href="http://dict.youdao.com/w/eng/trek" target="_blank" rel="noopener">trek</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=trek" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [trek]  us: [trek]</li><li>长途跋涉</li></ul></blockquote><h3 id="bedding"><a href="#bedding" class="headerlink" title="bedding"></a><a href="http://dict.youdao.com/w/eng/bedding" target="_blank" rel="noopener">bedding</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=bedding" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈbedɪŋ]  us: [ˈbedɪŋ]</li><li>床上用品</li></ul></blockquote><h3 id="so-forth"><a href="#so-forth" class="headerlink" title="so forth"></a><a href="http://dict.youdao.com/w/eng/so%20forth" target="_blank" rel="noopener">so forth</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=so%20forth" type="audio/mpeg"><br></audio></p><blockquote><ul><li>诸如此类</li></ul></blockquote><h3 id="rucksack"><a href="#rucksack" class="headerlink" title="rucksack"></a><a href="http://dict.youdao.com/w/eng/rucksack" target="_blank" rel="noopener">rucksack</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=rucksack" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈrʌksæk]  us: [ˈrʌksæk]</li><li>登山背包</li></ul></blockquote><h3 id="marvellous"><a href="#marvellous" class="headerlink" title="marvellous"></a><a href="http://dict.youdao.com/w/eng/marvellous" target="_blank" rel="noopener">marvellous</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=marvellous" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmɑːvələs]  us: [ˈmɑːrvələs]</li><li>极好的，非凡的</li></ul></blockquote><h3 id="spectacular"><a href="#spectacular" class="headerlink" title="spectacular"></a><a href="http://dict.youdao.com/w/eng/spectacular" target="_blank" rel="noopener">spectacular</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=spectacular" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [spekˈtækjələ(r)]  us: [spekˈtækjələr]</li><li>壮观的</li></ul></blockquote><h3 id="snow-coverd-peaks-and-valleys"><a href="#snow-coverd-peaks-and-valleys" class="headerlink" title="snow-coverd peaks and valleys"></a><a href="http://dict.youdao.com/w/eng/snow-coverd%20peaks%20and%20valleys" target="_blank" rel="noopener">snow-coverd peaks and valleys</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=snow-coverd%20peaks%20and%20valleys" type="audio/mpeg"><br></audio></p><blockquote><ul><li>被雪覆盖的峰谷</li></ul></blockquote><h3 id="village"><a href="#village" class="headerlink" title="village"></a><a href="http://dict.youdao.com/w/eng/village" target="_blank" rel="noopener">village</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=village" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈvɪlɪdʒ]  us: [ˈvɪlɪdʒ]</li><li>村庄</li></ul></blockquote><h3 id="deliberately"><a href="#deliberately" class="headerlink" title="deliberately"></a><a href="http://dict.youdao.com/w/eng/deliberately" target="_blank" rel="noopener">deliberately</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=deliberately" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [dɪˈlɪbərətli]  us: [dɪˈlɪbərətli]</li><li>故意地</li></ul></blockquote><h3 id="minimize"><a href="#minimize" class="headerlink" title="minimize"></a><a href="http://dict.youdao.com/w/eng/minimize" target="_blank" rel="noopener">minimize</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=minimize" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmɪnɪmaɪz]  us: [ˈmɪnɪmaɪz]</li><li>减小</li></ul></blockquote><h3 id="outline"><a href="#outline" class="headerlink" title="outline"></a><a href="http://dict.youdao.com/w/eng/outline" target="_blank" rel="noopener">outline</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=outline" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈaʊtlaɪn]  us: [ˈaʊtlaɪn]</li><li>概述</li></ul></blockquote><h3 id="itinerary"><a href="#itinerary" class="headerlink" title="itinerary"></a><a href="http://dict.youdao.com/w/eng/itinerary" target="_blank" rel="noopener">itinerary</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=itinerary" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [aɪˈtɪnərəri]  us: [aɪˈtɪnəreri]</li><li>行程</li></ul></blockquote><h3 id="carving"><a href="#carving" class="headerlink" title="carving"></a><a href="http://dict.youdao.com/w/eng/carving" target="_blank" rel="noopener">carving</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=carving" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkɑːvɪŋ]  us: [ˈkɑːrvɪŋ]</li><li>雕刻品</li></ul></blockquote><h3 id="cigar"><a href="#cigar" class="headerlink" title="cigar"></a><a href="http://dict.youdao.com/w/eng/cigar" target="_blank" rel="noopener">cigar</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cigar" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [sɪˈɡɑː(r)]  us: [sɪˈɡɑːr]</li><li>雪茄</li></ul></blockquote><h3 id="right-now"><a href="#right-now" class="headerlink" title="right now"></a><a href="http://dict.youdao.com/w/eng/right%20now" target="_blank" rel="noopener">right now</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=right%20now" type="audio/mpeg"><br></audio></p><blockquote><ul><li>现在，此时此刻，at present</li></ul></blockquote><h3 id="naval-rescue"><a href="#naval-rescue" class="headerlink" title="naval rescue"></a><a href="http://dict.youdao.com/w/eng/naval%20rescue" target="_blank" rel="noopener">naval rescue</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=naval%20rescue" type="audio/mpeg"><br></audio></p><blockquote><ul><li>海军救援</li></ul></blockquote><h3 id="luxury"><a href="#luxury" class="headerlink" title="luxury"></a><a href="http://dict.youdao.com/w/eng/luxury" target="_blank" rel="noopener">luxury</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=luxury" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈlʌkʃəri]  us: [ˈlʌkʃəri]</li><li>奢侈</li></ul></blockquote><h3 id="jet-lag"><a href="#jet-lag" class="headerlink" title="jet lag"></a><a href="http://dict.youdao.com/w/eng/jet%20lag" target="_blank" rel="noopener">jet lag</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=jet%20lag" type="audio/mpeg"><br></audio></p><blockquote><ul><li>倒时差</li></ul></blockquote><h3 id="inviting"><a href="#inviting" class="headerlink" title="inviting"></a><a href="http://dict.youdao.com/w/eng/inviting" target="_blank" rel="noopener">inviting</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=inviting" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˈvaɪtɪŋ]  us: [ɪnˈvaɪtɪŋ]</li><li>吸引人的</li></ul></blockquote><h3 id="sleek"><a href="#sleek" class="headerlink" title="sleek"></a><a href="http://dict.youdao.com/w/eng/sleek" target="_blank" rel="noopener">sleek</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sleek" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [sliːk]  us: [sliːk]</li><li>造型优美的，线条流畅的;</li></ul></blockquote><h3 id="undecidable"><a href="#undecidable" class="headerlink" title="undecidable"></a><a href="http://dict.youdao.com/w/eng/undecidable" target="_blank" rel="noopener">undecidable</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=undecidable" type="audio/mpeg"><br></audio></p><blockquote><ul><li>不可判定的；不可决定的</li></ul></blockquote><h3 id="computation"><a href="#computation" class="headerlink" title="computation"></a><a href="http://dict.youdao.com/w/eng/computation" target="_blank" rel="noopener">computation</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=computation" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌkɒmpjuˈteɪʃn]  us: [ˌkɑːmpjuˈteɪʃn]</li><li>计算</li></ul></blockquote><h3 id="presumably"><a href="#presumably" class="headerlink" title="presumably"></a><a href="http://dict.youdao.com/w/eng/presumably" target="_blank" rel="noopener">presumably</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=presumably" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [prɪˈzjuːməbli]  us: [prɪˈzuːməbli]</li><li>可能，大概</li></ul></blockquote><h3 id="reasonably"><a href="#reasonably" class="headerlink" title="reasonably"></a><a href="http://dict.youdao.com/w/eng/reasonably" target="_blank" rel="noopener">reasonably</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=reasonably" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈriːznəbli]  us: [ˈriːznəbli]</li><li>尚可，合理的</li></ul></blockquote><h3 id="forefront"><a href="#forefront" class="headerlink" title="forefront"></a><a href="http://dict.youdao.com/w/eng/forefront" target="_blank" rel="noopener">forefront</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=forefront" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈfɔːfrʌnt]  us: [ˈfɔːrfrʌnt]</li><li>前沿</li></ul></blockquote><h3 id="spotlight"><a href="#spotlight" class="headerlink" title="spotlight"></a><a href="http://dict.youdao.com/w/eng/spotlight" target="_blank" rel="noopener">spotlight</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=spotlight" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈspɒtlaɪt]  us: [ˈspɑːtlaɪt]</li><li>特别关注</li></ul></blockquote><h3 id="midwife"><a href="#midwife" class="headerlink" title="midwife"></a><a href="http://dict.youdao.com/w/eng/midwife" target="_blank" rel="noopener">midwife</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=midwife" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmɪdwaɪf]  us: [ˈmɪdwaɪf]</li><li>接生婆</li></ul></blockquote><h3 id="midwifery"><a href="#midwifery" class="headerlink" title="midwifery"></a><a href="http://dict.youdao.com/w/eng/midwifery" target="_blank" rel="noopener">midwifery</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=midwifery" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌmɪdˈwɪfəri]  us: [ˌmɪdˈwɪfəri]</li><li>助产</li></ul></blockquote><h3 id="ob-gyn"><a href="#ob-gyn" class="headerlink" title="ob-gyn"></a><a href="http://dict.youdao.com/w/eng/ob-gyn" target="_blank" rel="noopener">ob-gyn</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ob-gyn" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɒb ˈɡaɪn]  us: [ˌɑːb ˈɡaɪn]</li><li>妇产科医生</li></ul></blockquote><h3 id="maternity-care"><a href="#maternity-care" class="headerlink" title="maternity care"></a><a href="http://dict.youdao.com/w/eng/maternity%20care" target="_blank" rel="noopener">maternity care</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=maternity%20care" type="audio/mpeg"><br></audio></p><blockquote><ul><li>产妇护理</li></ul></blockquote><h3 id="astronomical"><a href="#astronomical" class="headerlink" title="astronomical"></a><a href="http://dict.youdao.com/w/eng/astronomical" target="_blank" rel="noopener">astronomical</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=astronomical" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌæstrəˈnɒmɪkl]  us: [ˌæstrəˈnɑːmɪkl]</li><li>极其巨大的，天文学的</li></ul></blockquote><h3 id="physiological"><a href="#physiological" class="headerlink" title="physiological"></a><a href="http://dict.youdao.com/w/eng/physiological" target="_blank" rel="noopener">physiological</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=physiological" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌfɪziəˈlɒdʒɪkl]  us: [ˌfɪziəˈlɑːdʒɪkl]</li><li>生理学</li></ul></blockquote><h3 id="obstetrician"><a href="#obstetrician" class="headerlink" title="obstetrician"></a><a href="http://dict.youdao.com/w/eng/obstetrician" target="_blank" rel="noopener">obstetrician</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=obstetrician" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɒbstəˈtrɪʃn]  us: [ˌɑːbstəˈtrɪʃn]</li><li>产科医生</li></ul></blockquote><h3 id="undergo"><a href="#undergo" class="headerlink" title="undergo"></a><a href="http://dict.youdao.com/w/eng/undergo" target="_blank" rel="noopener">undergo</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=undergo" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌʌndəˈɡəʊ]  us: [ˌʌndərˈɡəʊ]</li><li>经过</li></ul></blockquote><h3 id="intensive-training"><a href="#intensive-training" class="headerlink" title="intensive training"></a><a href="http://dict.youdao.com/w/eng/intensive%20training" target="_blank" rel="noopener">intensive training</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=intensive%20training" type="audio/mpeg"><br></audio></p><blockquote><ul><li>密集训练</li></ul></blockquote><h3 id="deliver-vaginally"><a href="#deliver-vaginally" class="headerlink" title="deliver vaginally"></a><a href="http://dict.youdao.com/w/eng/deliver%20vaginally" target="_blank" rel="noopener">deliver vaginally</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=deliver%20vaginally" type="audio/mpeg"><br></audio></p><blockquote><ul><li>阴道分娩</li></ul></blockquote><h3 id="anesthecia"><a href="#anesthecia" class="headerlink" title="anesthecia"></a><a href="http://dict.youdao.com/w/eng/anesthecia" target="_blank" rel="noopener">anesthecia</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=anesthecia" type="audio/mpeg"><br></audio></p><blockquote><ul><li>麻醉</li></ul></blockquote><h3 id="seamlessly"><a href="#seamlessly" class="headerlink" title="seamlessly"></a><a href="http://dict.youdao.com/w/eng/seamlessly" target="_blank" rel="noopener">seamlessly</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=seamlessly" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsiːmləsli]  us: [ˈsiːmləsli]</li><li>无缝地</li></ul></blockquote><h3 id="transferred"><a href="#transferred" class="headerlink" title="transferred"></a><a href="http://dict.youdao.com/w/eng/transferred" target="_blank" rel="noopener">transferred</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=transferred" type="audio/mpeg"><br></audio></p><blockquote><ul><li>运输</li></ul></blockquote><h3 id="medicaid"><a href="#medicaid" class="headerlink" title="medicaid"></a><a href="http://dict.youdao.com/w/eng/medicaid" target="_blank" rel="noopener">medicaid</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=medicaid" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmedɪkeɪd]  us: [ˈmedɪkeɪd]</li><li>医疗补助</li></ul></blockquote><h3 id="amenity"><a href="#amenity" class="headerlink" title="amenity"></a><a href="http://dict.youdao.com/w/eng/amenity" target="_blank" rel="noopener">amenity</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=amenity" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [əˈmiːnəti]  us: [əˈmenəti]</li><li>便利设施</li></ul></blockquote><h3 id="spacious"><a href="#spacious" class="headerlink" title="spacious"></a><a href="http://dict.youdao.com/w/eng/spacious" target="_blank" rel="noopener">spacious</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=spacious" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈspeɪʃəs]  us: [ˈspeɪʃəs]</li><li>宽敞的</li></ul></blockquote><h3 id="scrutiny"><a href="#scrutiny" class="headerlink" title="scrutiny"></a><a href="http://dict.youdao.com/w/eng/scrutiny" target="_blank" rel="noopener">scrutiny</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=scrutiny" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈskruːtəni]  us: [ˈskruːtəni]</li><li>审查</li></ul></blockquote><h3 id="lately-1"><a href="#lately-1" class="headerlink" title="lately"></a><a href="http://dict.youdao.com/w/eng/lately" target="_blank" rel="noopener">lately</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=lately" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈleɪtli]  us: [ˈleɪtli]</li><li>最近</li></ul></blockquote><h3 id="repel"><a href="#repel" class="headerlink" title="repel"></a><a href="http://dict.youdao.com/w/eng/repel" target="_blank" rel="noopener">repel</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=repel" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [rɪˈpel]  us: [rɪˈpel]</li><li>击退</li></ul></blockquote><h3 id="attacker"><a href="#attacker" class="headerlink" title="attacker"></a><a href="http://dict.youdao.com/w/eng/attacker" target="_blank" rel="noopener">attacker</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=attacker" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [əˈtækə(r)]  us: [əˈtækər]</li><li>袭击者</li></ul></blockquote><h3 id="auditorium"><a href="#auditorium" class="headerlink" title="auditorium"></a><a href="http://dict.youdao.com/w/eng/auditorium" target="_blank" rel="noopener">auditorium</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=auditorium" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɔːdɪˈtɔːriəm]  us: [ˌɔːdɪˈtɔːriəm]</li><li>礼堂</li></ul></blockquote><h3 id="auditory"><a href="#auditory" class="headerlink" title="auditory"></a><a href="http://dict.youdao.com/w/eng/auditory" target="_blank" rel="noopener">auditory</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=auditory" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɔːdətri]  us: [ˈɔːdətɔːri]</li><li>听觉</li></ul></blockquote><h3 id="visual"><a href="#visual" class="headerlink" title="visual"></a><a href="http://dict.youdao.com/w/eng/visual" target="_blank" rel="noopener">visual</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=visual" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈvɪʒuəl]  us: [ˈvɪʒuəl]</li><li>视觉</li></ul></blockquote><h3 id="martial-music"><a href="#martial-music" class="headerlink" title="martial music"></a><a href="http://dict.youdao.com/w/eng/martial%20music" target="_blank" rel="noopener">martial music</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=martial%20music" type="audio/mpeg"><br></audio></p><blockquote><ul><li>军歌</li></ul></blockquote><h3 id="folk-music"><a href="#folk-music" class="headerlink" title="folk music"></a><a href="http://dict.youdao.com/w/eng/folk%20music" target="_blank" rel="noopener">folk music</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=folk%20music" type="audio/mpeg"><br></audio></p><blockquote><ul><li>民乐</li></ul></blockquote><h3 id="religious-chant"><a href="#religious-chant" class="headerlink" title="religious chant"></a><a href="http://dict.youdao.com/w/eng/religious%20chant" target="_blank" rel="noopener">religious chant</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=religious%20chant" type="audio/mpeg"><br></audio></p><blockquote><ul><li>宗教音乐</li></ul></blockquote><h3 id="propagate"><a href="#propagate" class="headerlink" title="propagate"></a><a href="http://dict.youdao.com/w/eng/propagate" target="_blank" rel="noopener">propagate</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=propagate" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈprɒpəɡeɪt]  us: [ˈprɑːpəɡeɪt]</li><li>传播，宣传，繁殖，增殖</li></ul></blockquote><h3 id="biologist"><a href="#biologist" class="headerlink" title="biologist"></a><a href="http://dict.youdao.com/w/eng/biologist" target="_blank" rel="noopener">biologist</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=biologist" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [baɪˈɒlədʒɪst]  us: [baɪˈɑːlədʒɪst]</li><li>生物学家</li></ul></blockquote><h3 id="livestock"><a href="#livestock" class="headerlink" title="livestock"></a><a href="http://dict.youdao.com/w/eng/livestock" target="_blank" rel="noopener">livestock</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=livestock" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈlaɪvstɒk]  us: [ˈlaɪvstɑːk]</li><li>家畜，牲畜</li></ul></blockquote><h3 id="engage-in-child-labour"><a href="#engage-in-child-labour" class="headerlink" title="engage in child labour"></a><a href="http://dict.youdao.com/w/eng/engage%20in%20child%20labour" target="_blank" rel="noopener">engage in child labour</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=engage%20in%20child%20labour" type="audio/mpeg"><br></audio></p><blockquote><ul><li>雇佣童工</li></ul></blockquote><h3 id="enemy"><a href="#enemy" class="headerlink" title="enemy"></a><a href="http://dict.youdao.com/w/eng/enemy" target="_blank" rel="noopener">enemy</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=enemy" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈenəmi]  us: [ˈenəmi]</li><li>敌军</li></ul></blockquote><h3 id="ceaselessly"><a href="#ceaselessly" class="headerlink" title="ceaselessly"></a><a href="http://dict.youdao.com/w/eng/ceaselessly" target="_blank" rel="noopener">ceaselessly</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=ceaselessly" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsiːsləsli]  us: [ˈsiːsləsli]</li><li>不停的</li></ul></blockquote><h3 id="cultural-transmission"><a href="#cultural-transmission" class="headerlink" title="cultural transmission"></a><a href="http://dict.youdao.com/w/eng/cultural%20transmission" target="_blank" rel="noopener">cultural transmission</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cultural%20transmission" type="audio/mpeg"><br></audio></p><blockquote><ul><li>文化传承</li></ul></blockquote><h3 id="gene"><a href="#gene" class="headerlink" title="gene"></a><a href="http://dict.youdao.com/w/eng/gene" target="_blank" rel="noopener">gene</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=gene" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [dʒiːn]  us: [dʒiːn]</li><li>基因</li></ul></blockquote><h3 id="genetic"><a href="#genetic" class="headerlink" title="genetic"></a><a href="http://dict.youdao.com/w/eng/genetic" target="_blank" rel="noopener">genetic</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=genetic" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [dʒəˈnetɪk]  us: [dʒəˈnetɪk]</li><li>基因的，遗传学的</li></ul></blockquote><h3 id="cultural-continuity"><a href="#cultural-continuity" class="headerlink" title="cultural continuity"></a><a href="http://dict.youdao.com/w/eng/cultural%20continuity" target="_blank" rel="noopener">cultural continuity</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cultural%20continuity" type="audio/mpeg"><br></audio></p><blockquote><ul><li>文化延续</li></ul></blockquote><h3 id="herd"><a href="#herd" class="headerlink" title="herd"></a><a href="http://dict.youdao.com/w/eng/herd" target="_blank" rel="noopener">herd</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=herd" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [hɜːd]  us: [hɜːrd]</li><li>兽群</li></ul></blockquote><h3 id="sophisticated"><a href="#sophisticated" class="headerlink" title="sophisticated"></a><a href="http://dict.youdao.com/w/eng/sophisticated" target="_blank" rel="noopener">sophisticated</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sophisticated" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [səˈfɪstɪkeɪtɪd]  us: [səˈfɪstɪkeɪtɪd]</li><li>见多识广的，老练的，复杂巧妙的，先进的，精密的</li></ul></blockquote><h3 id="agribusiness"><a href="#agribusiness" class="headerlink" title="agribusiness"></a><a href="http://dict.youdao.com/w/eng/agribusiness" target="_blank" rel="noopener">agribusiness</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=agribusiness" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈæɡrɪbɪznəs]  us: [ˈæɡrɪbɪznəs]</li><li>农业综合企业</li></ul></blockquote><h3 id="herd-1"><a href="#herd-1" class="headerlink" title="herd"></a><a href="http://dict.youdao.com/w/eng/herd" target="_blank" rel="noopener">herd</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=herd" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [hɜːd]  us: [hɜːrd]</li><li>牧群</li></ul></blockquote><h3 id="be-totally-overtaken-by"><a href="#be-totally-overtaken-by" class="headerlink" title="be totally overtaken by"></a><a href="http://dict.youdao.com/w/eng/be%20totally%20overtaken%20by" target="_blank" rel="noopener">be totally overtaken by</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=be%20totally%20overtaken%20by" type="audio/mpeg"><br></audio></p><blockquote><ul><li>被。。。所赶超</li></ul></blockquote><h3 id="sustainable"><a href="#sustainable" class="headerlink" title="sustainable"></a><a href="http://dict.youdao.com/w/eng/sustainable" target="_blank" rel="noopener">sustainable</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sustainable" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [səˈsteɪnəbl]  us: [səˈsteɪnəbl]</li><li>可持续的</li></ul></blockquote><h2 id="9-Feb"><a href="#9-Feb" class="headerlink" title="9 Feb"></a>9 Feb</h2><h3 id="anticipate"><a href="#anticipate" class="headerlink" title="anticipate"></a><a href="http://dict.youdao.com/w/eng/anticipate" target="_blank" rel="noopener">anticipate</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=anticipate" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ænˈtɪsɪpeɪt]  us: [ænˈtɪsɪpeɪt]</li><li>预料</li></ul></blockquote><h3 id="stimulus"><a href="#stimulus" class="headerlink" title="stimulus"></a><a href="http://dict.youdao.com/w/eng/stimulus" target="_blank" rel="noopener">stimulus</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=stimulus" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈstɪmjələs]  us: [ˈstɪmjələs]</li><li>刺激</li></ul></blockquote><h3 id="explicitly"><a href="#explicitly" class="headerlink" title="explicitly"></a><a href="http://dict.youdao.com/w/eng/explicitly" target="_blank" rel="noopener">explicitly</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=explicitly" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪkˈsplɪsɪtli]  us: [ɪkˈsplɪsɪtli]</li><li>明确的</li></ul></blockquote><h3 id="flashy"><a href="#flashy" class="headerlink" title="flashy"></a><a href="http://dict.youdao.com/w/eng/flashy" target="_blank" rel="noopener">flashy</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=flashy" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈflæʃi]  us: [ˈflæʃi]</li><li>俗艳的</li></ul></blockquote><h3 id="rigor"><a href="#rigor" class="headerlink" title="rigor"></a><a href="http://dict.youdao.com/w/eng/rigor" target="_blank" rel="noopener">rigor</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=rigor" type="audio/mpeg"><br></audio></p><blockquote><ul><li>僵硬的</li></ul></blockquote><h3 id="comparatively"><a href="#comparatively" class="headerlink" title="comparatively"></a><a href="http://dict.youdao.com/w/eng/comparatively" target="_blank" rel="noopener">comparatively</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=comparatively" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəmˈpærətɪvli]  us: [kəmˈpærətɪvli]</li><li>相对地</li></ul></blockquote><h3 id="cheapen"><a href="#cheapen" class="headerlink" title="cheapen"></a><a href="http://dict.youdao.com/w/eng/cheapen" target="_blank" rel="noopener">cheapen</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cheapen" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtʃiːpən]  us: [ˈtʃiːpən]</li><li>使贬值;贬低</li></ul></blockquote><h3 id="refute"><a href="#refute" class="headerlink" title="refute"></a><a href="http://dict.youdao.com/w/eng/refute" target="_blank" rel="noopener">refute</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=refute" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [rɪˈfjuːt]  us: [rɪˈfjuːt]</li><li>驳斥</li></ul></blockquote><h2 id="8-Feb"><a href="#8-Feb" class="headerlink" title="8 Feb"></a>8 Feb</h2><h3 id="counter"><a href="#counter" class="headerlink" title="counter"></a><a href="http://dict.youdao.com/w/eng/counter" target="_blank" rel="noopener">counter</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=counter" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkaʊntə(r)]  us: [ˈkaʊntər]</li><li>逆向的，相反的</li></ul></blockquote><h3 id="fascinating"><a href="#fascinating" class="headerlink" title="fascinating"></a><a href="http://dict.youdao.com/w/eng/fascinating" target="_blank" rel="noopener">fascinating</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fascinating" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈfæsɪneɪtɪŋ]  us: [ˈfæsɪneɪtɪŋ]</li><li>迷人的</li></ul></blockquote><h3 id="theoretical"><a href="#theoretical" class="headerlink" title="theoretical"></a><a href="http://dict.youdao.com/w/eng/theoretical" target="_blank" rel="noopener">theoretical</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=theoretical" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌθɪəˈretɪkl]  us: [ˌθiːəˈretɪkl]</li><li>理论上的</li></ul></blockquote><h3 id="infinity"><a href="#infinity" class="headerlink" title="infinity"></a><a href="http://dict.youdao.com/w/eng/infinity" target="_blank" rel="noopener">infinity</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=infinity" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˈfɪnəti]  us: [ɪnˈfɪnəti]</li><li>无穷</li></ul></blockquote><h3 id="perverse"><a href="#perverse" class="headerlink" title="perverse"></a><a href="http://dict.youdao.com/w/eng/perverse" target="_blank" rel="noopener">perverse</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=perverse" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [pəˈvɜːs]  us: [pərˈvɜːrs]</li><li>执拗的</li></ul></blockquote><h3 id="scenario"><a href="#scenario" class="headerlink" title="scenario"></a><a href="http://dict.youdao.com/w/eng/scenario" target="_blank" rel="noopener">scenario</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=scenario" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [səˈnɑːriəʊ]  us: [səˈnæriəʊ]</li><li>方案，蓝图</li></ul></blockquote><h3 id="somewhat"><a href="#somewhat" class="headerlink" title="somewhat"></a><a href="http://dict.youdao.com/w/eng/somewhat" target="_blank" rel="noopener">somewhat</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=somewhat" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsʌmwɒt]  us: [ˈsʌmwʌt]</li><li>有几分</li></ul></blockquote><h3 id="obstacle"><a href="#obstacle" class="headerlink" title="obstacle"></a><a href="http://dict.youdao.com/w/eng/obstacle" target="_blank" rel="noopener">obstacle</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=obstacle" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɒbstəkl]  us: [ˈɑːbstəkl]</li><li>障碍</li></ul></blockquote><h3 id="quantitatively"><a href="#quantitatively" class="headerlink" title="quantitatively"></a><a href="http://dict.youdao.com/w/eng/quantitatively" target="_blank" rel="noopener">quantitatively</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=quantitatively" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkwɒntɪtətɪvli]  us: [ˈkwɑːntəteɪtɪvli]</li><li>质量上的</li></ul></blockquote><h3 id="farm-implement"><a href="#farm-implement" class="headerlink" title="farm implement"></a><a href="http://dict.youdao.com/w/eng/farm%20implement" target="_blank" rel="noopener">farm implement</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=farm%20implement" type="audio/mpeg"><br></audio></p><blockquote><ul><li>农具</li></ul></blockquote><h3 id="suppress"><a href="#suppress" class="headerlink" title="suppress"></a><a href="http://dict.youdao.com/w/eng/suppress" target="_blank" rel="noopener">suppress</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=suppress" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [səˈpres]  us: [səˈpres]</li><li>抑制</li></ul></blockquote><h3 id="fetus"><a href="#fetus" class="headerlink" title="fetus"></a><a href="http://dict.youdao.com/w/eng/fetus" target="_blank" rel="noopener">fetus</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=fetus" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈfiːtəs]  us: [ˈfiːtəs]</li><li>胎，胎儿</li></ul></blockquote><h3 id="placenta"><a href="#placenta" class="headerlink" title="placenta"></a><a href="http://dict.youdao.com/w/eng/placenta" target="_blank" rel="noopener">placenta</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=placenta" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [pləˈsentə]  us: [pləˈsentə]</li><li>胎盘</li></ul></blockquote><h3 id="symmetrical"><a href="#symmetrical" class="headerlink" title="symmetrical"></a><a href="http://dict.youdao.com/w/eng/symmetrical" target="_blank" rel="noopener">symmetrical</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=symmetrical" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [sɪˈmetrɪkl]  us: [sɪˈmetrɪkl]</li><li>对称</li></ul></blockquote><h3 id="mechanism"><a href="#mechanism" class="headerlink" title="mechanism"></a><a href="http://dict.youdao.com/w/eng/mechanism" target="_blank" rel="noopener">mechanism</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=mechanism" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmekənɪzəm]  us: [ˈmekənɪzəm]</li><li>机制</li></ul></blockquote><h3 id="symmetry"><a href="#symmetry" class="headerlink" title="symmetry"></a><a href="http://dict.youdao.com/w/eng/symmetry" target="_blank" rel="noopener">symmetry</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=symmetry" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsɪmətri]  us: [ˈsɪmətri]</li><li>对称</li></ul></blockquote><h3 id="placental"><a href="#placental" class="headerlink" title="placental"></a><a href="http://dict.youdao.com/w/eng/placental" target="_blank" rel="noopener">placental</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=placental" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [pləˈsentl]  us: [pləˈsentl]</li><li>有胎盘的</li></ul></blockquote><h3 id="mammal"><a href="#mammal" class="headerlink" title="mammal"></a><a href="http://dict.youdao.com/w/eng/mammal" target="_blank" rel="noopener">mammal</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=mammal" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmæml]  us: [ˈmæml]</li><li>哺乳动物</li></ul></blockquote><h3 id="marsupial"><a href="#marsupial" class="headerlink" title="marsupial"></a><a href="http://dict.youdao.com/w/eng/marsupial" target="_blank" rel="noopener">marsupial</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=marsupial" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [mɑːˈsuːpiəl]  us: [mɑːrˈsuːpiəl]</li><li>有袋动物</li></ul></blockquote><h3 id="coordination"><a href="#coordination" class="headerlink" title="coordination"></a><a href="http://dict.youdao.com/w/eng/coordination" target="_blank" rel="noopener">coordination</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=coordination" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəʊˌɔːdɪˈneɪʃn]  us: [kəʊˌɔːrdɪˈneɪʃn]</li><li>协调</li></ul></blockquote><h3 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a><a href="http://dict.youdao.com/w/eng/trigger" target="_blank" rel="noopener">trigger</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=trigger" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtrɪɡə(r)]  us: [ˈtrɪɡər]</li><li>触发</li></ul></blockquote><h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a><a href="http://dict.youdao.com/w/eng/parralel" target="_blank" rel="noopener">parallel</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=parralel" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈpærəlel]  us: [ˈpærəlel]</li><li>平行的，类似 in parallel</li></ul></blockquote><h2 id="5-Feb"><a href="#5-Feb" class="headerlink" title="5 Feb"></a>5 Feb</h2><h3 id="back-then"><a href="#back-then" class="headerlink" title="back then"></a><a href="http://dict.youdao.com/w/eng/back%20then" target="_blank" rel="noopener">back then</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=back%20then" type="audio/mpeg"><br></audio></p><blockquote><ul><li>那时候</li></ul></blockquote><h3 id="chives"><a href="#chives" class="headerlink" title="chives"></a><a href="http://dict.youdao.com/w/eng/chives" target="_blank" rel="noopener">chives</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=chives" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [tʃaɪvz]  us: [tʃaɪvz]</li><li>韭菜</li></ul></blockquote><h3 id="specialise"><a href="#specialise" class="headerlink" title="specialise"></a><a href="http://dict.youdao.com/w/eng/specialise" target="_blank" rel="noopener">specialise</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=specialise" type="audio/mpeg"><br></audio></p><blockquote><ul><li>专门研究;专营;专业化</li></ul></blockquote><h3 id="treaty"><a href="#treaty" class="headerlink" title="treaty"></a><a href="http://dict.youdao.com/w/eng/treaty" target="_blank" rel="noopener">treaty</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=treaty" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtriːti]  us: [ˈtriːti]</li><li>条约</li></ul></blockquote><h3 id="Antarctic"><a href="#Antarctic" class="headerlink" title="Antarctic"></a><a href="http://dict.youdao.com/w/eng/Antarctic" target="_blank" rel="noopener">Antarctic</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Antarctic" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ænˈtɑːktɪk]  us: [ænˈtɑːrktɪk]</li><li>南极洲</li></ul></blockquote><h3 id="sheer-volume"><a href="#sheer-volume" class="headerlink" title="sheer volume"></a><a href="http://dict.youdao.com/w/eng/sheer%20volume" target="_blank" rel="noopener">sheer volume</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sheer%20volume" type="audio/mpeg"><br></audio></p><blockquote><ul><li>体积之巨</li></ul></blockquote><h3 id="tactic"><a href="#tactic" class="headerlink" title="tactic"></a><a href="http://dict.youdao.com/w/eng/tactic" target="_blank" rel="noopener">tactic</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tactic" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtæktɪk]  us: [ˈtæktɪk]</li><li>策略</li></ul></blockquote><h3 id="reluctant"><a href="#reluctant" class="headerlink" title="reluctant"></a><a href="http://dict.youdao.com/w/eng/reluctant" target="_blank" rel="noopener">reluctant</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=reluctant" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [rɪˈlʌktənt]  us: [rɪˈlʌktənt]</li><li>不情愿的，勉强的</li></ul></blockquote><h3 id="lateral"><a href="#lateral" class="headerlink" title="lateral"></a><a href="http://dict.youdao.com/w/eng/lateral" target="_blank" rel="noopener">lateral</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=lateral" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈlætərəl]  us: [ˈlætərəl]</li><li>侧向的</li></ul></blockquote><h3 id="whereas"><a href="#whereas" class="headerlink" title="whereas"></a><a href="http://dict.youdao.com/w/eng/whereas" target="_blank" rel="noopener">whereas</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=whereas" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌweərˈæz]  us: [ˌwerˈæz]</li><li>然而，尽管</li></ul></blockquote><h2 id="4-Feb"><a href="#4-Feb" class="headerlink" title="4 Feb"></a>4 Feb</h2><h3 id="hoarse"><a href="#hoarse" class="headerlink" title="hoarse"></a><a href="http://dict.youdao.com/w/eng/hoarse" target="_blank" rel="noopener">hoarse</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=hoarse" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [hɔːs]  us: [hɔːrs]</li><li>嘶哑</li></ul></blockquote><h3 id="Melbourne"><a href="#Melbourne" class="headerlink" title="Melbourne"></a><a href="http://dict.youdao.com/w/eng/Melbourne" target="_blank" rel="noopener">Melbourne</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Melbourne%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmelbən]  us: [ˈmelbərn]</li><li>墨尔本</li></ul></blockquote><h3 id="drowsiness"><a href="#drowsiness" class="headerlink" title="drowsiness"></a><a href="http://dict.youdao.com/w/eng/drowsiness" target="_blank" rel="noopener">drowsiness</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=drowsiness%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈdraʊzinəs]  us: [ˈdraʊzinəs]</li><li>睡意</li></ul></blockquote><h3 id="chancellor"><a href="#chancellor" class="headerlink" title="chancellor"></a><a href="http://dict.youdao.com/w/eng/chancellor" target="_blank" rel="noopener">chancellor</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=chancellor%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtʃɑːnsələ(r)]  us: [ˈtʃænsələr]</li><li>校长</li></ul></blockquote><h3 id="badge"><a href="#badge" class="headerlink" title="badge"></a><a href="http://dict.youdao.com/w/eng/badge" target="_blank" rel="noopener">badge</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=badge%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [bædʒ]  us: [bædʒ]</li><li>徽章</li></ul></blockquote><h3 id="serial"><a href="#serial" class="headerlink" title="serial"></a><a href="http://dict.youdao.com/w/eng/serial" target="_blank" rel="noopener">serial</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=serial%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsɪəriəl]  us: [ˈsɪriəl]</li><li>连续的</li></ul></blockquote><h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a><a href="http://dict.youdao.com/w/eng/scale" target="_blank" rel="noopener">scale</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=scale%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [skeɪl]  us: [skeɪl]</li><li>天平</li></ul></blockquote><h3 id="water-proof"><a href="#water-proof" class="headerlink" title="water-proof"></a><a href="http://dict.youdao.com/w/eng/water-proof" target="_blank" rel="noopener">water-proof</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=water-proof%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>防水的</li></ul></blockquote><h3 id="breeding"><a href="#breeding" class="headerlink" title="breeding"></a><a href="http://dict.youdao.com/w/eng/breeding" target="_blank" rel="noopener">breeding</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=breeding%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈbriːdɪŋ]  us: [ˈbriːdɪŋ]</li><li>繁殖</li></ul></blockquote><h3 id="blouse"><a href="#blouse" class="headerlink" title="blouse"></a><a href="http://dict.youdao.com/w/eng/blouse" target="_blank" rel="noopener">blouse</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=blouse%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [blaʊz]  us: [blaʊs]</li><li>衬衫</li></ul></blockquote><h3 id="westerner"><a href="#westerner" class="headerlink" title="westerner"></a><a href="http://dict.youdao.com/w/eng/westerner" target="_blank" rel="noopener">westerner</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=westerner%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈwestənə(r)]  us: [ˈwestərnər]</li><li>西方人</li></ul></blockquote><h3 id="beginners"><a href="#beginners" class="headerlink" title="beginners"></a><a href="http://dict.youdao.com/w/eng/beginners" target="_blank" rel="noopener">beginners</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=beginners%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [bɪˈɡɪnə(r)]  us: [bɪˈɡɪnər]</li><li>初始者</li></ul></blockquote><h3 id="Malaysia"><a href="#Malaysia" class="headerlink" title="Malaysia"></a><a href="http://dict.youdao.com/w/eng/Malaysia" target="_blank" rel="noopener">Malaysia</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Malaysia%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [məˈleɪʒə]  us: [məˈleɪziə]</li><li>马来西亚</li></ul></blockquote><h3 id="secretary"><a href="#secretary" class="headerlink" title="secretary"></a><a href="http://dict.youdao.com/w/eng/secretary" target="_blank" rel="noopener">secretary</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=secretary%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsekrətri]  us: [ˈsekrəteri]</li><li>秘书</li></ul></blockquote><h3 id="reception"><a href="#reception" class="headerlink" title="reception"></a><a href="http://dict.youdao.com/w/eng/reception" target="_blank" rel="noopener">reception</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=reception%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [rɪˈsepʃn]  us: [rɪˈsepʃn]</li><li>招待会</li></ul></blockquote><h3 id="beard"><a href="#beard" class="headerlink" title="beard"></a><a href="http://dict.youdao.com/w/eng/beard" target="_blank" rel="noopener">beard</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=beard%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [bɪəd]  us: [bɪrd]</li><li>胡子</li></ul></blockquote><h3 id="moustache"><a href="#moustache" class="headerlink" title="moustache"></a><a href="http://dict.youdao.com/w/eng/moustache" target="_blank" rel="noopener">moustache</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=moustache%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmʌstæʃ]  us: [məˈstɑːʃ]</li><li>小胡子</li></ul></blockquote><h3 id="videotape"><a href="#videotape" class="headerlink" title="videotape"></a><a href="http://dict.youdao.com/w/eng/videotape" target="_blank" rel="noopener">videotape</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=videotape%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈvɪdiəʊteɪp]  us: [ˈvɪdiəʊteɪp]</li><li>录像带</li></ul></blockquote><h3 id="rental"><a href="#rental" class="headerlink" title="rental"></a><a href="http://dict.youdao.com/w/eng/rental" target="_blank" rel="noopener">rental</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=rental%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈrentl]  us: [ˈrentl]</li><li>租金</li></ul></blockquote><h3 id="tractor"><a href="#tractor" class="headerlink" title="tractor"></a><a href="http://dict.youdao.com/w/eng/tractor" target="_blank" rel="noopener">tractor</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tractor%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtræktə(r)]  us: [ˈtræktər]</li><li>拖拉机</li></ul></blockquote><h3 id="allergic"><a href="#allergic" class="headerlink" title="allergic"></a><a href="http://dict.youdao.com/w/eng/allergic" target="_blank" rel="noopener">allergic</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=allergic%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [əˈlɜːdʒɪk]  us: [əˈlɜːrdʒɪk]</li><li>过敏的</li></ul></blockquote><h3 id="steering"><a href="#steering" class="headerlink" title="steering"></a><a href="http://dict.youdao.com/w/eng/steering" target="_blank" rel="noopener">steering</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=steering%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈstɪərɪŋ]  us: [ˈstɪrɪŋ]</li><li>操纵</li></ul></blockquote><h3 id="instrument"><a href="#instrument" class="headerlink" title="instrument"></a><a href="http://dict.youdao.com/w/eng/instrument" target="_blank" rel="noopener">instrument</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=instrument%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɪnstrəmənt]  us: [ˈɪnstrəmənt]</li><li>仪器</li></ul></blockquote><h3 id="emperor"><a href="#emperor" class="headerlink" title="emperor"></a><a href="http://dict.youdao.com/w/eng/emperor" target="_blank" rel="noopener">emperor</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=emperor%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈempərə(r)]  us: [ˈempərər]</li><li>皇帝</li></ul></blockquote><h3 id="stern"><a href="#stern" class="headerlink" title="stern"></a><a href="http://dict.youdao.com/w/eng/stern" target="_blank" rel="noopener">stern</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=stern%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [stɜːn]  us: [stɜːrn]</li><li>严厉的</li></ul></blockquote><h3 id="survey"><a href="#survey" class="headerlink" title="survey"></a><a href="http://dict.youdao.com/w/eng/survey" target="_blank" rel="noopener">survey</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=survey%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsɜːveɪ]  us: [ˈsɜːrveɪ]</li><li>测量</li></ul></blockquote><h3 id="scandals"><a href="#scandals" class="headerlink" title="scandals"></a><a href="http://dict.youdao.com/w/eng/scandals" target="_blank" rel="noopener">scandals</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=scandals%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈskændl]  us: [ˈskændl]</li><li>丑闻</li></ul></blockquote><h3 id="leprosy"><a href="#leprosy" class="headerlink" title="leprosy"></a><a href="http://dict.youdao.com/w/eng/leprosy" target="_blank" rel="noopener">leprosy</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=leprosy%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈleprəsi]  us: [ˈleprəsi]</li><li>麻风病</li></ul></blockquote><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a><a href="http://dict.youdao.com/w/eng/margin" target="_blank" rel="noopener">margin</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=margin%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmɑːdʒɪn]  us: [ˈmɑːrdʒɪn]</li><li>页边的空白</li></ul></blockquote><h3 id="spiral"><a href="#spiral" class="headerlink" title="spiral"></a><a href="http://dict.youdao.com/w/eng/spiral" target="_blank" rel="noopener">spiral</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=spiral%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈspaɪrəl]  us: [ˈspaɪrəl]</li><li>螺旋的</li></ul></blockquote><h3 id="archaeological-1"><a href="#archaeological-1" class="headerlink" title="archaeological"></a><a href="http://dict.youdao.com/w/eng/archaeological" target="_blank" rel="noopener">archaeological</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=archaeological%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌɑːkiəˈlɒdʒɪkl]  us: [ˌɑːrkiəˈlɑːdʒɪkl]</li><li>考古学的</li></ul></blockquote><h3 id="malaria"><a href="#malaria" class="headerlink" title="malaria"></a><a href="http://dict.youdao.com/w/eng/malaria" target="_blank" rel="noopener">malaria</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=malaria%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [məˈleəriə]  us: [məˈleriə]</li><li>疟疾</li></ul></blockquote><h3 id="recipe"><a href="#recipe" class="headerlink" title="recipe"></a><a href="http://dict.youdao.com/w/eng/recipe" target="_blank" rel="noopener">recipe</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=recipe%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈresəpi]  us: [ˈresəpi]</li><li>处方</li></ul></blockquote><h3 id="encyclopedia"><a href="#encyclopedia" class="headerlink" title="encyclopedia"></a><a href="http://dict.youdao.com/w/eng/encyclopedia" target="_blank" rel="noopener">encyclopedia</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=encyclopedia%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪnˌsaɪkləˈpiːdiə]  us: [ɪnˌsaɪkləˈpiːdiə]</li><li>百科全书</li></ul></blockquote><h3 id="tributes"><a href="#tributes" class="headerlink" title="tributes"></a><a href="http://dict.youdao.com/w/eng/tributes" target="_blank" rel="noopener">tributes</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=tributes%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈtrɪbjuːt]  us: [ˈtrɪbjuːt]</li><li>供品</li></ul></blockquote><h3 id="reflectance"><a href="#reflectance" class="headerlink" title="reflectance"></a><a href="http://dict.youdao.com/w/eng/reflectance" target="_blank" rel="noopener">reflectance</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=reflectance%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [rɪˈflektəns]  us: [rɪˈflektəns]</li><li>反射系数</li></ul></blockquote><h3 id="optic"><a href="#optic" class="headerlink" title="optic"></a><a href="http://dict.youdao.com/w/eng/optic" target="_blank" rel="noopener">optic</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=optic%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈɒptɪk]  us: [ˈɑːptɪk]</li><li>光学的</li></ul></blockquote><h3 id="self-sufficient"><a href="#self-sufficient" class="headerlink" title="self-sufficient"></a><a href="http://dict.youdao.com/w/eng/self-sufficient" target="_blank" rel="noopener">self-sufficient</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=self-sufficient%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌself səˈfɪʃnt]  us: [ˌself səˈfɪʃnt]</li><li>自给自足</li></ul></blockquote><h3 id="martial"><a href="#martial" class="headerlink" title="martial"></a><a href="http://dict.youdao.com/w/eng/martial" target="_blank" rel="noopener">martial</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=martial%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmɑːʃl]  us: [ˈmɑːrʃl]</li><li>武术</li></ul></blockquote><h3 id="jewelry-1"><a href="#jewelry-1" class="headerlink" title="jewelry"></a><a href="http://dict.youdao.com/w/eng/jewelry" target="_blank" rel="noopener">jewelry</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=jewelry%20" type="audio/mpeg"><br></audio></p><blockquote><ul><li>珠宝</li></ul></blockquote><h2 id="3-Feb"><a href="#3-Feb" class="headerlink" title="3 Feb"></a>3 Feb</h2><h3 id="abbreviation"><a href="#abbreviation" class="headerlink" title="abbreviation"></a><a href="http://dict.youdao.com/w/eng/abbreviation" target="_blank" rel="noopener">abbreviation</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=abbreviation" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [əˌbriːviˈeɪʃn]  us: [əˌbriːviˈeɪʃn]</li><li>缩写</li></ul></blockquote><h3 id="facilities"><a href="#facilities" class="headerlink" title="facilities"></a><a href="http://dict.youdao.com/w/eng/facilities" target="_blank" rel="noopener">facilities</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=facilities" type="audio/mpeg"><br></audio></p><blockquote><ul><li>设施</li></ul></blockquote><h3 id="mileage"><a href="#mileage" class="headerlink" title="mileage"></a><a href="http://dict.youdao.com/w/eng/mileage" target="_blank" rel="noopener">mileage</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=mileage" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈmaɪlɪdʒ]  us: [ˈmaɪlɪdʒ]</li><li>里程表</li></ul></blockquote><h3 id="crocodile"><a href="#crocodile" class="headerlink" title="crocodile"></a><a href="http://dict.youdao.com/w/eng/crocodile" target="_blank" rel="noopener">crocodile</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=crocodile" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkrɒkədaɪl]  us: [ˈkrɑːkədaɪl]</li><li>鳄鱼</li></ul></blockquote><h3 id="sewage"><a href="#sewage" class="headerlink" title="sewage"></a><a href="http://dict.youdao.com/w/eng/sewage" target="_blank" rel="noopener">sewage</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=sewage" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsuːɪdʒ]  us: [ˈsuːɪdʒ]</li><li>下水道污水</li></ul></blockquote><h3 id="utensil"><a href="#utensil" class="headerlink" title="utensil"></a><a href="http://dict.youdao.com/w/eng/utensil" target="_blank" rel="noopener">utensil</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=utensil" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [juːˈtensl]  us: [juːˈtensl]</li><li>用具</li></ul></blockquote><h3 id="enormous"><a href="#enormous" class="headerlink" title="enormous"></a><a href="http://dict.youdao.com/w/eng/enormous" target="_blank" rel="noopener">enormous</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=enormous" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪˈnɔːməs]  us: [ɪˈnɔːrməs]</li><li>广泛的</li></ul></blockquote><h3 id="concession"><a href="#concession" class="headerlink" title="concession"></a><a href="http://dict.youdao.com/w/eng/concession" target="_blank" rel="noopener">concession</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=concession" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kənˈseʃn]  us: [kənˈseʃn]</li><li>让步</li></ul></blockquote><h3 id="streamline"><a href="#streamline" class="headerlink" title="streamline"></a><a href="http://dict.youdao.com/w/eng/streamline" target="_blank" rel="noopener">streamline</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=streamline" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈstriːmlaɪn]  us: [ˈstriːmlaɪn]</li><li>精简</li></ul></blockquote><h3 id="competitor"><a href="#competitor" class="headerlink" title="competitor"></a><a href="http://dict.youdao.com/w/eng/competitor" target="_blank" rel="noopener">competitor</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=competitor" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəmˈpetɪtə(r)]  us: [kəmˈpetɪtər]</li><li>竞争者</li></ul></blockquote><h3 id="competition"><a href="#competition" class="headerlink" title="competition"></a><a href="http://dict.youdao.com/w/eng/competition" target="_blank" rel="noopener">competition</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=competition" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌkɒmpəˈtɪʃn]  us: [ˌkɑːmpəˈtɪʃn]</li><li>竞争</li></ul></blockquote><h3 id="competitive"><a href="#competitive" class="headerlink" title="competitive"></a><a href="http://dict.youdao.com/w/eng/competitive" target="_blank" rel="noopener">competitive</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=competitive" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəmˈpetətɪv]  us: [kəmˈpetətɪv]</li><li>竞争的</li></ul></blockquote><h3 id="consultancy"><a href="#consultancy" class="headerlink" title="consultancy"></a><a href="http://dict.youdao.com/w/eng/consultancy" target="_blank" rel="noopener">consultancy</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=consultancy" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kənˈsʌltənsi]  us: [kənˈsʌltənsi]</li><li>咨询公司</li></ul></blockquote><h3 id="administrative"><a href="#administrative" class="headerlink" title="administrative"></a><a href="http://dict.youdao.com/w/eng/administrative" target="_blank" rel="noopener">administrative</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=administrative" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ədˈmɪnɪstrətɪv]  us: [ədˈmɪnɪstreɪtɪv]</li><li>行政的</li></ul></blockquote><h3 id="efficiency"><a href="#efficiency" class="headerlink" title="efficiency"></a><a href="http://dict.youdao.com/w/eng/efficiency" target="_blank" rel="noopener">efficiency</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=efficiency" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ɪˈfɪʃnsi]  us: [ɪˈfɪʃnsi]</li><li>效率</li></ul></blockquote><h2 id="2-Feb"><a href="#2-Feb" class="headerlink" title="2 Feb"></a>2 Feb</h2><h3 id="vibration-amplitude"><a href="#vibration-amplitude" class="headerlink" title="vibration amplitude"></a><a href="http://dict.youdao.com/w/eng/vibration%20amplitude" target="_blank" rel="noopener">vibration amplitude</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=vibration%20amplitude" type="audio/mpeg"><br></audio></p><blockquote><ul><li>振幅</li></ul></blockquote><h3 id="logarithmic-transform"><a href="#logarithmic-transform" class="headerlink" title="logarithmic transform"></a><a href="http://dict.youdao.com/w/eng/logarithmic%20transform" target="_blank" rel="noopener">logarithmic transform</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=logarithmic%20transform" type="audio/mpeg"><br></audio></p><blockquote><ul><li>对数变换</li></ul></blockquote><h3 id="recurrent-neural-network"><a href="#recurrent-neural-network" class="headerlink" title="recurrent neural network"></a><a href="http://dict.youdao.com/w/eng/recurrent%20neural%20network" target="_blank" rel="noopener">recurrent neural network</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=recurrent%20neural%20network" type="audio/mpeg"><br></audio></p><blockquote><ul><li>循环神经网络</li></ul></blockquote><h3 id="time-series"><a href="#time-series" class="headerlink" title="time series"></a><a href="http://dict.youdao.com/w/eng/time%20series" target="_blank" rel="noopener">time series</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=time%20series" type="audio/mpeg"><br></audio></p><blockquote><ul><li>时间序列</li></ul></blockquote><h3 id="characteristic-factors"><a href="#characteristic-factors" class="headerlink" title="characteristic factors"></a><a href="http://dict.youdao.com/w/eng/characteristic%20factors" target="_blank" rel="noopener">characteristic factors</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=characteristic%20factors" type="audio/mpeg"><br></audio></p><blockquote><ul><li>特征因素</li></ul></blockquote><h3 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a><a href="http://dict.youdao.com/w/eng/parameter" target="_blank" rel="noopener">parameter</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=parameter" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [pəˈræmɪtə(r)]  us: [pəˈræmɪtər]</li><li>参数</li></ul></blockquote><h3 id="back-propagation"><a href="#back-propagation" class="headerlink" title="back propagation"></a><a href="http://dict.youdao.com/w/eng/back%20propagation" target="_blank" rel="noopener">back propagation</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=back%20propagation" type="audio/mpeg"><br></audio></p><blockquote><ul><li>反向传播</li></ul></blockquote><h3 id="vegetarian"><a href="#vegetarian" class="headerlink" title="vegetarian"></a><a href="http://dict.youdao.com/w/eng/vegetarian" target="_blank" rel="noopener">vegetarian</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=vegetarian" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌvedʒəˈteəriən]  us: [ˌvedʒəˈteriən]</li><li>素食主义者</li></ul></blockquote><h3 id="overhead-projector"><a href="#overhead-projector" class="headerlink" title="overhead projector"></a><a href="http://dict.youdao.com/w/eng/overhead%20projector" target="_blank" rel="noopener">overhead projector</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=overhead%20projector" type="audio/mpeg"><br></audio></p><blockquote><ul><li>OHP 投影仪</li></ul></blockquote><h3 id="landlady"><a href="#landlady" class="headerlink" title="landlady"></a><a href="http://dict.youdao.com/w/eng/landlady" target="_blank" rel="noopener">landlady</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=landlady" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈlændleɪdi]  us: [ˈlændleɪdi]</li><li>女房东</li></ul></blockquote><h3 id="narrator"><a href="#narrator" class="headerlink" title="narrator"></a><a href="http://dict.youdao.com/w/eng/narrator" target="_blank" rel="noopener">narrator</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=narrator" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [nəˈreɪtə(r)]  us: [ˈnæreɪtər]</li><li>讲述者</li></ul></blockquote><h3 id="seminar"><a href="#seminar" class="headerlink" title="seminar"></a><a href="http://dict.youdao.com/w/eng/seminar" target="_blank" rel="noopener">seminar</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=seminar" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsemɪnɑː(r)]  us: [ˈsemɪnɑːr]</li><li>研讨会</li></ul></blockquote><h3 id="noble"><a href="#noble" class="headerlink" title="noble"></a><a href="http://dict.youdao.com/w/eng/noble" target="_blank" rel="noopener">noble</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=noble" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈnəʊbl]  us: [ˈnəʊbl]</li><li>高尚的</li></ul></blockquote><h3 id="mosquito"><a href="#mosquito" class="headerlink" title="mosquito"></a><a href="http://dict.youdao.com/w/eng/mosquito" target="_blank" rel="noopener">mosquito</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=mosquito" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [məˈskiːtəʊ]  us: [mɒˈskiːtəʊ]</li><li>蚊子</li></ul></blockquote><h3 id="cassettes"><a href="#cassettes" class="headerlink" title="cassettes"></a><a href="http://dict.youdao.com/w/eng/cassettes" target="_blank" rel="noopener">cassettes</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=cassettes" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəˈset]  us: [kəˈset]</li><li>磁带</li></ul></blockquote><h3 id="Russia"><a href="#Russia" class="headerlink" title="Russia"></a><a href="http://dict.youdao.com/w/eng/Russia" target="_blank" rel="noopener">Russia</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Russia" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈrʌʃə]  us: [ˈrʌʃə]</li><li>俄罗斯</li></ul></blockquote><h3 id="Sydney"><a href="#Sydney" class="headerlink" title="Sydney"></a><a href="http://dict.youdao.com/w/eng/Sydney" target="_blank" rel="noopener">Sydney</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=Sydney" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈsɪdni]  us: [ˈsɪdni]</li><li>悉尼</li></ul></blockquote><h3 id="atmospheric"><a href="#atmospheric" class="headerlink" title="atmospheric"></a><a href="http://dict.youdao.com/w/eng/atmospheric" target="_blank" rel="noopener">atmospheric</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=atmospheric" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌætməsˈferɪk]  us: [ˌætməsˈfɪrɪk]</li><li>大气的</li></ul></blockquote><h3 id="phrase"><a href="#phrase" class="headerlink" title="phrase"></a><a href="http://dict.youdao.com/w/eng/phrase" target="_blank" rel="noopener">phrase</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=phrase" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [freɪz]  us: [freɪz]</li><li>短语</li></ul></blockquote><h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a><a href="http://dict.youdao.com/w/eng/capitalize" target="_blank" rel="noopener">capitalize</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=capitalize" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈkæpɪtəlaɪz]  us: [ˈkæpɪtəlaɪz]</li><li>资本化</li></ul></blockquote><h3 id="phase"><a href="#phase" class="headerlink" title="phase"></a><a href="http://dict.youdao.com/w/eng/phase" target="_blank" rel="noopener">phase</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=phase" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [feɪz]  us: [feɪz]</li><li>阶段</li></ul></blockquote><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a><a href="http://dict.youdao.com/w/eng/prototype" target="_blank" rel="noopener">prototype</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=prototype" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˈprəʊtətaɪp]  us: [ˈprəʊtətaɪp]</li><li>原型</li></ul></blockquote><h3 id="capability"><a href="#capability" class="headerlink" title="capability"></a><a href="http://dict.youdao.com/w/eng/capability" target="_blank" rel="noopener">capability</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=capability" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [ˌkeɪpəˈbɪləti]  us: [ˌkeɪpəˈbɪləti]</li><li>能力</li></ul></blockquote><h3 id="capacity"><a href="#capacity" class="headerlink" title="capacity"></a><a href="http://dict.youdao.com/w/eng/capacity" target="_blank" rel="noopener">capacity</a></h3><p><audio controls="controls" preload="auto"><br><source src="http://dict.youdao.com/dictvoice?audio=capacity" type="audio/mpeg"><br></audio></p><blockquote><ul><li>uk: [kəˈpæsəti]  us: [kəˈpæsəti]</li><li>容量</li></ul></blockquote><h2 id="26-Oct"><a href="#26-Oct" class="headerlink" title="26 Oct"></a>26 Oct</h2><h3 id="complacency"><a href="#complacency" class="headerlink" title="complacency"></a><a href="http://dict.youdao.com/w/eng/complacency" target="_blank" rel="noopener">complacency</a></h3><blockquote><ul><li>[kəmˈpleɪsnsi]</li><li>n</li></ul><ol><li>Despite signs of an improvement in the economy, there is no room for complacency.</li><li>The survey data suggest that these are relatively early days for the technologies covered in this report, but this is no time for complacency.</li></ol></blockquote><h3 id="indication"><a href="#indication" class="headerlink" title="indication"></a><a href="http://dict.youdao.com/w/eng/indication" target="_blank" rel="noopener">indication</a></h3><blockquote><ul><li>[ˌɪndɪˈkeɪʃn]</li><li>n</li></ul><ol><li>They gave no indication of how the work should be done.</li><li>There are clear indications that the economy is improving.</li></ol></blockquote><h3 id="contradiction"><a href="#contradiction" class="headerlink" title="contradiction"></a><a href="https://fanyi.baidu.com/#em/zh/contradiction" target="_blank" rel="noopener">contradiction</a></h3><blockquote><ul><li>[ˌkɒntrəˈdɪkʃn]</li><li>n</li></ul><ol><li>It is therefore not a contradiction to say that companies that have an upper hand with the IoT, machine learning, augmented reality and other technologies that will be enabled by next-generation connectivity know they need the most improvements.</li><li>I think I can say, without fear of contradiction , that…</li></ol></blockquote><h2 id="25-Oct"><a href="#25-Oct" class="headerlink" title="25 Oct"></a>25 Oct</h2><h3 id="utility"><a href="#utility" class="headerlink" title="utility"></a><a href="http://dict.youdao.com/w/eng/utility" target="_blank" rel="noopener">utility</a></h3><blockquote><ul><li>[juːˈtɪləti]</li><li>n &amp; adj</li></ul><ol><li>Belief in the utility of public education is shared by students nationwide.</li><li>A fur coat has more utility in winter than in autumn.</li><li>This is analogous <em>[əˈnæləɡəs]</em> to many Java methods calling one utility method.</li></ol></blockquote><h3 id="meter"><a href="#meter" class="headerlink" title="meter"></a><a href="http://fanyi.baidu.com/#en/zh/meter" target="_blank" rel="noopener">meter</a></h3><blockquote><ul><li>[ˈmiːtə(r)]</li><li>n &amp; v</li></ul><ol><li>A man came to read the gas meter.</li><li>Only one third of these households thought it reasonable to meter water.</li><li>They have right to come in and inspect the electricity meter.</li></ol></blockquote><h3 id="pursue"><a href="#pursue" class="headerlink" title="pursue"></a><a href="http://fanyi.baidu.com/#en/zh/pursue" target="_blank" rel="noopener">pursue</a></h3><blockquote><ul><li>[pəˈsjuː]</li><li>v</li></ul><ol><li>We intend to persue the policy with determination.</li><li>She wishes to persue a medical career.</li><li>We have decided not to persue the matter/legal action.</li><li>Police persued the car at high speed.</li></ol></blockquote><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a><a href="http://fanyi.baidu.com/#en/zh/exploit" target="_blank" rel="noopener">exploit</a></h3><blockquote><ul><li>[ɪkˈsplɔɪt , ˈeksplɔɪt]</li><li>v &amp; n</li></ul><ol><li>He exploited his father’s name to get himself a job.</li><li>Critics claim he exploited black musician for personal gain.</li><li>You’ll need a good aerial <em>[ˈeəriəl]</em> to exploit the radio’s performance/</li></ol></blockquote><h3 id="detect"><a href="#detect" class="headerlink" title="detect"></a><a href="http://fanyi.baidu.com/#en/zh/detect" target="_blank" rel="noopener">detect</a></h3><blockquote><ul><li>[dɪˈtekt]</li><li>v</li></ul><ol><li>The tests are designed to detect the disease early.</li><li>Arnold can detect a certain sadness in the old man face.</li></ol></blockquote><h3 id="vessel"><a href="#vessel" class="headerlink" title="vessel"></a><a href="http://fanyi.baidu.com/#en/zh/vessel" target="_blank" rel="noopener">vessel</a></h3><blockquote><ul><li>vessel</li><li>n</li></ul><ol><li>He makes decorative vessels in copper, stainless steel and silver</li></ol></blockquote><h3 id="navigate"><a href="#navigate" class="headerlink" title="navigate"></a><a href="http://fanyi.baidu.com/#en/zh/navigate" target="_blank" rel="noopener">navigate</a></h3><blockquote><ul><li>[ˈnævɪɡeɪt]</li><li>v</li></ul><ol><li>The river became too narrow and shallow to navigate.</li><li>I’ll drive, and you can navigate.</li><li>He naviage his way to the altar <em>[ˈɔːltə(r)]</em>.</li></ol></blockquote><h3 id="multiple"><a href="#multiple" class="headerlink" title="multiple"></a><a href="http://fanyi.baidu.com/#en/zh/multiple" target="_blank" rel="noopener">multiple</a></h3><blockquote><ul><li>ˈmʌltɪpl]</li><li>adj &amp; n</li><li><ol><li>He died of multiple injures.</li></ol></li><li><ol start="2"><li>Their numerical system, derived from the Babylonians, was based on multiples of the number six.</li></ol></li><li><ol start="3"><li>36 is a multiple of 9.</li></ol></li><li><ol start="4"><li>The most common multiple births are twins, two babies born at the same time.</li></ol></li></ul></blockquote><h3 id="paramount"><a href="#paramount" class="headerlink" title="paramount"></a><a href="http://fanyi.baidu.com/#en/zh/paramount" target="_blank" rel="noopener">paramount</a></h3><blockquote><ul><li>[ˈpærəmaʊnt]</li><li>adj</li></ul><ol><li>Safety is paramount.</li><li>The matter is of paramount importance.</li><li>The child’s welfare must be seen as paramount。</li></ol></blockquote><h3 id="cite"><a href="#cite" class="headerlink" title="cite"></a><a href="http://fanyi.baidu.com/#en/zh/cite" target="_blank" rel="noopener">cite</a></h3><blockquote><ul><li>[saɪt]</li><li>v</li></ul><ol><li>He cited his heavy workload as the reason for his breakdown.</li><li>She cites a favourite poem by George Herbert</li><li>She was cited in the divorce proceedings.</li><li>He was cited for bravery.</li></ol></blockquote><h3 id="articulate"><a href="#articulate" class="headerlink" title="articulate"></a><a href="http://fanyi.baidu.com/#en/zh/articulate" target="_blank" rel="noopener">articulate</a></h3><blockquote><ul><li>[ɑːˈtɪkjuleɪt , ɑːˈtɪkjələt]</li><li>v &amp; adj</li></ul><ol><li>She struggled to articulate her thoughts.</li><li>He was too drunk to articulate properly.</li><li>He articulated each syllable <em>[ˈsɪləbl]</em> carefully.</li><li>She was an articulate young woman.</li></ol></blockquote><h3 id="privacy"><a href="#privacy" class="headerlink" title="privacy"></a><a href="http://fanyi.baidu.com/#en/zh/privacy" target="_blank" rel="noopener">privacy</a></h3><blockquote><ul><li>[ˈprɪvəsi]</li><li>n</li><li><ol><li>She was longing for some peace and privacy.</li></ol></li><li><ol start="2"><li>I value my privacy.</li></ol></li><li><ol start="3"><li>The press invade people’s privacy unjustifiably every day.</li></ol></li><li><ol start="4"><li>The newspaper breached the code of conduct on privacy.</li></ol></li></ul></blockquote><h3 id="context"><a href="#context" class="headerlink" title="context"></a><a href="http://fanyi.baidu.com/#en/zh/context" target="_blank" rel="noopener">context</a></h3><blockquote><ul><li>[ˈkɒntekst]</li><li>n</li></ul><ol><li>His decision can only be understood in context.</li><li>You should be able to guess the meaning of the word from the context.</li></ol></blockquote><h3 id="vulnerability"><a href="#vulnerability" class="headerlink" title="vulnerability"></a><a href="http://fanyi.baidu.com/#en/zh/vulnerability" target="_blank" rel="noopener">vulnerability</a></h3><blockquote><ul><li>[ˌvʌlnərə’bɪlətɪ]</li><li>n</li><li><ol><li>Old people are particularly vulnerable members of our society.</li></ol></li><li><ol start="2"><li>His vulnerability makes him even more lovable.</li></ol></li></ul></blockquote><h3 id="capability-1"><a href="#capability-1" class="headerlink" title="capability"></a><a href="http://fanyi.baidu.com/#en/zh/capability" target="_blank" rel="noopener">capability</a></h3><blockquote><ul><li>[ˌkeɪpəˈbɪləti]</li><li>n</li></ul><ol><li>Animals in the zoo have lost the capability of catching food for themselves.</li><li>People experience differences in physical and mental capability depending on the time of day.</li></ol></blockquote><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a><a href="http://fanyi.baidu.com/#en/zh/screen" target="_blank" rel="noopener">screen</a></h3><blockquote><p>[skriːn]<br>n &amp; v</p><ol><li>Can you do a printout of this screen for me .</li><li>Most of the road behind the hotel was screened by a block of flats.</li><li>They will screen all their candiates.</li></ol></blockquote><h2 id="24-Oct"><a href="#24-Oct" class="headerlink" title="24 Oct"></a>24 Oct</h2><h3 id="implication"><a href="#implication" class="headerlink" title="implication"></a><a href="http://dict.youdao.com/w/eng/implication" target="_blank" rel="noopener">implication</a></h3><blockquote><ul><li>[ˌɪmplɪˈkeɪʃn]  </li><li>n</li></ul><ol><li>the implication is that no one at the bank is responsible.</li><li>The overwhelming interest of respondents in next-generation connectivity is driven by both optimism about the revenue implications and a fear of being left behind.</li></ol></blockquote><h3 id="potential"><a href="#potential" class="headerlink" title="potential"></a><a href="http://dict.youdao.com/w/eng/potential" target="_blank" rel="noopener">potential</a></h3><blockquote><ul><li>[pəˈtenʃl]  </li><li>adj &amp; n</li></ul><ol><li>First we need to identify actual and potential problems.</li><li>She has great potential  as an artist / to became a world-class musician.</li><li>The house has a lot of potential.</li></ol></blockquote><h3 id="necessitate"><a href="#necessitate" class="headerlink" title="necessitate"></a><a href="http://dict.youdao.com/w/eng/necessitate" target="_blank" rel="noopener">necessitate</a></h3><blockquote><ul><li>[nəˈsesɪteɪt]</li><li>v                                                       </li></ul><ol><li>Recent financial scandals have neccessitated changes in parliamentary <em>[ˌpɑːləˈmentri]</em> procedure <em>[prəˈsiːdʒə(r)]</em>.</li><li>the potential offered by lower latency <em>[‘leɪtənsɪ]</em> necessitates a step change in business investment and innovation <em>[ˌɪnəˈveɪʃn]</em>.</li></ol></blockquote><h3 id="parliamentary"><a href="#parliamentary" class="headerlink" title="parliamentary"></a><a href="http://dict.youdao.com/w/eng/parliamentary" target="_blank" rel="noopener">parliamentary</a></h3><blockquote><ul><li>[ˌpɑːləˈmentri]</li><li>adj</li></ul><ol><li>He used his influence to make sure she was not selected as a parliamentary candidate.</li><li>The Prime Minister has been briefed by her parliamentary aides</li></ol></blockquote><h3 id="automation"><a href="#automation" class="headerlink" title="automation"></a><a href="http://dict.youdao.com/w/eng/automation" target="_blank" rel="noopener">automation</a></h3><blockquote><ul><li>[ˌɔːtəˈmeɪʃn]</li><li>n</li></ul><ol><li>Automation meants the loss of lot of factory jobs.</li><li>In the last ten years, automation has reduced the the worke force here by half.</li><li>Automation would bring shorter and more flexible working week.</li><li>Automation revolutionized the olive industry in the early 1970s.</li><li>This is a design limitation of my automation system.</li><li>Automation has obsoleted <em>[ˈɒbsəliːtɪd]</em> any unskilled worker.</li></ol></blockquote><h3 id="crucial"><a href="#crucial" class="headerlink" title="crucial"></a><a href="http://dict.youdao.com/w/eng/crucial" target="_blank" rel="noopener">crucial</a></h3><blockquote><ul><li>[ˈkruːʃl]</li><li>adj</li></ul><ol><li>Parents play a crucial role in preparing their child for school.</li><li>The next few weeks are going to be crucial.</li><li>This is a crucial point, since the fear of competitive disruption is driving an urgency to adopt use cases and capitalise on them.</li></ol></blockquote><h3 id="urgency"><a href="#urgency" class="headerlink" title="urgency"></a><a href="http://dict.youdao.com/w/eng/urgency" target="_blank" rel="noopener">urgency</a></h3><blockquote><ul><li>[ˈɜːdʒənsi]</li><li>n</li></ul><ol><li>It’s a matter of utmost <em><em> [ˈʌtməʊst]</em></em> urgency. 这事刻不容缓</li><li>She was surprised at urgency in his voice.</li><li>They hastened to greet him and asked urgently, ‘Did you find it?’</li></ol></blockquote><h3 id="adopt"><a href="#adopt" class="headerlink" title="adopt"></a><a href="http://dict.youdao.com/w/eng/adopt" target="_blank" rel="noopener">adopt</a></h3><blockquote><ul><li>[əˈdɒpt]</li><li>v</li></ul><ol><li>She was forced to have her baby adopted</li><li>All three teams adopted different approaches to the problem.</li><li>The council is expected to adopt the new policy at its next meeting.</li><li>Early Christians in Europe adopted many of the practices of older, pagan religions.</li><li>She was adopted as parliamentary candidate for Wood Green.</li></ol></blockquote><h3 id="capitalize-1"><a href="#capitalize-1" class="headerlink" title="capitalize"></a><a href="http://dict.youdao.com/w/eng/capitalize" target="_blank" rel="noopener">capitalize</a></h3><blockquote><ul><li>[ˈkæpɪtəlaɪz]</li><li>v</li></ul><ol><li>The team failed to capitalize their early lead.</li><li>The rebels seem to be trying to capitalize the public’s discontent with gevernment.</li><li>Our intention is to capitalize the company by any means we can…</li></ol></blockquote><h3 id="consultancy-1"><a href="#consultancy-1" class="headerlink" title="consultancy"></a><a href="http://dict.youdao.com/w/eng/consultancy" target="_blank" rel="noopener">consultancy</a></h3><blockquote><ul><li>[kənˈsʌltənsi]</li><li>n</li></ul><ol><li>He is acting on a consultancy basis.</li><li>consultancy is a company that gives expert advice on a particular subject to other companies or organizations.</li></ol></blockquote><h3 id="divergence"><a href="#divergence" class="headerlink" title="divergence"></a><a href="http://dict.youdao.com/w/eng/divergence" target="_blank" rel="noopener">divergence</a></h3><blockquote><ul><li>[daɪˈvɜːdʒəns]</li><li>n</li></ul><ol><li>There’s a substantial divergence of opinion within the party.</li><li>A minimal error or deviation may result in wide divergence</li><li>There is an interesting divergence between B2C (business to consumer) and B2B (business to business) companies in how urgently they are approaching opportunities stemming from next-generation connectivity</li></ol></blockquote><h3 id="stem"><a href="#stem" class="headerlink" title="stem"></a><a href="http://dict.youdao.com/w/eng/stem" target="_blank" rel="noopener">stem</a></h3><blockquote><ul><li>[stem]</li><li>n &amp; v</li></ul><ol><li>Stem is the long thin part of a wine glass between the bowl and the base</li><li>Stem is the main long thin part of a plant above the ground from which the leaves or flowers grow.</li><li>Stem is the thin tube of a tobacco pipe.</li><li>The government had failed to stem the the tide of factory closures.</li><li>All my problems stem from drink.</li></ol></blockquote><h3 id="notably"><a href="#notably" class="headerlink" title="notably"></a><a href="http://dict.youdao.com/w/eng/notably" target="_blank" rel="noopener">notably</a></h3><blockquote><ul><li>[ˈnəʊtəbli]</li><li>adv</li></ul><ol><li>The house has lots of drawbacks, most notably its price.</li><li>This has not been a notably successful project.</li></ol></blockquote><h3 id="gear"><a href="#gear" class="headerlink" title="gear"></a><a href="http://dict.youdao.com/w/eng/gear" target="_blank" rel="noopener">gear</a></h3><blockquote><ul><li>[ɡɪə(r)]</li><li>n &amp; v</li></ul><ol><li>Careless use of clutch <em>[klʌtʃ]</em> my damage gears.</li><li>What gear are you in? Please shift the low gear.</li><li>I have left all my gear in Dave’s house.</li></ol></blockquote><h3 id="enormous-1"><a href="#enormous-1" class="headerlink" title="enormous"></a><a href="http://dict.youdao.com/w/eng/enormous" target="_blank" rel="noopener">enormous</a></h3><blockquote><ul><li>[ɪˈnɔːməs]</li><li>adj</li></ul><ol><li>The problem facing the President is enormous.</li><li>It was a enormous disappointment.</li><li>It is a enormous challenge but we hope to meet it within a a year.</li></ol></blockquote><h3 id="streamline-1"><a href="#streamline-1" class="headerlink" title="streamline"></a><a href="https://fanyi.baidu.com/#em/zh/streamline" target="_blank" rel="noopener">streamline</a></h3><blockquote><ul><li>[ˈstriːmlaɪn]</li><li>v &amp; n</li></ul><ol><li>The cars all have a new streamlined design.</li><li>The production process is to be streamline.</li><li>They are making efforts to streamline their normally cumbersome <em>[ˈkʌmbəsəm]</em> bureaucracy <em>[bjʊəˈrɒkrəsi]</em>.</li></ol></blockquote><h3 id="boost"><a href="#boost" class="headerlink" title="boost"></a><a href="http://dict.youdao.com/w/eng/boost" target="_blank" rel="noopener">boost</a></h3><blockquote><ul><li>[buːst]</li><li>v &amp; n</li></ul><ol><li>Getting that job did a lot to boost his ego.</li><li>The tax cuts will give a much needed boost to the economy.</li><li>Winning the competition was a wonderful boost for her morale <em>[məˈrɑːl]</em>.</li><li>Do what you to give her confident and boost her morale.</li></ol></blockquote><h3 id="administrative-1"><a href="#administrative-1" class="headerlink" title="administrative"></a><a href="http://dict.youdao.com/w/eng/administrative" target="_blank" rel="noopener">administrative</a></h3><blockquote><ul><li>[ədˈmɪnɪstrətɪv</li><li>adj</li></ul><ol><li>Other industries have had to sack managers to reduce administrative costs</li><li>In terms of the types of business opportunities that companies, B2B or B2C, are focused<br>on, respondents appeared especially <strong>geared</strong> towards automation—an innovation that could have <strong>enormous implications</strong> in <strong>streamlining operations</strong> and <strong>boosting firms’ administrative efficiency</strong>.</li></ol></blockquote><h3 id="transportation"><a href="#transportation" class="headerlink" title="transportation"></a><a href="http://dict.youdao.com/w/eng/transportation" target="_blank" rel="noopener">transportation</a></h3><blockquote><ul><li>[ˌtrænspɔːˈteɪʃn]</li><li>n</li></ul><ol><li>The company will provide free transportation.</li><li>Campuses are usually accessible by public transportation.</li><li>The baggage was being rapidly stowed <em>[stəʊd]</em> away for transportation.</li><li>This trend is especially apparent in the energy and transportation sectors.</li></ol></blockquote><h2 id="20-Oct"><a href="#20-Oct" class="headerlink" title="20 Oct"></a>20 Oct</h2><h3 id="consent"><a href="#consent" class="headerlink" title="consent"></a>consent</h3><blockquote><p>/kənˈsɛnt/<br>noun permission for something to happen or agreement to do something.<br>“no change may be made without the consent of all the partners”<br>verb give permission for something to happen.<br>“he consented to a search by a detective”</p></blockquote><ol><li>He expresses consent to do sth.</li><li>I got his consent to sth/do sth.</li><li>They got married by mutual consent of theri parents.</li><li>In China, the age of consent for marriage shall not earlier than the age of 22 years old for man and 20 for woman.</li><li>I am sure my teacher won’t consent.</li></ol><h3 id="criterion"><a href="#criterion" class="headerlink" title="criterion"></a>criterion</h3><blockquote><p>/krʌɪˈtɪərɪən/ plural noun: criteria<br>noun a principle or standard by which something may be judged or decided.<br>“they award a green label to products that meet certain environmental criteria”</p></blockquote><ol><li>There are a number of criteria we need to ment.</li><li>We have specific criteria and certain limitation.</li><li>Motivation is one of the principal criteria for success in learning the second language.</li><li>At that price, it met the low-price criteria.</li><li>the committee waived its normal five-year retirement criteria for fear Kelley might never retire.</li></ol><h3 id="specific"><a href="#specific" class="headerlink" title="specific"></a>specific</h3><blockquote><p>/spəˈsɪfɪk/</p></blockquote><ul><li>adjective</li></ul><blockquote><p>clearly defined or identified.<br>“savings were made by increasing the electricity supply only until it met specific development needs”</p></blockquote><ol><li>Before starting to practice English speaking, we must have a specific expectation to our score.</li></ol><blockquote><p>precise and clear in making statements or issuing instructions.<br>“when ordering goods be specific”</p></blockquote><ol start="2"><li>If we want to win this competition, we must have a specific training schedule and obey it strictly.</li></ol><blockquote><p>relating to species or a species.<br>“the differences between them can only be on the specific level”</p></blockquote><ul><li>noun</li></ul><blockquote><p>plural noun: specifics<br>a medicine or remedy effective in treating a particular disease or part of the body.<br>“he grasped at the idea as though she had offered him a specific for cancer”<br>a precise detail.<br>“I wish I’d put more thought into the specifics”</p></blockquote><ol start="3"><li>I’m not going to get into specifics</li><li>“I can’t get more specific</li></ol><h3 id="contrast"><a href="#contrast" class="headerlink" title="contrast"></a>contrast</h3><blockquote><p>noun /ˈkänˌtrast/<br>the state of being strikingly different from something else in juxtaposition or close association.<br>“the day began cold and blustery, in contrast to almost two weeks of uninterrupted sunshine”<br>verb /ˈkänˌtrast,kənˈtrast/<br>differ strikingly.<br>“his friend’s success contrasted with his own failure”</p></blockquote><h2 id="05-Oct"><a href="#05-Oct" class="headerlink" title="05 Oct"></a>05 Oct</h2><p>sediment, lush, pollen, palm, wreck, fragile, yield, civil war, assert</p><p>dominance, sledge, toppling, catastrophe, excavation, heroic, circular</p><p>windbreaks, moist, prehistoric, contend,  upright, back up, manoeuvre</p><p>wholly, doom, immunity, ingenious, stewards, reckless</p><p>pioneer, statues, poison, caption, chimp, messy, scrutiny, exclusively</p><p>deceptively, meticulously, radically, flit, contradict, motifs, thoroughly</p><p>renown, fame, reputation, prestige, drill, hoe, plough, rapid</p><p>advancement, the bar, randomly, harrow, deem, scatter, hopper</p><p>tube, furrow, blade, coulter, sow, manure, fertiliser, fermentative</p><p>inherited, pulmonary, cultivation, vineyard, tillage, ongoing</p><p>flip, trapdoor, fuss, astounding, manoeuvre, rear, plunge, vertical</p><p>submerge, rotate, preposterous, gymnastics, weld, resemblance, deposit</p><p>propeller, hinge, blade, appendage, compartment, versatility, edge</p><p>retraction</p><p>parcel shipment transit warehouse coverage financial mirror smashed</p><p>cruise obsolete fragmentary, imperial, emerge, realm, envoy, compile</p><p>compendia, incentive, basin, devout, hajj, prophet, lane, sacred</p><p>enlightenment, counterpart, genre, missionary, sojourn, conqueror</p><p>halt, churn out, insatiable, appetite, prowess, diplomacy, winery</p><p>safari, reshuffle</p><h2 id="03-Oct"><a href="#03-Oct" class="headerlink" title="03 Oct"></a>03 Oct</h2><p>cumulative, ratchet, fidelity, manipulation, neural, crow, prickly</p><p>hooked, counterpart, sever, split, serrated, impale, puncture, punch</p><p>ecological, correlate, correlation, trial-and-error, beak, wary</p><p>neurobiologist, reptile, convoluted, crevice, convergent, novice</p><p>principal, principle, commitment, heuristics, constraint, restraint</p><p>piece, chess figure, mentor, tutor, tuition, radiologist, cognitive</p><p>journeyman, journey, journal, journalist, reporter, interviewer, strategic</p><p>hypothesis, theory, prediction, apprenticeship, respectve, domain, perceive</p><p>utility, utilize, utilization, criticize, critical, criteria, ultimate, ultimately,</p><p>steam, emulate, prefume, fragrance, aroma, scent, odourant, fragrant, exude, smear</p><p>diffuse, saturated, soak, evaporate, denature, distillation, solvent, concrete</p><p>flora, fauna, endemic, spice, therapy, therapist, threapeutic, anti-freeze, antiviral</p><p>rheumatism, fortifier, tonic, aromatherapy, ailment, nausea, navy, naval</p><p>navigate, astronaut, poisonous, toxic</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
            <tag> Vocabulary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Kafka Notes</title>
      <link href="/2019/11/03/apache-kafka-notes/"/>
      <url>/2019/11/03/apache-kafka-notes/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/11/03/KztPYLn7qFTNegB.jpg" alt=""></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><hr><blockquote><p>在大数据技术中主要有两个挑战：收集数据和分析并处理数据，消息系统将会让这些事情变得更简单。<br>Appache Kafka 最初由Linkedin公司开发，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。</p></blockquote><h3 id="1-1-消息系统"><a href="#1-1-消息系统" class="headerlink" title="1.1 消息系统"></a>1.1 消息系统</h3><blockquote><p>消息系统负责从一个程序到另一个程序，是程序可以专注于数据而不用关心数据的传递和共享。<br>分布式消息传递基于可靠消息队列, 消息在客户端应用程序和消息传递系统之间异步传递消息</p></blockquote><p>两种类型消息系统</p><ul><li><p>点对点<br>消息保存在队列，一个或者多个消费者同时消耗消息，一个消息最多一个消费者消费</p></li><li><p>发布-订阅（pub-sub)<br>消息保存在主题中，消费者可以订阅一个或者多个主题的消息，发布者和订阅者</p></li></ul><p><img src="https://i.loli.net/2019/11/03/3DyicoCmYGgAa5x.png" alt="点对点">)<img src="https://i.loli.net/2019/11/03/V9BcRuNbTqarZ6X.png" alt="发布-订阅"></p><h3 id="1-2-Kafka"><a href="#1-2-Kafka" class="headerlink" title="1.2 Kafka"></a>1.2 Kafka</h3><blockquote><ul><li>Kafka 是一个分布式发布 - 订阅消息系统,</li><li>Kafka 可以处理大量的数据，并使您能够将消息从一个端点传递到另一个端点。</li><li>Kafka 适合离线和在线消息消费。</li><li>kafka 非常快，执行200万写/秒</li><li>Kafka 消息保留在磁盘上，并在群集内复制以防止数据丢失。</li></ul></blockquote><p>用例：</p><ul><li><p>指标： Kafka通常用于操作监控数据。 这涉及聚合来自分布式应用程序的统计信息，以产生操作数据的集中馈送。</p></li><li><p>日志聚合解决方案：  Kafka可用于跨组织从多个服务收集日志，并使它们以标准格式提供给多个服务器。</p></li><li><p>流处理：流式的框架(如Storm和Spark Streaming)从主题中读取数据，对其进行处理，并将处理后的数据写入新主题，供用户和应用程序使用。 Kafka的强耐久性在流处理的上下文中也非常有用。</p></li></ul><h2 id="二、基础"><a href="#二、基础" class="headerlink" title="二、基础"></a>二、基础</h2><hr><h3 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h3><blockquote><p>解耦、冗余、扩展性、灵活性和峰值处理能力、可恢复性、缓冲、异步通信</p></blockquote><ul><li><p><strong>解耦</strong> : 在处理过程插入了一个隐含的、基于数据的接口层，两边的应用程序都只需要实现这个接口，不用关心数据的传递。两边的程序可以独立的扩展或修改处理过程，只需要保证接口约束。</p></li><li><p><strong>冗余</strong> : 消息队列会将数据持久化到处理系统明确数据完全处理完毕，防止处理数据过程失败导致数据丢失。</p></li><li><p><strong>扩展性</strong> : 由于解耦了处理过程，易于调节消息入队和处理的频率，只需增加处理过程，不需要改变代码和参数。</p></li><li><p><strong>灵活性和峰值处理能力</strong> : 有利于访问量剧增的情况，将消息存下来，防止应用崩溃。</p></li><li><p><strong>可恢复性</strong> : 降低了耦合度，部分组件的崩溃不会影响到整个系统，会在系统恢复后继续处理</p></li><li><p><strong>顺序保证</strong> : Kafka 保证一个分区内消息的有序性</p></li><li><p><strong>缓冲</strong> : 消息队列通过一个缓冲层来帮助任务最高效率的执行</p></li><li><p><strong>异步通信</strong> : 消息放入不用立即取，需要时再取出来</p></li></ul><h3 id="2-2-术语"><a href="#2-2-术语" class="headerlink" title="2.2 术语"></a>2.2 术语</h3><p><img src="https://i.loli.net/2019/11/03/9gZActqbVJmlG6R.jpg" alt="Kafka数据流程图"></p><blockquote><p>Producer、Consumer、Consumer Group、Kafka Cluster、Broker、Topic、Partition、Partition offset、 Replicas of partition、Leader、Follower</p></blockquote><ul><li><p><strong>Producer</strong> : 生产者，数据发布者。</p></li><li><p><strong>Consumer</strong> : 消费者，数据订阅者。</p></li><li><p><strong>Consumer Group</strong> : 消费者分组，同一分组内的消费者共同消费消息，特定消息只会被分组内任一消费者消费一次。</p></li><li><p><strong>Kafka Cluster</strong> : Kafka 集群 Kafka有多个服务器被称为Kafka 可以扩展Kafka集群，无需停机。 这些集群用于管理消息数据的持久性和复制。</p></li><li><p><strong>Broker</strong> : Broker，即Kafka的服务器，负责存储消息，Kafa集群中的一台或多台服务器统称为 Broker。</p></li><li><p><strong>Topic</strong> : 主题，由用户定义并配置在Kafka服务器，用于建立生产者和消息者之间的订阅关系：生产者发送消息到指定的Topic下，消息者从这个Topic下消费消息。</p></li><li><p><strong>Partition</strong> : 分区，Partition，一个Topic下面会分为很多分区。Topic物理上的分组，一个topic可以分为多个partition保存在一个或者多个Broker，每个 partition 是一个有序的队列。partition中的每条消息都会被分配一个有序的 id（offset）</p></li><li><p><strong>Partition offset</strong> : 分区偏移，offset 为一个 long 型的数字，是每个分区的消息的唯一序列标识。</p></li><li><p><strong>Replicas of partition</strong> : 分区备份，副本只是一个分区的备份。 副本从不读取或写入数据。 它们用于防止数据丢失。如果一个topic的副本数为3，那么Kafka将在集群中为每个partition创建3个相同的副本。集群中的每个broker存储一个或多个partition。</p></li><li><p><strong>Leader</strong> : 领导者，负责给定分区的所有读取和写入的服务器节点。 每个分区都有一个服务器充当Leader</p></li><li><p><strong>Follower</strong> : 追随者，跟随领导者指令的节点被称为Follower。 如果领导失败，一个追随者将自动成为新的领导者。 跟随者作为正常消费者，拉取消息并更新其自己的数据存储。</p></li></ul><p><strong>数据均衡，水平扩展</strong></p><blockquote><ul><li>如果在一个Topic中有N个Partition，Kafka Cluster有N个Broker，则每个Broker存储一个Partiction。</li><li>如果在一个Topic中有N个Partition，Kafka Cluster有N+M个Broker，则其中N个Broker各存储一个Partition，剩下M个Broker 不存储该Topic的 Particition</li><li>如果在一个Topic中有N个Partition，Kafka Cluster有少于N个Broker, 则一个Broker存储该Topic的一个或多个Partition，但容易导致Kafka集群数据不均衡。</li></ul></blockquote><h2 id="三、架构"><a href="#三、架构" class="headerlink" title="三、架构"></a>三、架构</h2><hr><h3 id="3-1-架构图"><a href="#3-1-架构图" class="headerlink" title="3.1 架构图"></a>3.1 架构图</h3><p><img src="https://i.loli.net/2019/11/03/jWnGoPUxHJ1g5wV.jpg" alt="基于 Kafka-ZooKeeper 的分布式消息队列系统总体架构"></p><blockquote><p>如上图所示，一个典型的 Kafka 体系架构包括若干 Producer（可以是服务器日志，业务数据，页面前端产生的 page view 等等），若干 Broker（Kafka 支持水平扩展，一般 Broker 数量越多，集群吞吐率越高），若干 Consumer (Group)，以及一个 Zookeeper 集群。Kafka 通过 Zookeeper 管理集群配置，选举 Leader，以及在 Consumer Group 发生变化时进行 rebalance。Producer 使用 push(推) 模式将消息发布到 broker，Consumer 使用 pull(拉) 模式从 Broker 订阅并消费消息。</p></blockquote><h3 id="3-2-组件"><a href="#3-2-组件" class="headerlink" title="3.2 组件"></a>3.2 组件</h3><ul><li><strong>Broker</strong><br>Kafka集群通常由多个Broker组成以保持负载平衡。 KafkaBroker是无状态的，所以他们使用ZooKeeper来维护它们的集群状态。 一个KafkaBroker实例可以每秒处理数十万次读取和写入，每个Broker可以处理TB的消息，而没有性能影响。 Kafka Broker 的 Leader 选举可以由ZooKeeper完成</li><li><strong>ZooKeeper</strong><br>ZooKeeper用于管理和协调Kafka Broker。 ZooKeeper服务主要用于通知生产者和消费者Kafka系统中存在任何新Broker或Kafka系统中Broker失败。 根据Zookeeper接收到关于Broker的存在或失败的通知，然后生产者和消费者采取决定并开始与某些其他Broker协调他们的任务。Apache Zookeeper，它是一个分布式配置和同步服务。 Zookeeper是Kafka代理和消费者之间的协调接口。 Kafka服务器通过Zookeeper集群共享信息。 Kafka在Zookeeper中存储基本元数据，例如关于 <strong>主题，代理，消费者偏移(队列读取器)</strong> 等的信息。由于所有关键信息存储在Zookeeper中，并且它通常在其整体上复制此数据，因此Kafka代理/ Zookeeper的故障不会影响Kafka集群的状态。 一旦Zookeeper重新启动，Kafka将恢复状态。 这为Kafka带来了零停机时间</li><li><strong>Producer</strong><br>生产者将数据推送给Broker。 当新Broker启动时，所有生产者搜索它并自动向该新Broker发送消息。 Kafka生产者不等待来自Broker的确认，并且发送消息的速度与Broker可以处理的一样快</li><li><strong>Consumer</strong><br>因为KafkaBroker是无状态的，这意味着消费者必须通过使用分区偏移来维护已经消耗了多少消息。 如果消费者确认特定的消息偏移，则意味着消费者已经消费了所有先前的消息。 消费者向Broker发出异步拉取请求，以具有准备好消耗的字节缓冲区。 消费者可以简单地通过提供偏移值来快退或跳到分区中的任何点。 消费者偏移值由ZooKeeper通知。</li></ul><h2 id="四、流程"><a href="#四、流程" class="headerlink" title="四、流程"></a>四、流程</h2><h3 id="4-1-发布订阅消息传递的工作流"><a href="#4-1-发布订阅消息传递的工作流" class="headerlink" title="4.1 发布订阅消息传递的工作流"></a>4.1 发布订阅消息传递的工作流</h3><ul><li>生产者定期向主题发送消息。</li><li>Kafka代理存储为该特定主题配置的分区中的所有消息。 它确保消息在分区之间平等共享。 如果生产者发送两个消息并且有两个分区，Kafka将在第一分区中存储一个消息，在第二分区中存储第二消息。</li><li>消费者订阅特定主题。</li><li>一旦消费者订阅主题，Kafka将向消费者提供主题的当前偏移，并且还将偏移保存在Zookeeper系综中。</li><li>消费者将定期请求Kafka(如100 Ms)新消息。</li><li>一旦Kafka收到来自生产者的消息，它将这些消息转发给消费者。</li><li>消费者将收到消息并进行处理。</li><li>一旦消息被处理，消费者将向Kafka Broker发送确认。</li><li>一旦Kafka收到确认，它将偏移更改为新值，并在Zookeeper中更新它。 由于偏移在Zookeeper中维护，消费者可以正确地读取下一个消息，即使在服务器暴力期间。</li><li>以上流程将重复，直到消费者停止请求。</li><li>消费者可以随时回退/跳到所需的主题偏移量，并阅读所有后续消息</li></ul><h3 id="4-2-队列消息-用户组的工作流"><a href="#4-2-队列消息-用户组的工作流" class="headerlink" title="4.2 队列消息/用户组的工作流"></a>4.2 队列消息/用户组的工作流</h3><p>在队列消息传递系统而不是单个消费者中，具有相同组ID 的一组消费者将订阅主题。 简单来说，订阅具有相同 Group ID 的主题的消费者被认为是单个组，并且消息在它们之间共享。 让我们检查这个系统的实际工作流程。</p><ul><li>生产者定期向某个主题发送消息。</li><li>Kafka将所有消息存储在为该特定主题配置的分区中。</li><li>单个消费者订阅特定主题，假设 主题为Topic-01， Group ID 为 Group-1 。</li><li>Kafka以与发布 - 订阅消息相同的方式与消费者交互，直到新消费者以相同的组ID Group-1 订阅相同主题 Topic-01 。</li><li>一旦新消费者到达，Kafka将其操作切换到共享模式，并在两个消费者之间共享数据。 此共享将继续，直到用户数达到为该特定主题配置的分区数。</li><li>一旦消费者的数量超过分区的数量，新消费者将不会接收任何进一步的消息，直到现有消费者取消订阅任何一个消费者。 出现这种情况是因为 <strong>Kafka中的每个消费者将被分配至少一个分区，并且一旦所有分区被分配给现有消费者，新消费者将必须等待。</strong><br>这个功能被称为 <strong>消费群</strong>。 以同样的方式，Kafka将以非常简单和有效的方式提供这两个系统。</li></ul><h2 id="五、安装"><a href="#五、安装" class="headerlink" title="五、安装"></a>五、安装</h2><h3 id="Mac-环境"><a href="#Mac-环境" class="headerlink" title="Mac 环境"></a>Mac 环境</h3><ol><li><p>JDK8 环境安装</p><pre class="line-numbers language-bash"><code class="language-bash">brew cask <span class="token function">install</span> homebrew/cask-versions/adoptopenjdk8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>kafka 安装</p><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> kafka<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装会依赖zookeeper。<br>安装目录：/usr/local/Cellar/kafka/2.3.1</p></li><li><p>配置文件位置：/usr/local/etc/kafka</p><ul><li>/usr/local/etc/kafka/server.properties</li><li>/usr/local/etc/kafka/zookeeper.properties</li></ul></li><li><p>启动zookeeper:</p><pre class="line-numbers language-bash"><code class="language-bash">zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动kafka:</p><pre class="line-numbers language-bash"><code class="language-bash">kafka-server-start /usr/local/etc/kafka/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>可以zookeeper和kafka一起启动</strong></p><pre class="line-numbers language-bash"><code class="language-bash">zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties <span class="token operator">&amp;</span> kafka-server-start /usr/local/etc/kafka/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>本地测试</p><blockquote><p> 启动zookeeper 和 kafka 后新开一个terminal window</p></blockquote><ul><li>创建topic : 使用单个分区和只有一个副本创建一个名为“test”的主题</li></ul><pre class="line-numbers language-bash"><code class="language-bash">kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看创建的topic</li></ul><pre class="line-numbers language-bash"><code class="language-bash">kafka-topics --list --zookeeper localhost:2181<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>生产消息</li></ul><pre class="line-numbers language-bash"><code class="language-bash">kafka-console-producer --broker-list localhost:9092 --topic <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>消费消息</li></ul><p>新开一个terminal window 输入下方命令，然后再生产窗口输入消息</p><pre class="line-numbers language-bash"><code class="language-bash">kafka-console-consumer --bootstrap-server localhost:9092 --topic <span class="token function">test</span> --from-beginning<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2019/11/04/A9mjxtc7sGUL8Sh.png" alt="生产-消费"></p></li></ol><h2 id="六、使用"><a href="#六、使用" class="headerlink" title="六、使用"></a>六、使用</h2><h3 id="PyKafka"><a href="#PyKafka" class="headerlink" title="PyKafka"></a>PyKafka</h3><p>  <a href="https://pykafka.readthedocs.io/en/latest/#" target="_blank" rel="noopener">官方文档</a><br>  <a href="https://my.oschina.net/u/2263272/blog/788006" target="_blank" rel="noopener">python通过Pykafka库来连接kafka并收发消息</a></p><p><strong>[参考资料]</strong></p><ul><li><a href="https://www.w3cschool.cn/apache_kafka/" target="_blank" rel="noopener">w3cschool·Apache Kafka教程</a></li><li><a href="https://www.cnblogs.com/qingyunzong/p/9004509.html" target="_blank" rel="noopener">Kafka学习之路（一）Kafka的简介</a></li><li><a href="https://blog.csdn.net/yuan_xw/article/details/51210954" target="_blank" rel="noopener">Kafka教程(一)Kafka入门教程</a></li><li><a href="https://juejin.im/post/5d315daee51d4556bb4cd45a" target="_blank" rel="noopener">Kafka基本架构和原理（学习点）</a></li><li><a href="https://www.jianshu.com/p/1f6387d18989" target="_blank" rel="noopener">mac 安装kafka</a></li><li><a href="https://pykafka.readthedocs.io/en/latest/#" target="_blank" rel="noopener">PyKafka官方文档</a></li></ul><p><strong>[声明]</strong><br>资源源自网络，侵删！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IELTS Reading</title>
      <link href="/2019/10/18/ielts-reading/"/>
      <url>/2019/10/18/ielts-reading/</url>
      
        <content type="html"><![CDATA[<h3 id="The-Economist"><a href="#The-Economist" class="headerlink" title="The Economist"></a>The Economist</h3><ul><li><a href="https://psv4.userapi.com/c848328/u510634745/docs/d8/9d641e6a5169/The_Economist_Intelligence_Unit_-_Accelerated_Business_2019.pdf?extra=1FqBzqZI7bz3V3xxahidGhb2AjHHy0gSumzy1tFxi-dHesIUlF2BS3X2aOV2_IZ1LkutcZGM48I53XeUh-N-0VnsWWMMSH0STlbxkATs1TesuoZ23KysM-b_2hMtpRZ5x-V632VB-wtNVw" target="_blank" rel="noopener">The Economist (Intelligence Unit) - Accelerated Business (2019)</a></li></ul><h3 id="New-Yorker"><a href="#New-Yorker" class="headerlink" title="New Yorker"></a>New Yorker</h3><ul><li><a href="https://vk.com/doc510634745_518288289?hash=0b53650d6c55984163&amp;dl=GQZDGNBSGQ2DGNQ:1570002493:4b93b24ea6c6d60edb&amp;api=1&amp;no_preview=1" target="_blank" rel="noopener">The New Yorker – October 07, 2019</a></li></ul><h3 id="New-Scientists"><a href="#New-Scientists" class="headerlink" title="New Scientists"></a>New Scientists</h3><ul><li><a href="https://vk.com/doc16929061_437676087?hash=90287edb7f0180e330&amp;dl=147465556559d866636c9f2ad547&amp;api=1" target="_blank" rel="noopener">New Developments in Science and Technology Education</a></li></ul><h3 id="Scientific-American"><a href="#Scientific-American" class="headerlink" title="Scientific American"></a>Scientific American</h3><ul><li><a href="https://vk.com/doc479697494_490734088?hash=5c5dfc02d75abdb37f&amp;dl=GQ4TONRUGAZTG:1549131162:26cea1dc0c51bf925e&amp;api=1&amp;no_preview=1" target="_blank" rel="noopener">Scientific American – 02.2019</a></li></ul><h3 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h3><ul><li><a href="https://vk.com/doc510634745_519616996?hash=449643eca10f3d37c8&amp;dl=GQZDGNBSGQ2DGNQ:1571037765:0317b9ef06d1ac05e0&amp;api=1&amp;no_preview=1" target="_blank" rel="noopener">Time USA – October 21, 2019</a></li></ul><h3 id="USA-today"><a href="#USA-today" class="headerlink" title="USA today"></a>USA today</h3><ul><li><a href="https://vk.com/doc479697494_490446043?hash=be7ea58ca22ebc197c&amp;dl=GQ4TONRUGAZTG:1549131345:00863bb57a38f44d5a&amp;api=1&amp;no_preview=1" target="_blank" rel="noopener">USA Today – 25.01.2019 – 27.01.2019</a></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://www.magazinelib.com" target="_blank" rel="noopener">http://www.magazinelib.com</a></li></ul><blockquote><p>声明：资源源自网络，侵删</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Useful Articles</title>
      <link href="/2019/10/18/useful-articles/"/>
      <url>/2019/10/18/useful-articles/</url>
      
        <content type="html"><![CDATA[<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://attachments-cdn.shimo.im/Y5VtMoFSeicUglWO/latex%E6%8E%92%E7%89%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.pdf" target="_blank" rel="noopener">latex排版学习笔记</a></li></ul><p>【声明】：所有资源来自网络，侵删。</p><h2 id="待学"><a href="#待学" class="headerlink" title="待学"></a>待学</h2><blockquote><p>无聊了就来学习学习吧！</p></blockquote><ul><li><p><a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/shell.html" target="_blank" rel="noopener">Scrapy终端(Scrapy shell)</a></p></li><li><p><a href="https://gywbd.github.io/posts/2014/8/50-linux-commands.html" target="_blank" rel="noopener">50个最常用的Unix/Linux命令 2</a></p></li><li><p><a href="https://www.cnblogs.com/xrq730/p/6424471.html" target="_blank" rel="noopener">Java回调机制解读</a></p></li><li><p><a href="https://www.baidu.com/link?url=chpWO1Npk0jfHwy5oxmK8CrCQlmNGCYQy7CjnZrt5iCcvUnQWm3NRFpWDfkXmiw_&amp;wd=&amp;eqid=ba9beadd002a0b5f000000035dad5d43" target="_blank" rel="noopener">由浅入深剖析 go channel</a></p></li><li><p><a href="https://blog.csdn.net/K346K346/article/details/50487127" target="_blank" rel="noopener">IEEE754 浮点数的表示方法</a></p></li><li><p><a href="https://www.cnblogs.com/liang1101/p/7285955.html" target="_blank" rel="noopener">Golang 之协程详解</a></p></li><li><p><a href="https://www.baidu.com/link?url=y48M3MLmVWYkY2PTQSmdkbHjMcTce0B7QtET7PPrK5fHb0FucurVa2ZH8HTg2CiTbKxhAeFKojMokyBBm0msLK&amp;wd=&amp;eqid=c83b511500008094000000035dac2d04" target="_blank" rel="noopener"> Linux操作系统Shell</a></p></li><li><p><a href="http://3iter.com/2015/10/14/Mathjax%E4%B8%8ELaTex%E5%85%AC%E5%BC%8F%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Mathjax与LaTex公式简介</a></p></li><li><p><a href="https://www.cnblogs.com/chenpingzhao/p/5043746.html" target="_blank" rel="noopener">【linux】spinlock 的实现</a></p></li><li><p><a href="https://charlesliuyx.github.io/2018/10/11/%E3%80%90%E7%9B%B4%E8%A7%82%E7%AE%97%E6%B3%95%E3%80%91Egg%20Puzzle%20%E9%B8%A1%E8%9B%8B%E9%9A%BE%E9%A2%98/" target="_blank" rel="noopener">【直观算法】Egg Puzzle 鸡蛋难题</a></p></li><li><p><a href="https://charlesliuyx.github.io/2018/03/03/%E3%80%90%E5%8C%BA%E5%9D%97%E9%93%BE%E3%80%91%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">共识算法与如何解决拜占庭将军问题</a></p></li></ul><h2 id="已学"><a href="#已学" class="headerlink" title="已学"></a>已学</h2><ul><li><p><del><a href="https://zed058.cn/code/dev/springboot-00%E8%AF%BE%E5%89%8D%E5%87%86%E5%A4%87.html#_1%E3%80%81spring-boot-%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">Spring Boot 简介-稀客大大</a></del></p></li><li><p>~<a href="https://www.imooc.com/learn/945" target="_blank" rel="noopener">SpringBoot+MyBatis搭建迷你小程序</a></p></li><li><p><del><a href="https://www.zhihu.com/question/28551135" target="_blank" rel="noopener">为什么0.1+0.2=0.30000000000000004而1.1+2.2=3.3000000000000003？</a></del></p></li><li><p><del><a href="https://www.cnblogs.com/0201zcr/p/4694945.html" target="_blank" rel="noopener">HTTP长连接和短连接</a></del></p></li><li><p><del><a href="https://blog.csdn.net/daniel_ice/article/details/6857019" target="_blank" rel="noopener">数组名和数组名取地址的区别</a></del></p></li><li><p><del><a href="https://www.cnblogs.com/hongcha717/archive/2010/10/24/1859780.html" target="_blank" rel="noopener">数组指针和指针数组的区别</a></del></p></li></ul><h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><ul><li><p><a href="https://blog.csdn.net/blueheart20/article/details/80215753" target="_blank" rel="noopener">Scrapy中诡异xpath的匹配内容失效问题分析</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/34035463" target="_blank" rel="noopener">scrapy中settings参数的使用详解</a></p></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><blockquote><p>Python是一种广泛使用的解释型、高级编程、通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良的LISP。Python的设计哲学强调代码的可读性和简洁的语法。相比于C++或Java，Python让开发者能够用更少的代码表达想法。</p></blockquote><ul><li><p><a href="https://paste.ubuntu.com/p/gHdyYtfsJB/" target="_blank" rel="noopener">安装python3.7时候，报错ModuleNotFoundError: No module named ‘_ctypes’</a></p></li><li><p><a href="http://einverne.github.io/post/2017/04/pyenv.html" target="_blank" rel="noopener">使用 pyenv 管理 Python 版本</a></p></li><li><p><a href="https://www.cnblogs.com/yyds/p/6263957.html" target="_blank" rel="noopener">Python之函数进阶</a></p></li><li><p><a href="https://www.cnblogs.com/yyds/p/6281453.html" target="_blank" rel="noopener">Python之列表生成式、生成器、可迭代对象与迭代器</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/33896402" target="_blank" rel="noopener">python有趣的解包用法</a></p></li><li><p><a href="https://foofish.net/python-decorator.html" target="_blank" rel="noopener">理解 Python 装饰器看这一篇就够了</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017502538658208" target="_blank" rel="noopener">Python 使用@property</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1175298" target="_blank" rel="noopener">python 软件目录结构规范</a></p></li><li><p><a href="https://blog.csdn.net/u012609509/article/details/72911564" target="_blank" rel="noopener">Python 中 with用法及原理</a></p></li><li><p><a href="https://juejin.im/post/5bc2bd3a5188255c94465d31" target="_blank" rel="noopener">Python日志库logging总结</a></p></li><li><p><a href="http://blog.xiayf.cn/2013/03/30/argparse/" target="_blank" rel="noopener">argparse - 命令行选项与参数解析（译）</a></p></li></ul><h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><blockquote><p>Apache Spark是一个开源集群运算框架，最初是由加州大学柏克莱分校AMPLab所开发。相对于Hadoop的MapReduce会在运行完工作后将中介数据存放到磁盘中，Spark使用了存储器内运算技术，能在数据尚未写入硬盘时即在存储器内分析运算。</p></blockquote><ul><li><a href="https://spark.apache.org/docs/latest/configuration.html" target="_blank" rel="noopener">Spark Configuration</a></li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。</p></blockquote><ul><li><p><a href="https://novnan.github.io/Hexo/hexo-draft/" target="_blank" rel="noopener">Hexo 文章保存为草稿</a></p></li><li><p><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></p></li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><blockquote><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><ul><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Markdown语法</a></li></ul><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><blockquote><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。该项目的目标是为处理实时数据提供一个统一、高吞吐、低延迟的平台。其持久化层本质上是一个“按照分布式事务日志架构的大规模发布/订阅消息队列”，这使它作为企业级基础设施来处理流式数据非常有价值。</p></blockquote><ul><li><a href="https://www.orchome.com/kafka/index" target="_blank" rel="noopener">kafka中文教程</a></li></ul><h2 id="Message-traffic"><a href="#Message-traffic" class="headerlink" title="Message traffic"></a>Message traffic</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/25638474" target="_blank" rel="noopener">如何理解阻塞、非阻塞与同步、异步的区别？</a></li></ul><h2 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h2><blockquote><p>正则表达式，又称正则表示式、正则表示法、规则表达式、常规表示法，是计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。 许多程序设计语言都支持利用正则表达式进行字符串操作</p></blockquote><ul><li><p><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md" target="_blank" rel="noopener">learning regex</a></p></li><li><p><a href="https://www.zhihu.com/question/48219401/answer/126713858" target="_blank" rel="noopener">你是如何学会正则表达式的？</a></p></li><li><p><a href="http://www.cppblog.com/vczh/archive/2008/05/22/50763.html" target="_blank" rel="noopener">《构造正则表达式引擎》新鲜出炉啦！2 doc</a></p></li></ul><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><blockquote><p>htop是一个基于ncurses的程序，用于查看运行Linux的系统中的进程。htop与top命令非常相似</p></blockquote><ul><li>mac os 利用 brew 安装 htop ： brew install htop</li><li><a href="https://www.softprayog.in/tutorials/htop-command-in-linux" target="_blank" rel="noopener">htop command in Linux</a></li><li><a href="https://www.cnblogs.com/lizhenghn/p/3728610.html" target="_blank" rel="noopener">Linux下超级命令htop的学习使用</a></li><li><a href="https://www.jianshu.com/p/5629e331f58d" target="_blank" rel="noopener">Htop在Centos7的安装</a></li></ul><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><blockquote><p>git是一个分布式版本控制软件，最初由林纳斯·托瓦兹创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。</p></blockquote><ul><li><a href="https://blog.csdn.net/weixin_39800144/article/details/78205617" target="_blank" rel="noopener">git clone 指定分支 拉代码</a></li></ul><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><blockquote><p>Vim（Vi[Improved]）编辑器是功能强大的跨平台文本文件编辑工具，继承自Unix系统的Vi编辑器，支持Linux/Mac OS X/Windows系统，利用它可以建立、修改文本文件</p></blockquote><ul><li><a href="https://www.jianshu.com/p/bcbe916f97e1" target="_blank" rel="noopener">Vim入门基础</a></li><li><a href="https://my.oschina.net/joshuazhan/blog/122539" target="_blank" rel="noopener">Vim粘贴代码时缩进混乱</a></li><li><a href="https://juejin.im/post/5a38c37f6fb9a0450909a151" target="_blank" rel="noopener">vim进阶 | 使用插件打造实用vim工作环境, Vundle:目录树，补全，配色等</a></li><li><a href="https://vimjc.com/vim-color-schemes.html" target="_blank" rel="noopener">15个著名的Vim配色方案整理-Vim入门教程(7)</a></li><li><a href="https://cloud.tencent.com/developer/article/1404057" target="_blank" rel="noopener">设置vim 永久显示行号</a></li></ul><h2 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h2><blockquote><p>python3 multiprocessing (内置不需安装)是一个使用类似于该threading模块的API支持生成过程的软件包。该multiprocessing程序包提供了本地和远程并发性，通过使用子进程而不是线程来有效地避开了 全局解释器锁。因此，该multiprocessing模块允许程序员在给定机器上充分利用多个处理器。它可以在Unix和Windows上运行。</p></blockquote><ul><li><a href="https://docs.python.org/3.6/library/multiprocessing.html" target="_blank" rel="noopener">官网</a></li><li><a href="https://www.cnblogs.com/kaituorensheng/p/4445418.html" target="_blank" rel="noopener">Python多进程编程</a></li><li><a href="https://www.cnblogs.com/DarrenChan/p/7930878.html" target="_blank" rel="noopener">聊聊Python中的多进程和多线程</a></li></ul><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><blockquote><p>LaTeX（LATEX，音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档</p></blockquote><ul><li><a href="https://www.latexstudio.net/news/" target="_blank" rel="noopener">Latex 工作室</a></li><li><a href="https://tawn0000.github.io/2020/01/28/latex-grammar-notes/#toc-heading-10">Latex Grammar Notes</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> htop </tag>
            
            <tag> vim </tag>
            
            <tag> multiprocessing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The ways to convert Jupyter(.ipynb) to Python(.py), HTML(.html), Markdown(.md) or PDF(.pdf)</title>
      <link href="/2019/10/18/the-ways-to-convert-jupyter-ipynb-to-python-py-html-html-markdown-md-or-pdf-pdf/"/>
      <url>/2019/10/18/the-ways-to-convert-jupyter-ipynb-to-python-py-html-html-markdown-md-or-pdf-pdf/</url>
      
        <content type="html"><![CDATA[<h2 id="nbconvert"><a href="#nbconvert" class="headerlink" title="nbconvert"></a>nbconvert</h2><blockquote><p>首先我们需要安装ipython 和 nbconvert 库</p></blockquote><ul><li>pip install ipython</li><li>pip install nbconvert</li></ul><h2 id="ipynb-gt-py"><a href="#ipynb-gt-py" class="headerlink" title="ipynb -> py"></a>ipynb -&gt; py</h2><p>single file:</p><ul><li>ipython nbconvert — to script test.ipynb</li></ul><p>multi files:</p><ul><li>ipython nbconvert — to script test1.ipynb test2.ipynb</li></ul><h2 id="ipynb-gt-html"><a href="#ipynb-gt-html" class="headerlink" title="ipynb -> html"></a>ipynb -&gt; html</h2><ul><li>jupyter nbconvert –to html notebook.ipynb<br>or</li><li>jupyter nbconvert –to html –template basic/full notebook.ipynb</li></ul><h2 id="ipynb-gt-md"><a href="#ipynb-gt-md" class="headerlink" title="ipynb -> md"></a>ipynb -&gt; md</h2><ul><li>jupyter nbconvert –to md notebook.ipynb</li></ul><h2 id="ipynb-gt-pdf"><a href="#ipynb-gt-pdf" class="headerlink" title="ipynb -> pdf"></a>ipynb -&gt; pdf</h2><ul><li>jupyter nbconvert –to pdf notebook.ipynb</li></ul><blockquote><p>如果错了可以试一试安装下面这个包，大小1G多，所以还是算了吧</p></blockquote><p><del>~ + sudo apt-get install texlive-full ~</del></p><h2 id="graphical-interface-operation"><a href="#graphical-interface-operation" class="headerlink" title="graphical interface operation"></a>graphical interface operation</h2><img src="https://i.loli.net/2019/10/18/zaBhRow1D7X4JgW.png" width="50%" height="50%"><!-- ![](https://i.loli.net/2019/10/18/zaBhRow1D7X4JgW.png) --><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><blockquote><ol><li><a href="https://medium.com/@researchplex/the-easiest-way-to-convert-jupyter-ipynb-to-python-py-912e39f16917" target="_blank" rel="noopener">The easiest way to convert Jupyter(.ipynb) to Python(.py)</a></li><li><a href="https://blog.csdn.net/red_stone1/article/details/73380517" target="_blank" rel="noopener">如何将ipynb转换为html，md，pdf等格式</a></li></ol></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some websites for loading files to generate a link</title>
      <link href="/2019/10/16/some-websites-for-loading-files-to-generate-a-link/"/>
      <url>/2019/10/16/some-websites-for-loading-files-to-generate-a-link/</url>
      
        <content type="html"><![CDATA[<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ol><li>SM.MS<br><a href="https://sm.ms/" target="_blank" rel="noopener">https://sm.ms/</a></li></ol><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><ol><li><p>Gimhoy 音乐盘<br><a href="https://music.gimhoy.com/" target="_blank" rel="noopener">https://music.gimhoy.com/</a></p></li><li><p>JOY127.com<br><a href="https://www.joy127.com/" target="_blank" rel="noopener">https://www.joy127.com/</a></p></li></ol><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><ol><li>石墨文档<br><a href="https://shimo.im/welcome" target="_blank" rel="noopener">https://shimo.im/welcome</a><br>需要注册然后建立一个文档，添加pdf文件，然后就可以复制显示的下载按钮的链接</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://hao.su/1253/" target="_blank" rel="noopener">https://hao.su/1253/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Image manipulation and processing using Python Modules and Packages</title>
      <link href="/2019/10/14/image-manipulation-and-processing-using-python-modules-and-packages/"/>
      <url>/2019/10/14/image-manipulation-and-processing-using-python-modules-and-packages/</url>
      
        <content type="html"><![CDATA[<h2 id="混杂知识点"><a href="#混杂知识点" class="headerlink" title="混杂知识点"></a>混杂知识点</h2><h3 id="1-包，模块，库的区分"><a href="#1-包，模块，库的区分" class="headerlink" title="1. 包，模块，库的区分"></a>1. 包，模块，库的区分</h3><ul><li><p>package：就是个带 <strong>init</strong>.py 的文件夹，并不在乎里面有什么，不过一般来讲会包含一些 packages/modules</p></li><li><p>module：一个 .py 文件就是个 module</p></li><li><p>lib：抽象概念，和另外两个不是一类，只要你喜欢，什么都是 lib，就算只有个 hello world, scrapy、flask、Django、numpy、scipy、NLTK、jieba，一般都被认为是 lib，因为关注点不是他们的代码是怎么组织的。</p></li></ul><h3 id="2-图片格式转换"><a href="#2-图片格式转换" class="headerlink" title="2. 图片格式转换"></a>2. 图片格式转换</h3><h4 id="Numpy-array-lt-gt-PIL-Image"><a href="#Numpy-array-lt-gt-PIL-Image" class="headerlink" title="Numpy.array <=> PIL.Image"></a>Numpy.array &lt;=&gt; PIL.Image</h4><p><a href="https://blog.csdn.net/liuweizj12/article/details/80221537" target="_blank" rel="noopener">source</a></p><ul><li>Numpy.array =&gt; PIL.Image : img = Image.fromarray(img)</li><li>PIL.Image =&gt; Numpy.array : img = np.array(img)</li></ul><h4 id="PIL-Image-gt-Bytes"><a href="#PIL-Image-gt-Bytes" class="headerlink" title="PIL.Image => Bytes:"></a>PIL.Image =&gt; Bytes:</h4><p><a href="https://stackoverflow.com/a/56055505/12214101" target="_blank" rel="noopener">source</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> io<span class="token keyword">def</span> <span class="token function">image_to_byte_array</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span>Image<span class="token punctuation">)</span><span class="token punctuation">:</span>  imgByteArr <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>  image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>imgByteArr<span class="token punctuation">,</span> format<span class="token operator">=</span>image<span class="token punctuation">.</span>format<span class="token punctuation">)</span>  imgByteArr <span class="token operator">=</span> imgByteArr<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> imgByteArr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Bytes-gt-Numpy-array"><a href="#Bytes-gt-Numpy-array" class="headerlink" title="Bytes => Numpy.array"></a>Bytes =&gt; Numpy.array</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>contentimg <span class="token operator">=</span> plt<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>BytesIO<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF-gt-PNG"><a href="#GIF-gt-PNG" class="headerlink" title="GIF ==> PNG"></a>GIF ==&gt; PNG</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">iter_frames</span><span class="token punctuation">(</span>gif<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        i<span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            gif<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            imframe <span class="token operator">=</span> gif<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                palette <span class="token operator">=</span> imframe<span class="token punctuation">.</span>getpalette<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                imframe<span class="token punctuation">.</span>putpalette<span class="token punctuation">(</span>palette<span class="token punctuation">)</span>            <span class="token keyword">yield</span> imframe            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># http://cn.voidcc.com/question/p-ecfkyjoi-bks.html</span><span class="token comment" spellcheck="true"># Bytes to GIF</span><span class="token comment" spellcheck="true"># url = 'xxx'</span><span class="token comment" spellcheck="true"># gif = Image.open(BytesIO(requests.get(url).content)))</span>gif <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'captcha.gif'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> frame <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>iter_frames<span class="token punctuation">(</span>gif<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-分离文件名与扩展名"><a href="#3-分离文件名与扩展名" class="headerlink" title="3. 分离文件名与扩展名"></a>3. 分离文件名与扩展名</h4><p><a href="https://blog.csdn.net/u011509971/article/details/70244688" target="_blank" rel="noopener">source</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> ospath_01<span class="token operator">=</span><span class="token string">'D:/User/wgy/workplace/data/notMNIST_large.tar.png'</span>path_02<span class="token operator">=</span><span class="token string">'D:/User/wgy/workplace/data/notMNIST_large'</span>root_01<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>path_01<span class="token punctuation">)</span>root_02<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>path_02<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>root_01<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>root_02<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre><code>('D:/User/wgy/workplace/data/notMNIST_large.tar', '.png')('D:/User/wgy/workplace/data/notMNIST_large', '')</code></pre><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><h2 id="PIL"><a href="#PIL" class="headerlink" title="PIL"></a>PIL</h2><h2 id="Scipy"><a href="#Scipy" class="headerlink" title="Scipy"></a>Scipy</h2><h2 id="Open-cv"><a href="#Open-cv" class="headerlink" title="Open-cv"></a>Open-cv</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP response status codes</title>
      <link href="/2019/10/11/http-response-status-codes/"/>
      <url>/2019/10/11/http-response-status-codes/</url>
      
        <content type="html"><![CDATA[<p>HTTP 响应状态代码指示特定 HTTP 请求是否已成功完成。响应分为五类：信息响应(100–199)，成功响应(200–299)，重定向(300–399)，客户端错误(400–499)和服务器错误 (500–599)。状态代码由 <a href="https://tools.ietf.org/html/rfc2616#section-10" target="_blank" rel="noopener">section 10 of RFC 2616</a>定义</p><hr><h2 id="信息响应-1XX"><a href="#信息响应-1XX" class="headerlink" title="信息响应 1XX"></a>信息响应 1XX</h2><h3 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 Continue"></a>100 Continue</h3><p>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</p><h3 id="101-Switching-Protocol"><a href="#101-Switching-Protocol" class="headerlink" title="101 Switching Protocol"></a>101 Switching Protocol</h3><p>该代码是响应客户端的 Upgrade 标头发送的，并且指示服务器也正在切换的协议。</p><h3 id="102-Processing-WebDAV"><a href="#102-Processing-WebDAV" class="headerlink" title="102 Processing (WebDAV)"></a>102 Processing (WebDAV)</h3><p>此代码表示服务器已收到并正在处理该请求，但没有响应可用。</p><h3 id="103-Early-Hints"><a href="#103-Early-Hints" class="headerlink" title="103 Early Hints"></a>103 Early Hints</h3><p>此状态代码主要用于与Link 链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源。</p><hr><h2 id="成功响应-2XX"><a href="#成功响应-2XX" class="headerlink" title="成功响应 2XX"></a>成功响应 2XX</h2><h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h3><p>请求成功。成功的含义取决于HTTP方法：</p><ul><li>GET：资源已被提取并在消息正文中传输。</li><li>HEAD：实体标头位于消息正文中。</li><li>POST：描述动作结果的资源在消息体中传输。</li><li>TRACE：消息正文包含服务器收到的请求消息</li></ul><h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>该请求已成功，并因此创建了一个新的资源。这通常是在POST请求，或是某些PUT请求之后返回的响应。</p><h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</p><h3 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 Non-Authoritative Information"></a>203 Non-Authoritative Information</h3><p>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</p><h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</p><h3 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 Reset Content"></a>205 Reset Content</h3><p>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</p><h3 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h3><p>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。</p><h3 id="207-Multi-Status-WebDAV"><a href="#207-Multi-Status-WebDAV" class="headerlink" title="207 Multi-Status (WebDAV)"></a>207 Multi-Status (WebDAV)</h3><p>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p><h3 id="208-Multi-Status-WebDAV"><a href="#208-Multi-Status-WebDAV" class="headerlink" title="208 Multi-Status (WebDAV)"></a>208 Multi-Status (WebDAV)</h3><p>在 DAV 里面使用: propstat 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。</p><h3 id="226-IM-Used-HTTP-Delta-encoding"><a href="#226-IM-Used-HTTP-Delta-encoding" class="headerlink" title="226 IM Used (HTTP Delta encoding)"></a>226 IM Used (HTTP Delta encoding)</h3><p>服务器已经完成了对资源的 GET 请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</p><hr><h2 id="重定向-3XX"><a href="#重定向-3XX" class="headerlink" title="重定向 3XX"></a>重定向 3XX</h2><h3 id="300-Multiple-Choice"><a href="#300-Multiple-Choice" class="headerlink" title="300 Multiple Choice"></a>300 Multiple Choice</h3><p>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</p><h3 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h3><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</p><h3 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h3><p>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><h3 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h3><p>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。</p><h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h3><p>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</p><h3 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 Use Proxy"></a>305 Use Proxy</h3><p>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。</p><h3 id="306-unused"><a href="#306-unused" class="headerlink" title="306 unused"></a>306 unused</h3><p>在最新版的规范中，306 状态码已经不再被使用。</p><h3 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h3><p>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p><h3 id="308-Permanent-Redirect"><a href="#308-Permanent-Redirect" class="headerlink" title="308 Permanent Redirect"></a>308 Permanent Redirect</h3><p>这意味着资源现在永久位于由 Location: HTTP Response 标头指定的另一个 URI。 这与 301 Moved Permanently HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 POST，则必须在第二个请求中使用 POST。</p><hr><h2 id="客户端响应-4XX"><a href="#客户端响应-4XX" class="headerlink" title="客户端响应 4XX"></a>客户端响应 4XX</h2><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。<br>2、请求参数有误。</p><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</p><h3 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 Payment Required"></a>402 Payment Required</h3><p>此响应码保留以便将来使用，创造此响应码的最初目的是用于数字支付系统，然而现在并未使用。</p><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。</p><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p><h3 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h3><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p><h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h3><p>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</p><h3 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 Proxy Authentication Required"></a>407 Proxy Authentication Required</h3><p>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。</p><h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h3><p>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p><h3 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 Conflict"></a>409 Conflict</h3><p>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</p><h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h3><p>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用 404 状态码。除非额外说明，否则这个响应是可缓存的。</p><h3 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 Length Required"></a>411 Length Required</h3><p>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</p><h3 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 Precondition Failed"></a>412 Precondition Failed</h3><p>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p><h3 id="413-Payload-Too-Large"><a href="#413-Payload-Too-Large" class="headerlink" title="413 Payload Too Large"></a>413 Payload Too Large</h3><p>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h3 id="414-URI-Too-Long"><a href="#414-URI-Too-Long" class="headerlink" title="414 URI Too Long"></a>414 URI Too Long</h3><p>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。</p><h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h3><p>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</p><h3 id="416-Requested-Range-Not-Satisfiable"><a href="#416-Requested-Range-Not-Satisfiable" class="headerlink" title="416 Requested Range Not Satisfiable"></a>416 Requested Range Not Satisfiable</h3><p>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。</p><h3 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 Expectation Failed"></a>417 Expectation Failed</h3><p>此响应代码意味着服务器无法满足 Expect 请求标头字段指示的期望值。</p><h3 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 I’m a teapot"></a>418 I’m a teapot</h3><p>服务器拒绝尝试用 “茶壶冲泡咖啡”。</p><h3 id="421-Misdirected-Request"><a href="#421-Misdirected-Request" class="headerlink" title="421 Misdirected Request"></a>421 Misdirected Request</h3><p>该请求针对的是无法产生响应的服务器。 这可以由服务器发送，该服务器未配置为针对包含在请求 URI 中的方案和权限的组合产生响应。</p><h3 id="422-Unprocessable-Entity-WebDAV"><a href="#422-Unprocessable-Entity-WebDAV" class="headerlink" title="422 Unprocessable Entity (WebDAV)"></a>422 Unprocessable Entity (WebDAV)</h3><p>请求格式良好，但由于语义错误而无法遵循。</p><h3 id="423-Locked-WebDAV"><a href="#423-Locked-WebDAV" class="headerlink" title="423 Locked (WebDAV)"></a>423 Locked (WebDAV)</h3><p>正在访问的资源被锁定。</p><h3 id="424-Failed-Dependency-WebDAV"><a href="#424-Failed-Dependency-WebDAV" class="headerlink" title="424 Failed Dependency (WebDAV)"></a>424 Failed Dependency (WebDAV)</h3><p>由于先前的请求失败，所以此次请求失败。</p><h3 id="425-Too-Early"><a href="#425-Too-Early" class="headerlink" title="425 Too Early"></a>425 Too Early</h3><p>服务器不愿意冒着风险去处理可能重播的请求。</p><h3 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 Upgrade Required"></a>426 Upgrade Required</h3><p>服务器拒绝使用当前协议执行请求，但可能在客户机升级到其他协议后愿意这样做。 服务器在 426 响应中发送 Upgrade 头以指示所需的协议。</p><h3 id="428-Precondition-Required"><a href="#428-Precondition-Required" class="headerlink" title="428 Precondition Required"></a>428 Precondition Required</h3><p>原始服务器要求该请求是有条件的。 旨在防止“丢失更新”问题，即客户端获取资源状态，修改该状态并将其返回服务器，同时第三方修改服务器上的状态，从而导致冲突。</p><h3 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 Too Many Requests"></a>429 Too Many Requests</h3><p>用户在给定的时间内发送了太多请求（“限制请求速率”）。</p><h3 id="431-Request-Header-Fields-Too-Large"><a href="#431-Request-Header-Fields-Too-Large" class="headerlink" title="431 Request Header Fields Too Large"></a>431 Request Header Fields Too Large</h3><p>服务器不愿意处理请求，因为它的 请求头字段太大（ Request Header Fields Too Large）。 请求可以在减小请求头字段的大小后重新提交。</p><h3 id="451-Unavailable-For-Legal-Reasons"><a href="#451-Unavailable-For-Legal-Reasons" class="headerlink" title="451 Unavailable For Legal Reasons"></a>451 Unavailable For Legal Reasons</h3><p>用户请求非法资源，例如：由政府审查的网页。</p><hr><h2 id="服务端响应-5XX"><a href="#服务端响应-5XX" class="headerlink" title="服务端响应 5XX"></a>服务端响应 5XX</h2><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>服务器遇到了不知道如何处理的情况。</p><h3 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 Not Implemented"></a>501 Not Implemented</h3><p>此请求方法不被服务器支持且无法被处理。只有GET和HEAD是要求服务器支持的，它们必定不会返回此错误代码。</p><h3 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h3><p>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</p><h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。 这个响应应该用于临时条件和 Retry-After：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。 网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</p><h3 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 Gateway Timeout"></a>504 Gateway Timeout</h3><p>当服务器作为网关，不能及时得到响应时返回此错误代码。</p><h3 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 HTTP Version Not Supported"></a>505 HTTP Version Not Supported</h3><p>服务器不支持请求中所使用的HTTP协议版本。</p><h3 id="506-Variant-Also-Negotiates"><a href="#506-Variant-Also-Negotiates" class="headerlink" title="506 Variant Also Negotiates"></a>506 Variant Also Negotiates</h3><p>服务器有一个内部配置错误：对请求的透明内容协商导致循环引用。</p><h3 id="507-Insufficient-Storage"><a href="#507-Insufficient-Storage" class="headerlink" title="507 Insufficient Storage"></a>507 Insufficient Storage</h3><p>服务器有内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当端点。</p><h3 id="508-Loop-Detected-WebDAV"><a href="#508-Loop-Detected-WebDAV" class="headerlink" title="508 Loop Detected (WebDAV)"></a>508 Loop Detected (WebDAV)</h3><p>服务器在处理请求时检测到无限循环。</p><h3 id="510-Not-Extended"><a href="#510-Not-Extended" class="headerlink" title="510 Not Extended"></a>510 Not Extended</h3><p>客户端需要对请求进一步扩展，服务器才能实现它。服务器会回复客户端发出扩展请求所需的所有信息。</p><h3 id="511-Network-Authentication-Required"><a href="#511-Network-Authentication-Required" class="headerlink" title="511 Network Authentication Required"></a>511 Network Authentication Required</h3><p>511 状态码指示客户端需要进行身份验证才能获得网络访问权限。</p><p>【声明】：该资源转载自<a href="https://developer.mozilla.org" target="_blank" rel="noopener">https://developer.mozilla.org</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">传送门</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Crawler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IELTS Writing</title>
      <link href="/2019/10/11/ielts-writing/"/>
      <url>/2019/10/11/ielts-writing/</url>
      
        <content type="html"><![CDATA[<h2 id="小作文"><a href="#小作文" class="headerlink" title="小作文"></a>小作文</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h4><ul><li>The first chart below shows how energy is used in an average Australian household. The second chart shows the greenhouse gas emissions which result from this energy use.</li></ul><p><img src="http://webms3.xhd.cn/u/cms/shanghai/201701/11172749qami.jpg" alt=""><br><img src="http://webms3.xhd.cn/u/cms/shanghai/201701/11172811j163.jpg" alt=""></p><h4 id="范文"><a href="#范文" class="headerlink" title="范文"></a><strong>范文</strong></h4><p>The two charts summarise the amount of energy used through various means in the average Australian household versus the amount of greenhouse gas emissions resulting from the same sources.</p><p>In the first chart, we see that the overwhelming percentage of energy is devoted to household heating, with 42% of total energy usage. The second biggest is water heating with 30%, but then the amounts drop precipitously, with other appliances, refrigeration, lighting and cooling all using 28%.</p><p>From the second chart, we learn that heating, despite being the greatest drain on energy, actually contributes relatively little to greenhouse gas emissions with 15% of the total. The greatest emitter is water heating with 32% and the smallest being cooling at 3%. The largest disparity belongs to both refrigeration and lighting, both generating twice the amount of gases from the energy they consume (7% of energy use to 14% of emissions and 4% energy use to 8% of emissions respectively).</p><p><img src="https://i.loli.net/2019/10/11/641yS8GCsTw3MDz.png" alt="思维流图"></p><p>The pie charts reveal the amounts of energy used for domestic needs in Australia along with the percents of the concomitant emissions yielded on account of using energy.</p><p>Taking a look at the first chart, heating is the integral source of energy usage, accounting for 42% of the energy use. Following that, water heating and other appliances are the chief matters for energy consumption with 30% and 15% energy usage respectively. Moreover, refrigeration, lighting, and cooling have the least shares of consumption with 7%, 4%, and 2% energy usage respectively.</p><p>Moving to the second chart, in terms of generating emissions, water heating is at the top of the list, constituting 32% of the emissions. Thence, other appliances and heating are responsible for 28% and 15% of the emissions, and they are followed by refrigeration (14%) and lighting (8%). Interestingly, not only does cooling have the least amount of energy usage, but also it causes the tiniest emission in contrast to its counterparts.</p><p>To sum up, warming up is the most prominent matter, in terms of both energy consumption and generating pollution.</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a><strong>题目</strong></h4><ul><li><p>The charts below show the proportions of British students at one university in England who were able to speak other languages in addition to English, in2000 and 2010.</p></li><li><p>Summarise the information by selecting and reporting the main features,and make comparisons where relevant.</p></li></ul><p><img src="https://essayforum.com/shared_files/uploaded/76910/305298_1_o.png" alt=""></p><h4 id="我的"><a href="#我的" class="headerlink" title="我的"></a><strong>我的</strong></h4><ul><li><p>The two charts illustrate the percetages of one British university students who had the ability of speaking foreign languages in 2000 versus the percentages in 2010.</p></li><li><p>From the first chart, we can see the percentages of students who can speak only mother language in 2000 is 30%, while the percentages of students who can speaking other languages occupys 70% of the total, which the details of is “French only” with %15, “German only” with %10, “Spanish only” with %20， “Another language” with 15, and “Two other languages” with 10.</p></li><li><p>Moving to the second chart, the percentage of students who can not speaking other language in 2010 had increased 5 percent compared with the percentage in 2000. Besides, the amouts of students who were able to speak German had droped from 20% in 2000 to 10% in 2010. However, there were both 5 percent increasement in the pecentages of “Another language” and “Two othe luanguage”.</p></li><li><p>To sum up, the amount of British students in this University who can speak foreign language had decreased in total, while the students who were able to speak more than one foreign language and the students who had the ability of speaking another languages other than English, French, German, and Spanish had became more and more.</p></li></ul><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a><strong>建议</strong></h4><blockquote><ol><li>尽量把图表的类型写出来</li><li>总体趋势, 再跟一句总体趋势 范文第二自然段 是不是有一个overall 英文和中文不一样 要直入主题 英文要总分形式 一般保分就是总分</li><li>表示第一个表格30 和70都说没有必要，一个是三十另一个不就是70 了嘛，而且没有体现表格的重要特征，只摆了数据</li><li>第二段思路还可以，语言要更加地道 多看范文 再写一篇 同样一篇 你的逻辑多写几遍就懂了</li><li>抓特征点我指的是你要点出来哪个是最大的那个是最小的</li><li>主要是你的语句还有进步空间 你看看范文 学习一下连词的正确用法<br>@by YJ</li></ol></blockquote><h4 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a><strong>修改后</strong></h4><ul><li><p>The two pie charts illustrate the percetages of one British university students who had the ability of speaking foreign languages in 2000 versus the percentages in 2010.</p></li><li><p>Overall, the amount of British students in this University who can speak foreign language had decreased in total, while the students who were able to speak more than one foreign language and the students who had the ability of speaking another languages other than English, French, German, and Spanish had became more and more.</p></li><li><p>From the first chart, we can see the percentages of students who can speak only mother tongue in 2000 is 30%. And the students were able to speak Spanish with 20%, followed by the numbles of students being able to speak French only and another language were similar with 15 percent. Similarly, there were 10% proportions occupied in the German only aspect and the two other language aspect.</p></li><li><p>Moving to the second chart, the percentage of students who can not speaking other language in 2010 had increased 5 percent compared with the percentage in 2000. Besides, the amounts of students who were able to speak German had dropped 10% from 2000 to 2010. However, there were similarly 5 percent increasement in both “Another language” and “Two othe luanguage”.</p></li></ul><h4 id="意见"><a href="#意见" class="headerlink" title="意见"></a><strong>意见</strong></h4><blockquote><ol><li>第二段用过去式</li><li>第二段表达趋势过长</li><li>第二段表达整体趋势，后面两端抓取特征进行描述</li><li>第二段要选趋势变化最大的，要选一个划分点， 例如这里就是一个only mother tongue 和 other language</li><li>统一表达，10% 和 10 percent</li><li>抓特征点：！！！！</li></ol></blockquote><h4 id="范文-1"><a href="#范文-1" class="headerlink" title="范文"></a><strong>范文</strong></h4><p>Given are the pie charts illustrating the percentages of British students knowing other languages apart from English in 2000 and 2010.</p><p>Overall, there was an increase in percentage of students who speak only English, while the percentage decreased significantly in the Spanish speakers group.</p><p>To begin with, in 2000, 30% of British students in one university were able to speak only their mother tongue, followed by students being able to speak Spanish with 20%. There were similar numbers in the figures of French only and another language with 15 percent. Similarly, 10% proportions were taken in the German only aspect and the two other languages aspect.</p><p>Despite the high percentage of respondents who were speaking Spanish in 2000, there was a drop of 10% in 2010, changing the Spanish only figure to be 10%, which was having an identical number with the German only figure and the French only figure. Conversely, there are a rise of 15% in the Another language figure and the percentage of trilingual group in 2010.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雅思口语必备15种连接词</title>
      <link href="/2019/10/10/ya-si-kou-yu-bi-bei-15-chong-lian-jie-ci/"/>
      <url>/2019/10/10/ya-si-kou-yu-bi-bei-15-chong-lian-jie-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="雅思口语必备15种连接词"><a href="#雅思口语必备15种连接词" class="headerlink" title="雅思口语必备15种连接词"></a>雅思口语必备15种连接词</h1><ul><li>雅思口语有四个评分标准： Fluency &amp;Coherence(流利度与连贯性)， Grammatical Range &amp; Accuracy(语法广度及准确度), Lexical Resources (词汇范围和准确度) 和Pronunciation(发音)。</li><li>根据笔者观察，学生们往往对怎样提升流利度与连贯性不知所措，即便在家里把准备好的材料背的滚瓜烂熟，到了考场也常由于紧张或者有明显背诵的痕迹，取得一个非常糟糕的分数。虽然在一个较短的时间内大幅提升自己语言的连贯与流利不是件容易的事，但我们却可以通过口语中的一些过渡词，帮助自己消除紧张情绪。更重要的是，善于运用口语中的过渡词，可以大大消除背诵痕迹，让自己的语言变得更加自然，更具有逻辑性。</li><li>在雅思口语中，有15种过渡词使用的频率极高，可以帮助大家迅速提升口语交流的流利度与连贯性。</li></ul><h2 id="1-Addition-递进"><a href="#1-Addition-递进" class="headerlink" title="1. Addition(递进)"></a>1. Addition(递进)</h2><p>　　moreover, what is more, furthermore, , let alone, additionally, not to mention (this), besides (this) , in addition (to this)<br>　　真题链接：<br>　　Q: Do you often use the dictionary?<br>　　A: I often refer to a dictionary for some new words. Additionally, browsing the dictionary can also enlarge my vocabulary and knowledge.  </p><h2 id="2-Reference-引用"><a href="#2-Reference-引用" class="headerlink" title="2. Reference(引用)"></a>2. Reference(引用)</h2><p>　　considering (this), regarding (this), as for (this), concerning (this), on the subject of (this)<br>　　真题链接：<br>　　Q: Is time important?<br>　　A: Well, speaking about the importance of time, there are a lot of old sayings, like ‘Time waits for no man.’; ‘Time never comes back when it is gone.’  </p><h2 id="3-Example-举例"><a href="#3-Example-举例" class="headerlink" title="3. Example (举例)"></a>3. Example (举例)</h2><p>　　such as, particularly, especially, for example, like, in particular, for one thing, notably<br>　　真题链接：<br>　　Q: Are there any colors that have a special meaning in your country?<br>　　A: Yea, different colors stands for different meanings. For example, the white color represents purity and dignity, and the red color is for joy and celebration.<br>　　真题链接：<br>　　A: What kinds of museum do you like?<br>　　Q: Well, I am really fond of some new museums with different movies, particularly, the 3D and 4D movies which give me a vivid picture of history and art.  </p><h2 id="4-Similarity-相似"><a href="#4-Similarity-相似" class="headerlink" title="4. Similarity(相似)"></a>4. Similarity(相似)</h2><p>　　similarly, in the same way, equally, likewise, as well as<br>　　真题链接：<br>　　Q: Do you think advertisement can help products to be sold?<br>　　A: Advertisements can help people to have a better understanding about products, in the same way, advertisements usually tell people the unique functions of the products.</p><h2 id="5-Clarification-澄清"><a href="#5-Clarification-澄清" class="headerlink" title="5. Clarification(澄清)"></a>5. Clarification(澄清)</h2><p>　　that is (to say), I mean, (to) put (it) another way, in other words, namely, specifically<br>　　真题链接：<br>　　Q: What housework do you least like doing?<br>　　A: Washing dishes has always been a pet hate (特别讨厌的东西) of mine. Specifically, I feel disgusted when I put my hands in the dirty water or wipe all the food off the dishes.  </p><h2 id="6-Conflict-转折"><a href="#6-Conflict-转折" class="headerlink" title="6. Conflict(转折)"></a>6. Conflict(转折)</h2><p>　　but, while, on the other hand, however, whereas, in contrast, conversely, still, instead<br>　　真题链接:<br>　　A: Do Chinese people love birds? Why?<br>　　Q: I suppose so, especially elderly people. They love to walk with their birds in the parks or gardens in the morning; on the other hand, I don’t think young guys really get a kick out of birds.</p><h2 id="7-Emphasis-强调"><a href="#7-Emphasis-强调" class="headerlink" title="7. Emphasis(强调)"></a>7. Emphasis(强调)</h2><p>　　even more, above all, indeed, more importantly, besides<br>　　真题链接：<br>　　A: Do you love studying English? Explain why.<br>　　Q: As an universal language, English enables me to travel around a lot of countries in the world. More importantly, I make a lot of foreign friends and become more confident than ever.</p><h2 id="8-Concession-让步"><a href="#8-Concession-让步" class="headerlink" title="8. Concession(让步)"></a>8. Concession(让步)</h2><p>　　but even so, even though, though, although, despite (this), in spite of (this), regardless (of this),<br>　　真题链接：<br>　　Q: Do you think land-lines would be replaced by cell phones one day?<br>　　A: Well, cell phones have received a huge popularity among young people, but even so, land-lines still have its irreplaceable strong points. Land lines have no radiation and are much cheaper than cell phones.</p><h2 id="9-Cause-Reason-原因"><a href="#9-Cause-Reason-原因" class="headerlink" title="9. Cause/Reason(原因)"></a>9. Cause/Reason(原因)</h2><p>　　since, as, in that, for the (simple) reason that, because (of the fact), seeing that, owing to (the fact), due to (the fact that)<br>　　真题链接：<br>　　Q: Do you like traveling by train?<br>　　A: Yes, I like traveling by train due to the fact that it’s very convenient and fast. Moreover, I find taking trains are much safer than taking buses.</p><h2 id="10-Effect-Result-影响或结果"><a href="#10-Effect-Result-影响或结果" class="headerlink" title="10. Effect/Result(影响或结果)"></a>10. Effect/Result(影响或结果)</h2><p>　　consequently, hence, thus, because (of this), as a result (of this), for this reason, so that, accordingly, as a consequence, so, therefore<br>　　真题链接：<br>　　Q：How to protect the wild animals?<br>　　A: I believe the most efficient way is to enact laws that will make the hunting of wild animals illegal; therefore, the equilibrium of ecosystem can be maintained.</p><h2 id="11-Condition-条件"><a href="#11-Condition-条件" class="headerlink" title="11. Condition(条件)"></a>11. Condition(条件)</h2><p>　　if, provided that, in the event that (万一), as/so long as, unless, given that, providing that, even if, on (the) condition (that)<br>　　真题链接：<br>　　Q: Have you ever participated in a cultural event?<br>　　A: Yes, of course. It’s one of my favorite cultural events around the year. In the past, I would go to such event if I didn’t have busy academic tasks.</p><h2 id="12-Purpose-目的"><a href="#12-Purpose-目的" class="headerlink" title="12. Purpose(目的)"></a>12. Purpose(目的)</h2><p>　　for the purpose of, in the hope that, for fear that, so that, in order to, lest, in order that, so as to<br>　　真题链接：<br>　　Q: How to protect the wild animals?<br>　　A: I believe the most efficient way is to enact laws that will make the hunting of wild animals illegal, so that the equilibrium of ecosystem can be maintained.</p><h2 id="13-Numerical-顺序性"><a href="#13-Numerical-顺序性" class="headerlink" title="13. Numerical(顺序性)"></a>13. Numerical(顺序性)</h2><p>　　initially, to start with, first of all, to begin with, at first, for a start, secondly, thirdly<br>　　真题链接：<br>　　Q: Do you like living there?<br>　　A: Of course. It’s a great place to live in. First of all, my flat is spacious and bright, with beautiful pictures and painting on the wall. In addition, the neighborhood is……..</p><h2 id="14-Continuation-延续性"><a href="#14-Continuation-延续性" class="headerlink" title="14. Continuation(延续性)"></a>14. Continuation(延续性)</h2><p>　　subsequently, previously, eventually, next, before (this), afterwards, after (this), then<br>　　真题链接：<br>　　Q: How did you learn how to use the Internet?<br>　　A: Friends kept telling me about different websites to check out, after this I tried them one by one and discovered that the web has unlimited uses. Eventually, I found I was using the Internet almost every day on my own.</p><h2 id="15-Conclusion-总结"><a href="#15-Conclusion-总结" class="headerlink" title="15. Conclusion(总结)"></a>15. Conclusion(总结)</h2><p>　　lastly, finally, to conclude (with), as a final point, in the end<br>　　真题链接：<br>　　Q: How exactly will you benefit from this experience?<br>　　A: Well, firstly I will meet new people and learn about their daily lives and learn to speak different languages. In addition to this, I will travel a lot of historical sites. At last, studying overseas is an amazing experience from a cultural point of view.</p><p>　　这15种过渡词，如果使用得当，相信会使你与雅思考官的交流更加自然，流畅，但也要提醒同学们不要滥用或者错用这些过渡词，比如表达原因时用了结果过渡词，或者表达让步时用了转折过渡词，会使自己的语言显得无序，没有任何说服力，起到事倍功半的效果。</p><p><strong>声明：资源源自网络，侵删</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雅思口语替换句型</title>
      <link href="/2019/10/10/ya-si-kou-yu-ti-huan-ju-xing/"/>
      <url>/2019/10/10/ya-si-kou-yu-ti-huan-ju-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="雅思口语替换句型"><a href="#雅思口语替换句型" class="headerlink" title="雅思口语替换句型"></a>雅思口语替换句型</h1><h2 id="1-Talking-About-Personal-Habits"><a href="#1-Talking-About-Personal-Habits" class="headerlink" title="1. Talking About Personal Habits"></a>1. Talking About Personal Habits</h2><p>　　Example question： What do you usually do in the evenings?<br>　　I usually……<br>　　I often……<br>　　While I’m studying I usually……<br>　　Sometimes I…….<br>　　As a rule，I……<br>　　Whenever I can I……    </p><h2 id="2-Expressing-Likes-and-Dislikes"><a href="#2-Expressing-Likes-and-Dislikes" class="headerlink" title="2. Expressing Likes and Dislikes"></a>2. Expressing Likes and Dislikes</h2><p>　　Example question： What kinds of music do you like?<br>　　My favourite …… is……<br>　　I like……<br>　　I enjoy……<br>　　I’m (quite/rather) keen on……<br>　　I just love……<br>　　I absolutely adore…….<br>　　I’m crazy about……<br>　　I’m addicted to……<br>　　I’m really into……<br>　　I don’t mind……<br>　　As far as……is concerned，I can take it or leave it.<br>　　I don’t care too much for…… = I’m not really into……<br>　　My least favourite……is……<br>　　I dislike……<br>　　I can’t stand……<br>　　I hate…… (extreme language)<br>　　I find……    </p><h2 id="3-Expressing-Reasons-for-Likes-and-Dislikes"><a href="#3-Expressing-Reasons-for-Likes-and-Dislikes" class="headerlink" title="3. Expressing Reasons for Likes and Dislikes"></a>3. Expressing Reasons for Likes and Dislikes</h2><p>　　……because……<br>　　……since……<br>　　The main reason I like……is that it’s……<br>　　What I like best about……is……<br>　　The thing I like best about……is……<br>　　The best/worst thing about…… is……<br>　　I don’t like that very much because it’s too……<br>　　That’s because I find it……    </p><h2 id="4-Expressing-a-Preference"><a href="#4-Expressing-a-Preference" class="headerlink" title="4. Expressing a Preference"></a>4. Expressing a Preference</h2><p>　　Example question： Do you (or，would you) prefer to travel alone or with others?   (e.g.a friend)<br>　　I prefer…… because<br>　　My preference is…… because……<br>　　I prefer A to B because……<br>　　If I had the choice，I’d + V…… because…… (假设的话)<br>　　If I had the choice，I’d rather + V……because…… (假设的话)<br>　　If I have the choice，I’ll + V……(a real possibility for the future)    </p><h2 id="5-Comparing"><a href="#5-Comparing" class="headerlink" title="5. Comparing"></a>5. Comparing</h2><p>　　Example question：What are the differences between modern art in China and traditional Chinese art?<br>　　A is bigger than B.<br>　　B is not as big as A.<br>　　You can also use some of these：<br>　　Use “much” as in，“A is much better / worse than B”.<br>　　“A is not nearly as good as B.”<br>　　“B is nowhere near as big as A”<br>　　“A is not quite as important as B.”<br>　　“A is almost as important as B，but not quite.”<br>　　“In comparison to B，A is quite big.” Or，“A is quite big in comparison to B”.<br>　　“Compared to B，A is a lot bigger.”    </p><h2 id="6-Talking-About-Recent-Changes-Comparing-the-recent-past-and-the-present"><a href="#6-Talking-About-Recent-Changes-Comparing-the-recent-past-and-the-present" class="headerlink" title="6. Talking About Recent Changes= Comparing the recent past and the present"></a>6. Talking About Recent Changes= Comparing the recent past and the present</h2><p>　　Example question：Has your hometown changed much in the past few years?<br>(e.g. 20 years)<br>　　Yes，it has. For example，……<br>　　Today there are many more cars on the roads than there were thirty years ago.<br>　　(…… there are/is more_____ than there were/was…….)<br>　　The air pollution is much worse/much better than it used to be.<br>　　( <strong>__</strong> is more <strong><strong>_ than it used to be.)<br>　　Compared to thirty years ago，the population of the city has increased by about two million.<br>　　(Compared to thirty years ago，___</strong></strong> has + 过去分词)<br>　　The population of the city has increased by about two million people in the last thirty years.<br>　　(<strong>__</strong> has + 过去分词 in the last thirty years)<br>　　More people today own a car than was the case thirty years ago.<br>　　(More <strong>_____</strong> today + present tense than was the case thirty years ago.)<br>　　Today，more and more people are living in high-rise apartment buildings whereas thirty years ago，we had very few high-rise apartments buildings in our city.<br>　　(Today <strong>__</strong> are + 现在分词 whereas thirty years ago + past tense)<br>　　More and more large-scale supermarkets are being built nowadays but there were very few of them in my hometown thirty years ago<br>　　(More and more <strong>____</strong> are being + 过去分词 nowadays but + past tense thirty years ago.)    </p><h2 id="7-Contrasting"><a href="#7-Contrasting" class="headerlink" title="7. Contrasting"></a>7. Contrasting</h2><p>　　The question is usually ‘a compare question’. When you answer one of these questions，you can use a contrasting statement. However，since the grammar of the comparing answers (see above) is more difficult，you will impress the examiner more by mostly using that，rather than by using contrasting statements.<br>　　Example： “A is big but B is small.”<br>　　(<strong>__ is ___</strong> but <strong>___ is __</strong>)    </p><h2 id="8-Suggesting"><a href="#8-Suggesting" class="headerlink" title="8. Suggesting"></a>8. Suggesting</h2><p>　　Example questions：What would you suggest a visitor to your country see and do?<br>　　What do you think the government could/should do?<br>　　I’d……(suggest，recommend，say，tell him/her/them)…….<br>　　Maybe/perhaps/possibly…… + could / should……<br>　　It might/may help if…….+ past tense form of verb<br>　　It would probably + (be a good idea，be useful，help) if + past tense form of verb<br>　　I……(suggest，recommend，say)…….    </p><h2 id="9-Expressing-Opinions"><a href="#9-Expressing-Opinions" class="headerlink" title="9. Expressing Opinions"></a>9. Expressing Opinions</h2><p>　　Example question：Do you think that children should always be offered an incentive (a reward of some kind) when parents ask their children to do something?<br>　　I think……<br>　　I believe……<br>　　I feel……<br>　　Personally，I (think，believe，feel)……<br>　　I tend to + (think，feel，believe) that……<br>　　In my opinion，……<br>　　In my view，……<br>　　I’ve always + (thought/believed/felt) that……<br>　　I maintain that……<br>　　I’ve always maintained that……<br>　　It seems to me that……<br>　　I’m convinced that……<br>　　As far as I’m concerned，……<br>　　My view is that……<br>　　From my point of view，……<br>　　To my mind，……<br>　　The way I see it，……<br>　　As I see it，……    </p><h2 id="10-Giving-Reasons-for-Opinions"><a href="#10-Giving-Reasons-for-Opinions" class="headerlink" title="10. Giving Reasons for Opinions"></a>10. Giving Reasons for Opinions</h2><p>　　……because……<br>　　……since……<br>　　The main reason I say that is because ……<br>　　One of the reasons I say that is because…… (One reason I say that is because…… )    </p><h2 id="11-Explaining"><a href="#11-Explaining" class="headerlink" title="11. Explaining"></a>11. Explaining</h2><p>　　Example question： Why are many older people reluctant to learn computer skills?<br>　　The reason why…… is because / is that……<br>　　The main reason why…… is because / is that……<br>　　One reason why…… is because / is that……<br>　　One possible explanation (for that) is……<br>　　To understand why……..，you first need to…….. (understand，know，be aware that)<br>　　Well，it’s like this： …….<br>　　You could look at it this way：……    </p><h2 id="12-Speculating-Guessing-When-You-Don’t-Know"><a href="#12-Speculating-Guessing-When-You-Don’t-Know" class="headerlink" title="12. Speculating ( = Guessing When You Don’t Know)"></a>12. Speculating ( = Guessing When You Don’t Know)</h2><p>　　(When talking about the present or the past)<br>　　Example question： Do old people in China have opportunities to attend any forms of classes?<br>　　Well，I’m not sure but……<br>　　Well，I’ve never thought about that before but……<br>　　I imagine……<br>　　I guess……<br>　　I suppose……<br>　　I’d say ..    </p><h2 id="13-Speculating-guessing-About-the-Future"><a href="#13-Speculating-guessing-About-the-Future" class="headerlink" title="13. Speculating ( = guessing) About the Future"></a>13. Speculating ( = guessing) About the Future</h2><p>　　(Most commonly，how the future will change，compared to now.)<br>　　Example question： How do you think the tourist industry (in China) will develop in the future?<br>　　I predict…… + a noun<br>　　I (can) foresee…… + [a noun + 现在分词] or + a noun<br>　　I imagine / suppose / guess ……<br>　　…… will + adverb (or，adverb + will)<br>　　…… be (present tense) likely to……<br>　　…… be (present tense) bound to……<br>　　…… be (present tense) + going to + V (原形动词) = “will” + V (原形动词)<br>　　There’ll probably / possibly be……<br>　　We might see / have……<br>　　…… will be + 现在分词……<br>　　…… might be + 现在分词……<br>　　I’d be surprised if + past tense/past continuous tense<br>　　I’ll be very surprised if + present tense/past continuous tense<br>　　I expect ..    </p><h2 id="14-Expressing-Plans，Intentions-and-Hopes-for-the-Future"><a href="#14-Expressing-Plans，Intentions-and-Hopes-for-the-Future" class="headerlink" title="14. Expressing Plans，Intentions and Hopes for the Future"></a>14. Expressing Plans，Intentions and Hopes for the Future</h2><p>　　Example question： What are your future work plans? (after you graduate)<br>　　I plan to……<br>　　My plan is to……<br>　　I plan on + Ving (动名词)<br>　　I intend to……<br>　　I hope to……<br>　　I’m going to……<br>　　My ambition is to……<br>　　My immediate goal is to……<br>　　My ultimate (= final) goal is to……<br>　　Ultimately，……<br>　　Hopefully，……<br>　　Ideally，……<br>　　I expect to……<br>　　I’d like to…… = I want to ..<br>　　As an alternative，I might……<br>　　If all goes well，I’ll / I should……<br>　　If everything goes according to plan，I’ll / I should……<br>　　My dream is to……<br>　　It’s always been my hope/plan/ambition/dream to……<br>　　My heart is set on + Ving (动名词)    </p><h2 id="15-Clarifying"><a href="#15-Clarifying" class="headerlink" title="15. Clarifying"></a>15. Clarifying</h2><p>　　What I mean is……<br>　　My meaning is……<br>　　In other words，<br>　　That is to say，……<br>　　Let me put that another way.<br>　　To put that another way，……<br>　　What I’m trying to say is……<br>　　My point is that……<br>　　More specifically，……<br>　　For example，……<br>　　For instance，……    </p><h2 id="16-Explaining-a-Word-When-you-have-Forgotten-or-don’t-know-the-Word"><a href="#16-Explaining-a-Word-When-you-have-Forgotten-or-don’t-know-the-Word" class="headerlink" title="16. Explaining a Word When you have Forgotten (or don’t know) the Word"></a>16. Explaining a Word When you have Forgotten (or don’t know) the Word</h2><p>　　“I can’t remember the word but……..<br>　　it’s a thing that……<br>　　it’s a type of……<br>　　it’s something you……<br>　　he’s a person who……<br>　　it’s something like……<br>　　it’s similar to……<br>　　it’s kind of like a……”<br>　　These sentences use the present tense because you are speaking in general. For example，”It’s a thing，a tool that you use to put air into your bicycle tyre - you use it like this” (Show the action). (a bicycle pump)  </p><h2 id="17-Speaking-in-General"><a href="#17-Speaking-in-General" class="headerlink" title="17. Speaking in General"></a>17. Speaking in General</h2><p>　　On the whole，……<br>　　As a rule，……<br>　　In general，<br>　　Generally，……<br>　　Generally speaking，……<br>　　For the most part，……<br>　　Typically，<br>　　Usually，    </p><h2 id="其他-amp-分类短句"><a href="#其他-amp-分类短句" class="headerlink" title="其他&amp;分类短句"></a>其他&amp;分类短句</h2><ol><li>表达喜好<br>I prefer A to B because…<br>If I have a choice, I will… (a real possibility)<br>If I had a choice, I would… (not a real possibility, just wishing)<br>For me, A is much more attractive / interesting / preferable than B because… I would much rather do / have / eat / listen to / blah blah blah A than B…  </li><li>叙述<br>When I was a high school student, I went to Guizhou to visit some friends. After I graduated from high school, I …<br>During my visit to Guizhou last year, I…<br>Last year during the Spring Festival, I went to Guizhou to visit some friends.<br>(Also use “Whenever” or “While”)  </li><li>比较和对比<br>A is much better / worse than B.<br>A is not nearly as good as B.<br>A is not quite as important as B.<br>A is almost as tall as B, but not quite.<br>When I compare these two items, it’s clear that…  </li><li>建议<br>Maybe, Perhaps, Possibly<br>One possibility that I can think of is…<br>Another idea to think about is…  </li><li>表达观点<br>It seems to me that…<br>This is only my opinion but…<br>After a lot of thought, I have come to the conclusion that…<br>I’ve never thought about this question much before, but it seems to me that… 6. 解释<br>The reason I believe this is…<br>The most important evidence supporting my belief is…  </li><li>推测<br>I’m not sure what might happen, but one possibility is…<br>It’s hard to predict the future, but I suppose it / we might…  </li><li>分析<br>There are several points to consider, first of which is…<br>We can break this question down into several parts. First…<br>Let’s look at this step by step. To begin with…  </li><li>总结<br>Altogether, there were…<br>In the end, they had to…<br>When we consider all the factors…<br>Considering all of these ideas, maybe the best thing would be to…  </li><li>修正<br>Maybe I’m not making myself clear. I want to say that… What I mean to say is…<br>What I’m trying to say is…<br>Another way to put it is.  </li></ol><h2 id="其他-amp-考试套话"><a href="#其他-amp-考试套话" class="headerlink" title="其他&amp;考试套话"></a>其他&amp;考试套话</h2><ol><li>与考官见面语<br>Glad to meet you here.<br>How nice to see you.<br>Fancy seeing you.<br>How are you?<br>I’m glad to have had the opportunity to meet you here.<br>I’m glad to meet you.<br>I’m pleased to meet you.<br>It’s a pleasure to meet you.  </li><li>完全没听懂问题<br>Could you please rephrase that question/topic?<br>I’m not exactly sure what you mean…  </li><li>对问题似懂非懂<br>Do you mean…?<br>If I understand right…<br>I’m sorry if I’m being a little slow, but…?<br>I’m sorry, I’m not sure I understand. Do you mean (that )… ?<br>So am I right in saying … ?<br>If I’ve got the picture, then …<br>So what you mean is …, right?<br>Sorry, I don’t quite catch you. You mean …?<br>Can I get one thing clear?<br>Would I be correct in supposing …?  </li><li>对问题内容不熟悉<br>I’m not exactly sure how to answer that question, but (perhaps)…<br>That’s a rather difficult question, but (maybe) …<br>I’m sorry, but I don’t know much about …  </li><li>评价考官所提问题<br>That’s difficult to answer, but maybe …<br>I’m sorry, but I don’t know much about …, but perhaps…<br>Maybe I can answer your question by telling you about a personal experience I had. That’s an interesting question … let me see. Well, I suppose that …<br>Yes, that’s a big issue.  </li><li>连接词<br>Well, …<br>Actually …<br>In fact …<br>You see …<br>You know, …<br>How shall I put it…<br>Let me think for a second …<br>Give me a few seconds…  </li><li>接一种方式重述<br>In other words, I am …<br>And that means …<br>Let me put it another way , …<br>What I’m suggesting is …<br>All I ‘m trying to say is …<br>What I’m getting at is …<br>If I can rephrase that …<br>Perhaps I should make that clearer by saying<br>Perhaps it would be more accurate to say …<br>The point I’m making is that ..  </li><li>回答完毕,询问考官司是否还需补充其他信息<br>Have I given you enough information?<br>Would you like me to tell you more about …?<br>Is that all you’d like to know?<br>Is there anything else you wish to know?  </li><li>回答完毕,考生认为已无话可说了.<br>I’m afraid that’s about as much as I know.<br>I think that’s all.<br>I can’t think of anything else right now.  </li><li>最后结束语表达<br>That’s very kind of you. Thank you.<br>Thank you very much for giving me information.<br>Well, thanks for talking to me and I wish you all the best. Thank you, sir?<br>Nice talking to you.<br>I appreciate your talking with me. Goodbye.<br>I enjoyed talking to you.<br>It’s been very helpful talking to you.<br>口语常用表述  </li><li>回答考官居就某事征求你意见 As for as I’m concerned, I think … In my opinion …<br>It seems to me (that )…<br>From where I stand, it is… What I reckon is …<br>I’d like to point out that …<br>If I may say so, this is …<br>I’m convinced that …<br>Personally, I consider …  </li><li>表达对未来的找算和态度<br>Well … as you know, at the moment, I’m studying at …<br>I’m preparing right now to go to university, so my short-term plan is to …<br>If I’m not successful, that is, if something goes wrong, I think I will probably … In the future I would like to complete a master’s degree.<br>I do not know if I will … but I might be able to … I feel inclined to …<br>I’ll do all I can to …<br>I reckon I’ll …<br>I’m figuring on …<br>I have every intention of …  </li><li>表示喜欢某人或某事<br>I have a fancy for …<br>I don’t think I’ve seen anything I like better.<br>I’m very keen on outdoor sports.<br>I’ve always liked fishing.<br>… is a marvelous way of spending a day off .<br>There’s nothing I enjoy more than…<br>I’m crazy about …<br>I can’t find words to express how much I like it.<br>I have a particular fondness for pop song.<br>Walking is one of my favorite pastimes.  </li><li>描述事物<br>It’s made of silk.<br>It had many features.<br>It’s red colored with a steep roof.<br>It’s a 3-room apartment, and it’s about 80 square meters.  </li><li>回忆过去<br>I can still remember the time when I passed my entrance examinations.<br>I’ll never forget the time when I first went to primary school.<br>Once, when I was a college student, I went on a trip which I will never forget. 16. 表达感情<br>I felt so happy that I could jump for joy.<br>I felt like I was in heaven.<br>It impressed me deeply.<br>I felt so depressed.  </li><li>描述流程<br>The first thing you should do /need to do is to plug it in.<br>First, you need to take off the lid.<br>The first step is to get the ingredients prepared.<br>Next, you should select the function you want to use.<br>After that, you should press the button.<br>Finally, switch it off by pressing the red button.<br>The last thing you need to do is to turn off the stove.  </li><li>解释原因<br>In my opinion there are three way of looking at it: first of all … next … then…<br>Well, I think there are two (or three or more) reasons. First, I think it is part of our culture. Second, I think it’s good for our economy. Finally, it gives us time to recharge and be rested for the next working year.<br>The best reason I think the examination system should change is because it prevents too many people from pursuing their dreams.<br>I can come up with about three reasons for the change in people’s diets.  </li><li>谈论变化<br>More and more people in China are learning English.<br>The environmental problem is getting more serious.<br>There has been a rapid increase of farmers moving to the cities.<br>China’s population has remained about the same over the last few years.  </li><li>评价作用<br>Yes, computers play a big role in our lives.<br>Yes, I think it’s an important issue for us in China these days.<br>Friendship is something we all take seriously.<br>In China we consider the family to be key to our society.  </li><li>总结规律<br>In most cases, divorce is something that both parties realize is necessary.<br>Generally (speaking), Chinese people love sports.<br>By and large, Chinese people are very respectful of the elderly.<br>On the whole, Chinese students receive a good education in the basics.  </li><li>表达观点<br>Well, I know many people like it but I think it’s wrong.<br>Yes, these day it is quite popular to go on these chat lines, but I think it’s not very good. A lot of people think the environment is getting better but frankly I think it’s getting worse. 23. 驳斥观点<br>I’m afraid it’s wrong.<br>I don’t think so.<br>I’m afraid what you think about … is not quite right.<br>Sorry, that’s not at all right.<br>No, you’ve got it all wrong.<br>I think the information you have must be incorrect.<br>If I may say so, it’s not the case.<br>If I may say so, you are mistaken there.<br>I’m sorry, there are some misunderstandings here.<br>It doesn’t seem correct to say …<br>I can’t accept that.<br>I couldn’t agree with you less.<br>I don’t think you’re right there.<br>I’m not at all sure, actually …<br>That’s not the way I see it.<br>I can’t go along with your view.<br>On the contrary …<br>I can’t say that I share your view of …<br>I’m afraid I can’t accept your argument.<br>I’m not at all convinced by your explanation.  </li><li>举例说明<br>Let me give you an example.<br>Take … for instance …<br>An example of this would be …<br>And as evidence of that…<br>Let me cite a few instances…<br>To exemplify this theory…<br>To give you an example of this, take … for instance.<br>To illustrate my point…<br>To make it clearer to you …<br>…, such as …  </li><li>假设推理<br>If you allow your traditional customs to disappear, this will have a very bad effect on your culture. If everyone were to eat fast food, we would have a lot of health problems to deal with.<br>If animals were to disappear, we would indeed be showing our irresponsibility to the animal kingdom.  </li><li>表达区别<br>The biggest difference between construction about 20 years ago and today is that 20 years ago much construction was done manually.<br>One large way that big cities differ from small cities is the air.<br>Yes, there are quite a few differences between the way children and adults make friends. A good example is the way they just start using each other’s toys happily without needing permission.  </li><li>表达对比<br>Big cities have more opportunities than small cities.<br>University life is more interesting than middle school life.<br>Families in the past were more dependent on each other, but now they are more independent.<br>There were fewer cars on the roads 20 years ago, compared to now.  </li><li>列举优劣<br>There are two sides to this issue. On one hand, we need tourism to develop our economy. On the other hand, we shouldn’t let it destroy our natural beauty.<br>The main advantage of getting your news on the internet is that it is fast and you can choose what news you want to learn. The disadvantage is it may not be as reliable.<br>The strengths of a traditional family are in its close family support, but the weakness is that often the husband and wife feel trapped in the relationship.<br>The positive side of technology is its contribution to our convenience, but the dark side of it is that it may make us lazier.  </li><li>提出解决方法<br>I think what should be done is to give students more opportunities to demonstrate their creativity.<br>I think this problem could be solved by creating more job opportunities.<br>To solve this problem, I think we should try and set up more facilities for elderly people to meet each other and socialize.  </li></ol><h2 id="其他-amp-常用短句"><a href="#其他-amp-常用短句" class="headerlink" title="其他&amp;常用短句"></a>其他&amp;常用短句</h2><p>  All I want is… 我想要的是……。<br>  All we can do is… 我们所能做的就是…… 。<br>  Do you by any chance know…? 你也许知道……吧?<br>  How do you like…? 你认为……怎么样?<br>  I didn’t realize… 我没意识到……。<br>  I find it hard to… 我发现……很难。<br>  I hate to say it, but… 我实在不想这么说，但是……。<br>  I really appreciate… 我真的很感激……。<br>  I was impressed by… 我被……打动。/ ……给我留下深刻印象。 I’ll try my best to… 我会尽全力……。<br>  I’m fed up with… 我厌倦了……。/我受够了……。<br>  I’m here to… 我是来这里…….。<br>  I’m thinking of… 我打算……。<br>  It is impossible to… ……不可能。<br>  It might be a good idea to… ……或许是个好主意。<br>  …is really something. ……真是了不起。<br>  It was kind of… 有一点……。<br>  Just tell me if… 如果……，尽管告诉我。<br>  …means a lot to me. ……对我来说很重要。<br>  Why don’t you…? 为何不……?  </p><h2 id="其他-amp-实用例句"><a href="#其他-amp-实用例句" class="headerlink" title="其他&amp;实用例句"></a>其他&amp;实用例句</h2><ol><li>I am a student studying in Wuhan University, and I major in Computer Science.<br>我是武汉大学的学生，我的专业是计算机科学  </li><li>I chose my major because I thought it was popular, so it will be easier for me to find a job after graduation. 我之所以选择这个专业，是因为我觉得它很热门，毕业以后我会比较容易找到一份好工作。  </li><li>I came from Hubei province.<br>我来自湖北省。  </li><li>I love my hometown because there are a lot of places of interest and delicious food here.<br>我喜欢我的家乡，因为这里有许多的名胜古迹，还有各种各样的美食。  </li><li>The most famous attraction is Yellow Crane Tower. It was built hundreds of years ago besides the Yangtze River.<br>最出名的旅游景点是黄鹤楼，几百年前它被建于长江边。  </li><li>Every year millions of tourists visit the tower coming from different parts of China.<br>每年都有几百万来自于全国各地的游客参观黄鹤楼。  </li><li>And the most welcomed snack is the hot dry noodle, even though some outlanders do not appreciate it at the beginning, they will love it finally. 最受欢迎的小吃是热干面，虽然有一些外地来的人刚开始并不喜欢吃，但是一段时间以后他 们一定会爱上热干面。  </li><li>My favourite season is definitely winter, because I was born in winter.<br>我最喜欢的季节是冬季，因为我是在冬季出生的。  </li><li>What’s more, I can enjoy the beautiful view after snow while all the buildings and trees are covered by white snow. 另外，在冬天，我可以欣赏雪后的美景，所有的房屋和树木都被皑皑白雪覆盖。  </li><li>The most important things is that I could enjoy the whole winter vacation and celebrate the Spring Festival with family. 最重要的是我可以好好享受整个寒假并且和家人一起庆祝春节。  </li><li>Blue is my favourite, as it has the same colour with sky and ocean. Both of those are enormous. 蓝色是我最钟爱的颜色，因为它和天空以及大海的颜色是一样的，而天空和大海都是同样的 广阔。  </li><li>When people are in bad mood, they can go to the wild field, lay down on the grass and look into the sky or drive a car to the beach to see the sea. 当人们的情绪不太好时，可以去野外躺在草地上仰望天空，或者驱车去海边看海。  </li><li>I believe they will feel much better when they are surrounded by the attractive natural beauty.我相信当人们被自然美景所环绕时，一定会忘记烦恼的。  </li><li>I watched a fantastic movie named “Brave Heart” when I was in the second year in college.<br>在大学二年级的时候，我看了一部电影《勇敢的心》。  </li><li>It presented a Scottish hero, “Wiliam Wallace” who led his people to fight for freedom.<br>它向人们讲述了一个苏格兰英雄威廉姆，他带领人们为自由而战。  </li><li>Unfortunately, he was set up by his partner and executed at the end.不 幸的是他被他的同伴出卖并最终被处死。  </li><li>However, his last screaming invoked Scottish people and encouraged them to pick up his sword to defend their homeland and protect their citizens from the invasion of England.<br>不过，他临终前的呐喊唤醒了苏格兰人们并且激励他们捡起他的剑保家卫国，保护人民免受 英格兰入侵之苦。  </li><li>In China, the most popular flower must be rose, as people believe that the rose stands for love.<br>在中国，最流行的鲜花莫过于玫瑰，因为人们相信玫瑰代表爱情。  </li><li>The youth always give roses to their lovers to show how much they love each other.<br>年轻人经常送玫瑰花给自己的心上人来向他们表达爱意。  </li><li>As for me, Lily is the most meaningful flower, not only because it is beautiful and smells good, but also because it has a similar pronunciation with “Love each other forever” in Chinese. 对我来说，我最喜欢的花是百合。不仅仅因为它的美丽和芳香，还因为百合的汉语发音和百 年好合很像。  </li></ol><p><strong>声明：资源源自网络，侵删</strong>  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雅思口语和写作的100个替换词</title>
      <link href="/2019/10/10/ya-si-kou-yu-he-xie-zuo-de-100-ge-ti-huan-ci/"/>
      <url>/2019/10/10/ya-si-kou-yu-he-xie-zuo-de-100-ge-ti-huan-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="雅思口语和写作的100个替换词"><a href="#雅思口语和写作的100个替换词" class="headerlink" title="雅思口语和写作的100个替换词"></a>雅思口语和写作的100个替换词</h1><ol><li>important = crucial (extremely important), significant (amount or effects large enough to be important)</li><li>common = universal, ubiquitous (if something is ubiquitous, it seems to be every where)</li><li>abundant = ample (enough and usually extra), plentiful (enough for people’s needs and wants)</li><li>stick = adhere, cling (hold on something tightly)</li><li>neglect = ignore. (difference: neglect means someone has not paid enough attention to something; ignore means no attention.)</li><li>near = adjacent (two things next to each other), adjoin (the same as adjacent)</li><li>pursue = woo (man woos woman, old-fashioned), seek (if you seek sth, you try to obtain it. FORMAL)</li><li>accurate = precise (precise is exact and accurate in all details), exact (correct in every detail)</li><li>vague = obscure (unknown or known by only a few people)</li><li>top = peak, summit</li><li>competitor = rival, opponent (especially in sports and politics)</li><li>blame = condemn (if you condemn something, you say it is very bad and unacceptable)</li><li>opinion = perspective, standpoint (means looking at an event or situation in a particular way)</li><li>fame = prestige (describe those who are admired), reputation</li><li>build = erect (you can erect something as buildings, FORMAL), establish</li><li>insult = humiliate (do something or say something which makes people feel ashamed or stupid)</li><li>complain = grumble (complain something in a bad-tempered way)</li><li>primary = radical (very important and great in degree), fundamental</li><li>relieve = alleviate (alleviate means you make pain or sufferings less intense or severe)</li><li>force = coerce into (coerce means you make someone do something she/he does not want to), compel</li><li>enlarge = magnify (magnify means make something larger than it really is)</li><li>complex = intricate (if something is intricate, it often has many small parts and details)</li><li>Lonely = solitary (if someone is solitary, there is no one near him/her)</li><li>small = minuscule (very small), minute,</li><li>praise = extol (stronger than praise), compliment(polite and political)</li><li>hard-working = assiduous (someone who is assiduous works hard or does things very thoroughly)</li><li>difficult = arduous (if something is arduous, it is difficult and tiring, and involves a lot of efforts)</li><li>poor (soil) = barren, infertile (used to describe the soil is so poor that plants cannot be planted on it)</li><li>fragile = brittle, vulnerable (someone who is vulnerable is easily hurt emotionally or physically)</li><li>show = demonstrate (to demonstrate a fact means to make it clear to people.)</li><li>big = massive (large in size, quantity, or extent), colossal (use this word, you emphasize something’s large), tremendous (informal)</li><li>avoid = shun (if someone shuns something, she/he deliberately avoid that something or keep away from it.)</li><li>fair = impartial (someone who is impartial is able to give a fair opinion or decision on something.)</li><li>attack = assault (physically attack someone), assail (attack violently)</li><li>dislike = abhor (abhor means you hate something to a extreme extent for moral reasons), loathe (dislike very much)</li><li>ruin = devastate (it means damage something very badly, or utterly destroy it.)</li><li>always = invariably (the same as always, but better than always)</li><li>forever = perpetual (a perpetual state never changes), immutable (something immutable will never change or be changed)</li><li>surprise = startle (it means surprise you slightly), astound (surprise you to a large degree), astonish(the same as astound)</li><li>enthusiasm = zeal (a great enthusiasm), fervency (sincere and enthusiasm)</li><li>quiet = tranquil (calm and peaceful), serene (calm and quiet)</li><li>expensive = exorbitant (it means too expensive that it should be)</li><li>luxurious = lavish (impressive and very expensive), sumptuous (grand and very expensive)</li><li>boring = tedious (if you describe something tedious, you mean it is boring and frustrating)</li><li>respect = esteem (if you esteem someone, you respect and admire him/her. FORMAL)</li><li>worry = fret (if you fret about something, you worry about it)</li><li>cold = chilly (unpleasantly cold), icy (extremely cold)</li><li>hot = boiling (very hot)</li><li>dangerous = perilous (very dangerous, hazardous) (dangerous, especially to people’s safety and health)</li><li>only = unique (the only one of its kind), distinctive;</li><li>stop = cease (if something ceases, it stops happening or existing)</li><li>part = component (the components of something are the parts that it is made of)</li><li>result = consequence (the results or effects of something)</li><li>obvious = apparent, manifest</li><li>based on = derived from (can see or notice them very easily)</li><li>quite = fairly</li><li>pathetic = lamentable (very uncomfortable and disappointing)</li><li>field = domain (a particular field of thought, activities or interest)</li><li>appear = emerge (come into existence)</li><li>whole = entire (the whole of something)</li><li>wet = moist (slightly wet), damp (slightly wet), humid (very damp and hot)</li><li>wrong = erroneous (incorrect or partly correct)</li><li>difficult = formidable</li><li>change = convert (change into another form)</li><li>typical = quintessential (this word means represent a typical example of something)</li><li>careful = cautious (very careful in order to avoid danger), prudent(careful and sensible)</li><li>ability = capacity, capability (the same as ability)</li><li>strange = eccentric (if some one is eccentric, she/he behaves in a strange way, or his/her opinion is different from most people)</li><li>rich= affluent (if you are affluent, you have a lot of money)</li><li>use = utilize (the same as use)</li><li>dubious = skeptical (if you are skeptical about something, you have doubts on it.)</li><li>satisfy = gratify (if you are gratified by something, it gives you pleasure and satisfaction)</li><li>short = fleeting, ephemeral (if something is ephemeral, it lasts a short time)</li><li>Scholarship = fellowship</li><li>smelly = malodorous (used to describe an unpleasant smell)</li><li>ugly = hideous (if something is hideous, it is very ugly or unattractive)</li><li>attractive = appealing (pleasing and attractive), absorbing (something absorbing can attract you a great deal)</li><li>diverse = miscellaneous (a miscellaneous groups consists of many different kinds of things)</li><li>disorder = disarray, chaos</li><li>crazily = frantically (used to describe someone who behaves in a wild and uncontrolled way)</li><li>rapid = meteoric (ATTENTION: meteoric is only used to describe someone achievessuccess quickly)</li><li>ordinary = mundane (very ordinary and not at interesting or unusual)</li><li>despite = notwithstanding (FORMAL)</li><li>best = optimal (used to describe the best level something can achieve)</li><li>sharp = acute (severe and intense)</li><li>unbelievable = inconceivable (if you deem something inconceivable, you think it very unlike to happen )</li><li>puzzle = perplex (something perplex someone means it confuses and worries him/her because he/she does not understand it)</li><li>method = avenue (a way of getting something done)</li><li>famous = distinguished (used to describe people who are successful in their career)</li><li>ancient = archaic (extremely old and extremely old-fashioned)</li><li>decorate = embellish (embellish means make something look more attractive via decorating it with something else)</li><li>possible = feasible (if something is feasible, it can be done, made or achieved)</li><li>so = consequently, accordingly</li><li>rare = infrequent (doesn’t happen often)</li><li>greedy = rapacious (greedy and selfish)</li><li>individuals,characters, folks = people,persons</li><li>nowadays = currently</li><li>dreadful, unfavorable, poor, adverse, ill = be less impressive</li><li>reap huge fruits = get many benefits</li><li>for my part, from my own perspective = in my opinion</li></ol><p><strong>声明：资源源自网络，侵删</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Massive text de duplication based on simhash algorithm</title>
      <link href="/2019/10/10/massive-text-de-duplication-based-on-simhash-algorithm/"/>
      <url>/2019/10/10/massive-text-de-duplication-based-on-simhash-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、参考资料"><a href="#一、参考资料" class="headerlink" title="一、参考资料"></a>一、参考资料</h2><p><a href="https://www.cnblogs.com/maybe2030/p/5203186.html" target="_blank" rel="noopener">使用SimHash进行海量文本去重</a> by Poll的笔记</p><ol><li><p>simhash主要流程是：</p><ul><li>分词</li><li>加权</li><li>合并</li><li>降维</li></ul></li><li><p>去重的主要思想是：</p><ul><li>仿照hashmap的思想重构一个适合simhash的数据结构</li><li>将64bit位hash分割成多段，例如4段16位，每段作为一个map_key,并使用链表作为map_value, 存储文本hash值</li></ul></li></ol><p>接下来针对一个实例需求来具体实现。</p><h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><h3 id="实例场景"><a href="#实例场景" class="headerlink" title="实例场景"></a>实例场景</h3><ul><li><p>当前有五千万文本数据存储在mongoDB中，里面有许多重复或者大面积相似的文本，现在需要进行去重。（大面积相似的文本也需要去掉）</p></li><li><p>利用simhash解决这个问题刚好， 我主要使用了jieba分词和TF-IDF进行关键词提取并加权，然后利用dict和list自己构建一个符合simhash特点的hashmap.</p></li><li><p>jieba分词使用参考资料:<br><a href="https://blog.csdn.net/sinat_34022298/article/details/75943272" target="_blank" rel="noopener">Python的jieba分词及TF-IDF和TextRank 算法提取关键字</a></p></li></ul><p>  优化tips：<br>    - 数据插入mongo可采用批量插入(insert_many)提高速度<br>    - 对于短文本的数据效果不太好，可能会导致map中key=0的链表长度过长，可以进行一下特判<br>    - 可以采用两个进程并发进行hash去重和数据持久化<br>    - 数据实在太大并且冗余度过高的情况下可以批量跑，等数据量降下来在全量</p><p>  一个不是很确定且暂未实现的优化：<br>    在将64位的hash值划分成4段时，建立四个hash_map, 然后依次对应存储由各自段对应所得的hash_value链表</p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><ul><li><strong>simhash</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> jieba <span class="token keyword">import</span> lcut<span class="token punctuation">,</span> analyse<span class="token keyword">def</span> <span class="token function">count_diff_str</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>min<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">count_diff_int</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    value <span class="token operator">=</span> value1 <span class="token operator">^</span> value2    x <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&amp;</span> value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token number">1</span>        x <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">simhash_</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    keywords <span class="token operator">=</span> analyse<span class="token punctuation">.</span>extract_tags<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> topK<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> withWeight<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    value_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> keywords<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(item[0],item[1])</span>        value <span class="token operator">=</span> hash<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">&amp;</span> value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                value_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                value_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            x <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    value_str <span class="token operator">=</span> <span class="token string">''</span>    value_int <span class="token operator">=</span> <span class="token number">0</span>    x <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> value_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> item <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            value_str <span class="token operator">+=</span> <span class="token string">'1'</span>            value_int <span class="token operator">|</span><span class="token operator">=</span> x        <span class="token keyword">else</span><span class="token punctuation">:</span>            value_str <span class="token operator">+=</span> <span class="token string">'0'</span>        x <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> value_str<span class="token punctuation">,</span> value_int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>去重</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymongoMONGO_CONNECT <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token comment" spellcheck="true"># mongo uri</span>MONGO_DBS <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token comment" spellcheck="true"># mongo database name</span>MONGO_SOURCE_COLLECTION <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token comment" spellcheck="true"># mongo source collectiton name</span>MONGO_TARGET_COLLECTION <span class="token operator">=</span> <span class="token string">'xxx'</span> <span class="token comment" spellcheck="true"># mongo target collectiton name</span>THRESHOLD <span class="token operator">=</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true"># 局部敏感 hash 阈值， 小于这个值视为相同或者大面积重复</span><span class="token comment" spellcheck="true"># 初步清洗一下文本，不用清洗可以略过</span><span class="token keyword">def</span> <span class="token function">clean_ques</span><span class="token punctuation">(</span>ques_txt<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初步清理从MongoDB上download的题目信息，主要是去掉一些css/html样式</span>    <span class="token comment" spellcheck="true"># txt = txt.decode('utf-8')</span>    tmp <span class="token operator">=</span> <span class="token number">0</span>    res <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> ques_txt<span class="token punctuation">:</span>        <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'&lt;'</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">continue</span>        <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> tmp <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">continue</span>        <span class="token keyword">elif</span> tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> res <span class="token operator">+</span> ch    res <span class="token operator">=</span> res<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;nbsp;"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"收录："</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 二进制的str转十进制的int</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    x <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            res <span class="token operator">|</span><span class="token operator">=</span> x        x <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 十进制的int转二进制的str</span><span class="token keyword">def</span> <span class="token function">int2str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token string">''</span>    x <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&amp;</span> data <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">'0'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">'1'</span>        x <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> reshash_map <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    repeated_count <span class="token operator">=</span> <span class="token number">0</span>    count <span class="token operator">=</span> <span class="token number">0</span>    client <span class="token operator">=</span> pymongo<span class="token punctuation">.</span>MongoClient<span class="token punctuation">(</span>MONGO_CONNECT<span class="token punctuation">)</span>    db <span class="token operator">=</span> client<span class="token punctuation">[</span>MONGO_DBS<span class="token punctuation">]</span>    source_col <span class="token operator">=</span> db<span class="token punctuation">[</span>MONGO_SOURCE_COLLECTION<span class="token punctuation">]</span>    target_col <span class="token operator">=</span> db<span class="token punctuation">[</span>MONGO_TARGET_COLLECTION<span class="token punctuation">]</span>    sum_count <span class="token operator">=</span> source_col<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 小规模测试时加limit, 正式时去掉limit</span>    source_cursor <span class="token operator">=</span> source_col<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(source_col.count())</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> source_cursor<span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> count <span class="token operator">%</span> <span class="token number">100000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"count: "</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"rate of progress: "</span><span class="token punctuation">,</span> <span class="token string">"%.2f%%"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>count<span class="token operator">/</span>sum_count<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ques <span class="token operator">=</span> clean_ques<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(ques)</span>        old_id <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span>        hash_value_str<span class="token punctuation">,</span> hash_value_int <span class="token operator">=</span> simhash_<span class="token punctuation">(</span>ques<span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            key <span class="token operator">=</span> str2int<span class="token punctuation">(</span>hash_value_str<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            content_list <span class="token operator">=</span> hash_map<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> None<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> content_list<span class="token punctuation">:</span>                new_list <span class="token operator">=</span> <span class="token punctuation">[</span>hash_value_int<span class="token punctuation">]</span>                hash_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> new_list            <span class="token keyword">elif</span> <span class="token operator">not</span> flag<span class="token punctuation">:</span>                content_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hash_value_int<span class="token punctuation">)</span>                hash_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> content_list            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> item <span class="token keyword">in</span> content_list<span class="token punctuation">:</span>                    <span class="token keyword">if</span> count_diff_int<span class="token punctuation">(</span>item<span class="token punctuation">,</span> hash_value_int<span class="token punctuation">)</span> <span class="token operator">&lt;</span> THRESHOLD<span class="token punctuation">:</span>                        flag <span class="token operator">=</span> <span class="token boolean">False</span>                        <span class="token keyword">break</span>                <span class="token keyword">if</span> <span class="token operator">not</span> flag<span class="token punctuation">:</span>                    content_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hash_value_int<span class="token punctuation">)</span>                    hash_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> content_list        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'ques'</span><span class="token punctuation">:</span> ques<span class="token punctuation">,</span> <span class="token string">'old_id'</span><span class="token punctuation">:</span> old_id<span class="token punctuation">,</span> <span class="token string">'hash_value'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>hash_value_int<span class="token punctuation">)</span><span class="token punctuation">}</span>            target_col<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            repeated_count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"total documents: "</span><span class="token punctuation">,</span> sum_count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"total count: "</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"repeated count: "</span><span class="token punctuation">,</span> repeated_count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"valid count: "</span><span class="token punctuation">,</span> count <span class="token operator">-</span> repeated_count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"valid rate: "</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> repeated_count<span class="token operator">/</span>count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"repeated rate: "</span><span class="token punctuation">,</span> repeated_count<span class="token operator">/</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>simhash test</strong></li></ul><pre class="line-numbers language-python"><code class="language-python">sentence1 <span class="token operator">=</span> <span class="token string">"I don't like the first one．I like _________．（　　）A．twoB．secondC．the second "</span>sentence2 <span class="token operator">=</span> <span class="token string">'To stay awake， he coffee and ordered _______．（　　）A．．otherC．the othersD．another           '</span>str1<span class="token punctuation">,</span> _ <span class="token operator">=</span> simhash_<span class="token punctuation">(</span>sentence1<span class="token punctuation">)</span>str2<span class="token punctuation">,</span> _ <span class="token operator">=</span> simhash_<span class="token punctuation">(</span>sentence2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count_diff_str<span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IELTS Speaking</title>
      <link href="/2019/10/09/ielts-speaking/"/>
      <url>/2019/10/09/ielts-speaking/</url>
      
        <content type="html"><![CDATA[<h2 id="2019年9月换题季口语题卡完整版"><a href="#2019年9月换题季口语题卡完整版" class="headerlink" title="2019年9月换题季口语题卡完整版"></a>2019年9月换题季口语题卡完整版</h2><p>题卡包括：  </p><ul><li>P1：10新+22旧（共32道）  </li><li>P2&amp;P3：22新+25旧（共47道）  </li></ul><h3 id="Uncertainty"><a href="#Uncertainty" class="headerlink" title="Uncertainty"></a>Uncertainty</h3><h4 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h4><ol><li><strong>Who give you the name?</strong>  </li></ol><blockquote><p>When I was born, my parents discussed together to give me this name. They searched<br>for some good words from a Chinese dictionary, and chose the “Xiao” as my first name.  </p></blockquote><ol start="2"><li><strong>Any special meaning for your name?</strong>  </li></ol><blockquote><p>My name is LingXiao. Ling is my family name, and the literal meaning of ‘Xiao’ in Chinese meants the day-break, the beginning of a day, which implys that I am the hope of my family.  </p></blockquote><ol start="3"><li><strong>Are there any special meaning for your name?</strong>  </li></ol><blockquote><p>Yes, for instance, fuqiang, jianjun, jiangguo. these names are ralated to the prosperity of China.  </p></blockquote><ol start="4"><li><strong>Do people feel that their name is very important?</strong>  </li></ol><blockquote><p>It depends, some people may think their name is vital, since it carrys the expectation of the parents. However, others may think it does not matter whatever the name is and the name can’t affect their attitude to life.  </p></blockquote><ol start="5"><li><strong>Would you change your name?</strong>  </li></ol><blockquote><p>No, I won’t change my name. because my name has accompanied me since I was born. It affects me in every aspect of my life.  </p></blockquote><ol start="6"><li><strong>It is easy to change your name in your country?</strong>  </li></ol><blockquote><p>Yes, It’s easy to change name in our country. If people want to change his name, he just needs to carry materials like ID card and family register to departments concerned.  </p></blockquote><ol start="7"><li><strong>who usually names babies in your country?</strong>  </li></ol><blockquote><p>It varies. In some families, it is parents who usually name babies while in some other families, it is grandparents who often give babies names. But, there’s also a special situation in China that some families, those doing business in particular, would like a fortune teller to name their babies.  </p></blockquote><ol start="8"><li><strong>What names are most common in your hometown?</strong>  </li></ol><blockquote><p>In my hometown, names like wei, qiang, zhuang also are the most prevalant. And parents who give these names to their babies expect their babies can grow up healthily and become strong and outstanding.  </p></blockquote><ol start="9"><li><strong>Do Chinese people like changing their names? Why or why not?</strong>  </li></ol><blockquote><p>In my personal opinion, generally Chinese people don’t like changing their names, because to most people names are just symbols, though some people do believe names can affect the course of their life. In that case, if they are not content with who they are or what they have, they may change their names.  </p></blockquote><h3 id="P1-NEW"><a href="#P1-NEW" class="headerlink" title="P1 NEW"></a>P1 NEW</h3><h4 id="1-Haircut"><a href="#1-Haircut" class="headerlink" title="1.Haircut"></a>1.Haircut</h4><p>How often do you have a haircut?<br>How long have you had your current haircut?<br>Have you ever had an unhappy haircut experience?<br>Do you like to have your hair cut?  </p><blockquote><p>It depends. I usually have a haircut once a month. However, if I am depressed, sometimes I will change my haircut so that I can have a better mood.</p></blockquote><blockquote><p>I had my current haircut last week to welcome the new year.</p></blockquote><blockquote><p>Of course. I went to an unfamiliar barbershop in last year and they gave me an ugly crew haircut. Additionally, their charge is too expensive to be acceptable. Hence, I did not go there any more.</p></blockquote><blockquote><p>Absolutely. A new haircut can bring me a new feeling to life and make me pleasant all day. furthermore, sometimes,too long hair may make me uncomfortable.</p></blockquote><h4 id="2-Jeans"><a href="#2-Jeans" class="headerlink" title="2.Jeans"></a>2.Jeans</h4><p>Do you wear jeans？<br>How often do you wear jeans?<br>Do you like wearing jeans, why?<br>Why do you think jeans are popular?  </p><blockquote><p>Definitely. Jeans are my favorite clothes and I would wear they as long as the weather permits.</p></blockquote><blockquote><p>Actually, I don’t really count the times of wearing jeans. It’s about twice a week.<br>And I like to wear jeans because they wear well and comfortably  </p></blockquote><blockquote><p>Absolutely. I prefer jeans compared with other clothes. Not only are they fasionable, but also its materials are durable so that they can be worn for long time.</p></blockquote><blockquote><p>In my view, Firstly, jeans are cheaper and much more durable than other clothes. As a result, many people who are not rich like buying them. Besides, its various styles which can meet the need of different people make it prevalent.</p></blockquote><h4 id="3-Concentration"><a href="#3-Concentration" class="headerlink" title="3.Concentration"></a>3.Concentration</h4><p>When do you need to be focused?<br>What may distract you when you’re trying to stay focused?<br>What do you do to help you concentrate?<br>Is it difficult for you to stay focused on something?  </p><blockquote><p>There are several occations which I need to concentrate on, such as attending class,  having a exam, playing games.</p></blockquote><blockquote><p>Actually, social media may be the major element which can distract me seriously. I always check my phone from time to time.</p></blockquote><blockquote><p>Firstly, Stay away my phone and computer. and then I my try to forget other unrelated things when I need to be focused..</p></blockquote><blockquote><p>It depends whether the thing need to be focused is interesting or not. If it is really tedious, for instance, some dull and compulsory lectures, I will choose to some meaningful things like homework. By contrast, if it is interesting and attractive, it is natural for me to stay focused.</p></blockquote><h4 id="4-Voice"><a href="#4-Voice" class="headerlink" title="4.Voice"></a>4.Voice</h4><p>Has your voice ever changed?<br>Do you like your own voice?<br>Do you enjoy recording your voice and listening to it?<br>Does your voice sound similar to your parents’?  </p><blockquote><p>Yes, I have. When I was 15 yeas old, my voice have changed from sharp to deep slowly.</p></blockquote><blockquote><p>To be honest. I dislike my voice because it is not beautiful. And when I sing a song in KTV with friends, they always thinks my sounds is too terrible to listen.</p></blockquote><blockquote><p>My sounds is not beautiful especially in recording. So I don’t enjoy it. But sometimes, I have to record it and listen to it, such as to correct my English pronunciation.</p></blockquote><blockquote><p>I don’t think so, our voice are nothing alike. My month’s voice is sharper than mine since I have gone throngh the puberty. As for my father, He is much older than me. The muscle of his vocal cord has loosened up, which makes his voice sounds a little thicker than mine.</p></blockquote><h4 id="5-Walking"><a href="#5-Walking" class="headerlink" title="5.Walking"></a>5.Walking</h4><p>Do you walk a lot?<br>Do you walk more often than in the past?<br>Do you think people will walk more in the future?<br>Where do you usually take a walk?  </p><blockquote><p>No, compared with walking, I like cycling which is as green as walking, but faster than walking.</p></blockquote><blockquote><p>Actually, As the result of fast development of transports, like subway, bike sharing, I walk less often than in the past.</p></blockquote><blockquote><p>I think so. Because there are more and more transports for travel nowadays.  Even for short distance, like from dormitory to classes or hanging out in community, people prefer to use mobility scooter or ride a bike, let alone for long distance like going to work.</p></blockquote><blockquote><p>I usually walk on the road from my home to my company, which is not a long distance.  </p></blockquote><!-- <audio controls="controls" preload="auto"><br><source src="http://stor.cloudmusics.cn/mp3/2019/10/57cb3116cfd9747e27c259fef497c084.mp3" type="audio/mpeg"><br></audio>   --><h4 id="6-Languages"><a href="#6-Languages" class="headerlink" title="6.Languages"></a>6.Languages</h4><p>What languages can you speak?<br>Do you think it’s difficult to learn a new language?<br>Will you learn other languages in the future?<br>Why do you learn English?  </p><blockquote><p>Apart from my mother tongue Chinese, I also can speak English and a little bit of Japanese, which I learned during my exchange experience in Japan.  </p></blockquote><blockquote><p>Absolutely, in my opinion, learning a new language is a long and complex process.<br>You should study it’s vocabulary, pronunciation and grammar in the long term. Most importantly,<br>you need to communicate with others in real life, so that you can master how to use it.</p></blockquote><blockquote><p>Definitely. I may be studying Norwegian if I pass the IELTS and apply the master of Norway Universities successfuly.  </p></blockquote><blockquote><p>There are two reasons for this question. First of all, when I was a primary students, I started to learn English which is a compulsory subjects. Movever, I can communicate with more people and contact more information through English.  </p></blockquote><h4 id="7-Friends"><a href="#7-Friends" class="headerlink" title="7.Friends"></a>7.Friends</h4><p>What kinds of people do you like to make friends with?<br>Do you think you are a good friend for others?<br>What do you think makes good friends?<br>Do you keep in contact with friends from your childhood?  </p><blockquote><p>I prefer to make friends who have common interests as I have. Because we can have a conversation of some topics together.  </p></blockquote><blockquote><p>Of cause. whenever my fiends need for help, I will give him a hand without any hesitation.  </p></blockquote><blockquote><p>In my opinion, mutual understanding and respect are vital for being good friends, which can let friends get along well with each other.  </p></blockquote><blockquote><p>Absolutely. we still keep in contact and once time is permitted, we will have a party. Also, I usually send a greedy email to them at their birthday.  </p></blockquote><h4 id="8-Animals"><a href="#8-Animals" class="headerlink" title="8.Animals"></a>8.Animals</h4><p>What wild animal do you like most?<br>Have you ever seen any wild animals before?<br>dDo you like to go to the zoo?<br>Have you ever kept pets?  </p><blockquote><p>my favourite wild animal is tiger, which is also my sign of zodiac. And why I like them most is that I want to became as brave and strong as they are.  </p></blockquote><blockquote><p>Definitely. I have ever seen snakes in rural area vhich look like scary. And I am so scared of them.  </p></blockquote><blockquote><p>Absolutely. Zoo is one of my favourite places where there are various wild animals I have never seen.  I often go there from my childhood.  </p></blockquote><blockquote><p>Yes. I had ever a cute dag when I am a primary student. when I felt sad, he accompanied and played with me and then my feeling became well.  </p></blockquote><h4 id="9-Movies"><a href="#9-Movies" class="headerlink" title="9.Movies"></a>9.Movies</h4><p>What’s your favorite movie?<br>Do your friends like this movie?<br>Do you want to be a movie star?<br>What kinds of movies do you think young people like?  </p><blockquote><p>Speaking about movies, my favorite movie is <avatar>, which mainly tells us a story about that the human Jack puts on the body of avatar and flies to the distant planet Pandora to exploit resources, but finally fight against humanity for the protection of the planet Pandora. It’s been eight years, but I still remember the plot.</avatar></p></blockquote><blockquote><p>Yes, They do. We watched the film together. When it comes to film, we always mention it</p></blockquote><blockquote><p>Absolutely. Being a movie star was my childhood dream. Being a movie star means that it’s easier for you to earn both fame and fortune to improve your quality of life. What’s more, it’s fun for me to play different roles in different movies.</p></blockquote><blockquote><p>No need to think. For boys, they watch a lot of science fiction movies, especially those made by the Marvel Company. It sometimes confuses me how boys’ passion can be evoked so naturally, once they watch a science fiction movie. They stare at the screen absorbedly, like they are a part of it. And girls, you know, like romantic movies. Just like the boys, once sitting in front of the TV, they can’t be distracted by anything.</p></blockquote><h4 id="10-Countryside"><a href="#10-Countryside" class="headerlink" title="10.Countryside"></a>10.Countryside</h4><p>Have you ever lived in the countryside?<br>Do you enjoy living in the countryside?<br>What do you usually do in the countryside?<br>Will you live in the countryside in the future?  </p><blockquote><p>Yes. I lived in the countryside with my family in my childhood. And when I went to middle school, due to the distance between my home and school, I have to live in dormitory with my classmates.</p></blockquote><blockquote><p>Absolutely. Living in the countryside is my best time. There is fresh air, beautiful natural scenery and many small animals that are not seen in the city. What’s more, all my family live in the countryside. I enjoy living in the countryside.</p></blockquote><blockquote><p>When it comes the activities I usually do in the rural area, fishing in the fish pond next door and flying kites on the grass are my favorite.  Besides, I often climb mountains with my friends.</p></blockquote><blockquote><p>Yes, I think I will. When I experiences what I want and earns enough money, I will settle down in the countryside in the future.</p></blockquote><h3 id="P2-amp-P3-NEW"><a href="#P2-amp-P3-NEW" class="headerlink" title="P2&amp;P3 NEW"></a>P2&amp;P3 NEW</h3><h4 id="1-童年学校"><a href="#1-童年学校" class="headerlink" title="1. 童年学校"></a>1. 童年学校</h4><p>Describe a school you went to in your childhood<br>You should say<br>Where it was<br>What it was like<br>What you learned there<br>And how you felt about it  </p><blockquote><p> When I was a child, I studied in a countryside school. It was only about one square kilometer without playground, and was made of mud bricks and woods. However, there were several table tennis tables where I could play ping pong with my classmates. At beginning, I don’t know how to play ping pong, and I frequently was defeated by others. But, after my practice day and night, I improved a lot and mastered enormous tricks about table tennis. Then, I defeated other players easily. From the experiences of the school, not only did I learn many useful knowledge like mathematics, English, but also I learnt lots of life philosophy such as “Practice makes perfect!”. I felt fulfilling about my childhood in that countryside school.  </p></blockquote><p>Part 3<br>What’s the difference between current teachers and those in the past?<br>What’s the difference between being taught by teachers and by AI?<br>What’s the difference between private schools and public schools?<br>What’s the difference between international schools and other schools?  </p><h4 id="2-读写的地方"><a href="#2-读写的地方" class="headerlink" title="2. 读写的地方"></a>2. 读写的地方</h4><p>Describe a place (not your home) where you read and write<br>You should say:<br>Where it is<br>What it is like<br>How often you go there<br>And how you feel about this place  </p><p>Part 3<br>What do you think is more important? Reading or writing?<br>Who needs to have good writing skills?<br>Where can people get more information from, words or pictures?<br>At what age should children start to read?  </p><h4 id="3-想与朋友分享的电影"><a href="#3-想与朋友分享的电影" class="headerlink" title="3. 想与朋友分享的电影"></a>3. 想与朋友分享的电影</h4><p>Describe a film you would like to share with your friends<br>You should say:<br>When you watched it<br>Where you watched it<br>Whether you like it or not<br>And why you want to share it with friends  </p><p>Part 3<br>What kind of film is popular?<br>What kind of film do young people like to watch?<br>Do fewer people choose to watch movies in cinema than people did in the past?<br>Do you think cinemas will disappear in the future?  </p><h4 id="4-庆祝自己的成就"><a href="#4-庆祝自己的成就" class="headerlink" title="4. 庆祝自己的成就"></a>4. 庆祝自己的成就</h4><p>Describe an occasion when you celebrated your achievement<br>You should say:<br>What you achieved<br>How you celebrated it<br>Who you celebrated it with<br>And how you felt about it  </p><p>Part 3<br>How do Chinese people celebrate their family events? Is there anything different from other countries?<br>Why is it important for sports fans to celebrate when their favorite team wins?<br>Do people prefer winning in a team or on their own?<br>How are birthday celebrations different between young and old?  </p><h4 id="5-多彩的地方"><a href="#5-多彩的地方" class="headerlink" title="5. 多彩的地方"></a>5. 多彩的地方</h4><p>Describe a place you remember well that is full of colors<br>You should say:<br>Where it is<br>What it is like<br>What it is used for<br>And explain why you remember it well  </p><p>Part 3<br>Is color important for clothing?<br>Should coursebooks be colorful?<br>What color do you think people would choose when decorating their houses?<br>Do you think the color of a company’s uniform represents the image of the company?  </p><h4 id="6-童年喜欢的玩具"><a href="#6-童年喜欢的玩具" class="headerlink" title="6. 童年喜欢的玩具"></a>6. 童年喜欢的玩具</h4><p>Describe a toy you liked in your childhood<br>You should say:<br>What kind of toy it is<br>When you received it<br>How you played it<br>And how you felt about it  </p><p>Part 3<br>How do advertisements influence children?<br>Should advertising aimed at kids be prohibited?<br>Do you think parents should buy more toys for their kids or spend more time with them?<br>What’s the difference between the toys kids play now and those they played in the past?  </p><h4 id="7-选工作或专业建议"><a href="#7-选工作或专业建议" class="headerlink" title="7. 选工作或专业建议"></a>7. 选工作或专业建议</h4><p>Describe an advice you received on choosing your major or work<br>You should say:<br>What it was<br>When you received it<br>Who you received it from<br>And how you felt about it  </p><p>Part 3<br>Why do so many young people choose communication and media studies as their major?<br>Why do young people find it hard to make career choices?<br>What can affect the career choices of young people?<br>Can people have free choices of their jobs?  </p><h4 id="8-初见某人的时刻"><a href="#8-初见某人的时刻" class="headerlink" title="8. 初见某人的时刻"></a>8. 初见某人的时刻</h4><p>Describe an occasion when met someone for the first time<br>You should say:<br>Where you met him or her<br>When you met him or her<br>What you talked about<br>And how you felt about it  </p><p>Part 3<br>Do you think it’s strange to make friends online?<br>Why do some people have few friends?<br>Which is more important, new friendships or old ones?<br>How do companies welcome their new employees?  </p><h4 id="9-特别的一天"><a href="#9-特别的一天" class="headerlink" title="9. 特别的一天"></a>9. 特别的一天</h4><p>Describe a special day that you remember well<br>You should say:<br>Where you were<br>Who you were with<br>What you did<br>And explain why you remember it well  </p><p>Part 3<br>Do people spend too much money on their birthday parties or weddings?<br>How much do you think people should spend on their birthday parties or weddings?<br>Which is the better way to retain memories, by videos or photos?<br>How can forgetful people remember things better?  </p><h4 id="10-不用工作或学习的一天"><a href="#10-不用工作或学习的一天" class="headerlink" title="10. 不用工作或学习的一天"></a>10. 不用工作或学习的一天</h4><p>Describe a time you enjoyed a free day off work or school<br>You should say:<br>Where you were<br>What you did<br>Who you were with<br>And how you felt about it  </p><p>Part 3<br>Do people have more free time than those in the past?<br>What do people like to do when they are free in your country?<br>Do you think most people are able to manage their free time well?<br>What’s the difference between the things people did in their free time in the past and the things they do nowadays?  </p><h4 id="11-无聊经历"><a href="#11-无聊经历" class="headerlink" title="11. 无聊经历"></a>11. 无聊经历</h4><p>Describe an experience that you got bored when you were with others<br>You should say:<br>When it was<br>Who you were with<br>What you did<br>And explain why you were bored  </p><p>Part 3<br>Why do people get bored?<br>Why are people less interested in reading books nowadays?<br>Why do some people choose boring jobs?<br>Are all the boring jobs going to be done by robots in the future?  </p><h4 id="12-经常坐飞机的人"><a href="#12-经常坐飞机的人" class="headerlink" title="12. 经常坐飞机的人"></a>12. 经常坐飞机的人</h4><p>Describe a person who often travels by plane<br>You should say:<br>Who he or she is<br>Where he or she goes<br>Why he or she travels by plane<br>And how he or she feels about it  </p><p>Part 3<br>What are the advantages of traveling by plane?<br>Why do some people prefer to travel by train?<br>What are the disadvantages of living near an airport?<br>How is working at the airport different from working in other places?  </p><h4 id="13-擅长工作的人"><a href="#13-擅长工作的人" class="headerlink" title="13. 擅长工作的人"></a>13. 擅长工作的人</h4><p>Describe a person who is good at his or her job<br>You should say:<br>Who this person is<br>What his or her job is<br>How he or she likes the job<br>And explain why this person is good at the job  </p><p>Part 3<br>How should young people perform on their first jobs?<br>How can people improve their job performance?<br>What skill set should a manager have?<br>Do you think what you have learned in university is going to help in your future job?  </p><h4 id="14-美丽天空"><a href="#14-美丽天空" class="headerlink" title="14. 美丽天空"></a>14. 美丽天空</h4><p>Describe a beautiful sky you enjoyed seeing<br>You should say:<br>Where you saw it<br>Who you saw it with<br>What you saw<br>And how you felt about it  </p><p>Part 3<br>Should kids know more about stars and planets?<br>Is high technology helpful for star watching?<br>What kinds of people are interested in stars?<br>Why do some people like to watch movies about stars or planets?  </p><h4 id="15-精心准备的礼物"><a href="#15-精心准备的礼物" class="headerlink" title="15. 精心准备的礼物"></a>15. 精心准备的礼物</h4><p>Describe a gift that took you a lot of time to prepare<br>You should say:<br>What it was<br>Who you gave it to<br>How you prepared it<br>And explain why you spent a lot of time preparing it  </p><p>Part 3<br>How do people usually choose gifts?<br>Why do some people find it hard to choose gifts?<br>Do you think practical gifts are always better than other ones like cards and flowers?<br>Do people give the same gifts as they did in the past?  </p><h4 id="16-室内游戏"><a href="#16-室内游戏" class="headerlink" title="16. 室内游戏"></a>16. 室内游戏</h4><p>Describe an experience that you played an indoor game with others<br>You should say:<br>What you played<br>Who you played it with<br>Why you played it<br>And how you felt about it  </p><p>Part 3<br>What indoor games do children like to play nowadays?<br>What qualities should a team leader have?<br>Is teamwork important to individuals?<br>What do you think of people spending too much time playing computer games?  </p><h4 id="17-很累但要保持清醒"><a href="#17-很累但要保持清醒" class="headerlink" title="17. 很累但要保持清醒"></a>17. 很累但要保持清醒</h4><p>Describe a time you were sleepy but had to stay awake<br>You should say:<br>When it happened<br>Why you were sleepy<br>Why you had to stay awake<br>And how you stayed awake  </p><p>Part 3<br>On what occasions do people need to keep awake when they feel tired?<br>How do people keep awake when they are tired?<br>Why do people feel tired a lot nowadays?<br>What kind of people lack sleep?  </p><h4 id="18-地区特产"><a href="#18-地区特产" class="headerlink" title="18. 地区特产"></a>18. 地区特产</h4><p>Describe a popular product (e.g. food, handicraft…) made in your region<br>You should say:<br>What it is<br>What it is like<br>How it is made<br>And explain why it is popular  </p><p>Part 3<br>Why do people use imported products?<br>Do different places have their own popular products?<br>What food is popular throughout the world?<br>Why do people living in different regions like different food?  </p><h4 id="19-家庭休闲活动"><a href="#19-家庭休闲活动" class="headerlink" title="19. 家庭休闲活动"></a>19. 家庭休闲活动</h4><p>Describe a leisure activity you do with your family<br>You should say:<br>What it is<br>When you do it<br>How you do it<br>And how you feel about it  </p><p>Part 3<br>What leisure activities are popular in China?<br>What leisure activities do young people like?<br>Do leisure activities have to be educational?<br>Do men and women like different leisure activities?  </p><h4 id="20-借过的好用的东西"><a href="#20-借过的好用的东西" class="headerlink" title="20. 借过的好用的东西"></a>20. 借过的好用的东西</h4><p>Describe something useful you borrowed from others<br>You should say:<br>What it was<br>When you borrowed it<br>Who you borrowed it from<br>And explain why you borrowed it  </p><p>Part 3<br>What kinds of things do people borrow from each other?<br>What are the things that people don’t choose to lend to others?<br>What do you think of copying ideas from others?<br>Do we always need to get permissions from others before using something they have?  </p><h4 id="21-房间的照片"><a href="#21-房间的照片" class="headerlink" title="21. 房间的照片"></a>21. 房间的照片</h4><p>Describe a picture or photograph you like in your room<br>You should say:<br>What is in it<br>Where it is<br>How you got it<br>And explain why you like it  </p><p>Part 3<br>What are the advantages and disadvantages of taking photos with smartphones?<br>Do you think photographers are artists?<br>What are the benefits of learning painting for children?<br>Can anyone become a famous artist through hard work?  </p><h4 id="22-骗朋友的经历"><a href="#22-骗朋友的经历" class="headerlink" title="22. 骗朋友的经历"></a>22. 骗朋友的经历</h4><p>Describe a time when you did not tell a friend the truth<br>You should say:<br>When it was<br>Where it happend<br>Why you did not tell the truth<br>And how you felt about it  </p><p>Part 3<br>Do you think mutual trust between friends is important?<br>Do you think people need to tell the truth all the time?<br>Why do children tell lies?<br>What should parents do if their children tell lies?  </p><h3 id="P1-OLD"><a href="#P1-OLD" class="headerlink" title="P1 OLD"></a>P1 OLD</h3><h4 id="1-The-area-you-live-in"><a href="#1-The-area-you-live-in" class="headerlink" title="1. The area you live in"></a>1. The area you live in</h4><p>Do you like the area that you live in?<br>What are some changes in the area recently?<br>Do you know any famous people in your area?<br>Where do you like to go in that area?  </p><h4 id="2-tea-and-coffee"><a href="#2-tea-and-coffee" class="headerlink" title="2. tea and coffee"></a>2. tea and coffee</h4><p>Do Chinese people like to drink tea or coffee?<br>Do you prepare tea or coffee for the guests at home?<br>When was the last time you drank tea or coffee?  </p><h4 id="3-public-holiday"><a href="#3-public-holiday" class="headerlink" title="3. public holiday"></a>3. public holiday</h4><p>How many public holidays do you have in China?<br>Do you think people need more public holidays?<br>How do you usually spend your holidays?<br>Which holiday is your favorite?  </p><h4 id="4-Patience"><a href="#4-Patience" class="headerlink" title="4. Patience"></a>4. Patience</h4><p>Were you patient when you were young?<br>How do you feel when other people are not patient?<br>Were you less or more patient when you were angry?  </p><h4 id="5-Home-Accommodation"><a href="#5-Home-Accommodation" class="headerlink" title="5. Home/Accommodation"></a>5. Home/Accommodation</h4><p>Who do you live with?<br>What kinds of housing/accommodation do you live in?<br>Do you live in a house or a flat?<br>What’s the difference between where you are living now and where you have lived in the past?<br>Can you describe the place where you live?<br>What room does your family spend most of the time in?<br>How long have you lived there?<br>What do you usually do in your house/flat/room?<br>Do you plan to live there for a long time?<br>Are the transport facilities to your home very good?<br>Please describe the room you live in?<br>Do you prefer living in a house or a flat?<br>What part of your home do you like the most?  </p><h4 id="6-Weather"><a href="#6-Weather" class="headerlink" title="6. Weather"></a>6. Weather</h4><p>Do you prefer dry or wet weather?<br>What kind of weather do you like most?<br>What’s your favourite season?<br>What kind of weather is typical in your hometown?  </p><h4 id="7-Photos"><a href="#7-Photos" class="headerlink" title="7. Photos"></a>7. Photos</h4><p>Do you like to take photos?<br>Do you prefer to take photos yourself or to have other people take photos?<br>How often do you take photos?<br>In what situations do you take photos?<br>How do you keep your photos?  </p><h4 id="8-Travel"><a href="#8-Travel" class="headerlink" title="8.Travel"></a>8.Travel</h4><p>Do you like travelling?<br>Which cities have you travelled to?<br>What kind of cities do you like to travel to?<br>What is the place that left you the deepest impression when travelling?  </p><h4 id="9-Music"><a href="#9-Music" class="headerlink" title="9. Music"></a>9. Music</h4><p>When do you listen to music?<br>How much time do you spend listening to music every day?<br>What kinds of music do you like to listen to?<br>What’s your favorite kind of music?<br>Have you ever been to a concert before?  </p><h4 id="10-Work-or-study"><a href="#10-Work-or-study" class="headerlink" title="10. Work or study"></a>10. Work or study</h4><p>What work do you do?<br>Do you like your job?<br>Why did you choose to do that type of work (or, that job)?<br>Do you miss being a student?<br>Why did you choose to study that subject/ Why did you choose to study those subjects?<br>What subjects are you studying?<br>Do you prefer to study in the mornings or in the afternoons?<br>Are you looking forward to working?<br>Do you like your subject?(Why?/Why not?)  </p><blockquote><p>My work is programming, which also is relevant to my major in my University. And I work in Shanghai now.  </p></blockquote><blockquote><p>Absolutely yes. Because not only can I earn some programming experience for my job, but also there are many benefits in our company. for example, foods like dessert and snacks are provided for free in my company, and there is housing subsidies every month.  </p></blockquote><blockquote><p>There are two reasons for that. One of the reasons is that the job is closely ralated to my major Computer Science.<br>For another reason, in my view, IT industry will have a broad prospect in the future, and I am unlikely lose my job.  </p></blockquote><h4 id="11-Hometown"><a href="#11-Hometown" class="headerlink" title="11. Hometown"></a>11. Hometown</h4><p>What’s (the name of) your hometown (again)?<br>Is that a big city or a small place?<br>How long have you been living there?<br>Do you like your hometown?<br>Is there anything you dislike about it?<br>What do you like (most) about your hometown?<br>Do you like living there?<br>Please describe your hometown a little.<br>Do you think you will continue living there for a long time?  </p><h4 id="12-Perfume"><a href="#12-Perfume" class="headerlink" title="12. Perfume"></a>12. Perfume</h4><p>Do you use perfume?<br>What kind of perfume do you like?<br>What does perfume mean to you?<br>Do you give perfume as a gift?    </p><h4 id="13-Smile"><a href="#13-Smile" class="headerlink" title="13. Smile"></a>13. Smile</h4><p>Do you like to smile?<br>When do people smile at others?<br>Do you smile when people take pictures of you?<br>Can you recognise a fake smile?    </p><h4 id="14-Reading"><a href="#14-Reading" class="headerlink" title="14. Reading"></a>14. Reading</h4><p>Do you like reading?<br>What kind of books do you read?<br>Do you read electronic books?<br>Do you read books related to your profession?    </p><h4 id="15-Outdoor"><a href="#15-Outdoor" class="headerlink" title="15. Outdoor"></a>15. Outdoor</h4><p>Do you prefer to be indoors or outdoors?<br>Did you like to go outside when you were young?<br>Did you often go over to your friends’ house when you were young?<br>Is it important for children to play outdoors?  </p><h4 id="16-Math"><a href="#16-Math" class="headerlink" title="16. Math"></a>16. Math</h4><p>Do you think mathematics is important?<br>Do you think it’s difficult to learn mathematics well?<br>Are girls generally good at mathematics?<br>Do you often use a calculator?    </p><h4 id="17-Plan"><a href="#17-Plan" class="headerlink" title="17. Plan"></a>17. Plan</h4><p>Do you make plans every day?<br>Are you good at managing your time?<br>What is the latest plan you made?<br>What is the hardest part about making plans?    </p><h4 id="18-Garbage"><a href="#18-Garbage" class="headerlink" title="18. Garbage"></a>18. Garbage</h4><p>Why do some people throw garbage on the street?<br>What do you do with garbage when you are on the street?<br>How do you feel when you see people throw garbage on the street?<br>Do you think your city is clean or not?    </p><h4 id="19-Market"><a href="#19-Market" class="headerlink" title="19. Market"></a>19. Market</h4><p>What do street markets sell?<br>Are there many street markets in China?<br>What are the differences between street markets and supermarkets?<br>Do you often go to the supermarket?    </p><h4 id="20-Visit-relatives"><a href="#20-Visit-relatives" class="headerlink" title="20. Visit relatives"></a>20. Visit relatives</h4><p>Do you often visit your relatives?<br>What do you do when visiting relatives?<br>When was the last time you visited a relative?<br>Why do people visit their relatives?    </p><h4 id="21-Borrowing-lending"><a href="#21-Borrowing-lending" class="headerlink" title="21. Borrowing / lending"></a>21. Borrowing / lending</h4><p>Have you borrowed books from others?<br>Have you ever borrowed money from others?<br>Do you like to lend things to others?<br>How do you feel when people don’t return things they borrowed from you?  </p><h4 id="22-Social-network"><a href="#22-Social-network" class="headerlink" title="22. Social network"></a>22. Social network</h4><p>How often do you use social networking applications?<br>Why do you use social networking apps?<br>What are the disadvantages of social networking apps?<br>Do you think it is good to make friends online?  </p><h3 id="P2-amp-3-OLD"><a href="#P2-amp-3-OLD" class="headerlink" title="P2&amp;3 OLD"></a>P2&amp;3 OLD</h3><h4 id="1-历史建筑"><a href="#1-历史建筑" class="headerlink" title="1. 历史建筑"></a>1. 历史建筑</h4><p>Describe a historical building you have been to<br>You should say:<br>Where it is<br>What it looks like<br>What it is used for now<br>What you learned there<br>And how you felt about this historical building  </p><p>Part 3<br>Do Chinese people like to visit historical buildings?<br>Why do people visit historical buildings?<br>Is it necessary to protect historical buildings?<br>Do most people agree to the government’s funding to protect historical buildings?  </p><h4 id="2-邀请聚餐"><a href="#2-邀请聚餐" class="headerlink" title="2. 邀请聚餐"></a>2. 邀请聚餐</h4><p>Describe an occasion when you invite your family or friends to dinner<br>You should say:<br>When you invited them<br>Where you had the dinner (At home or at the restaurant?)<br>Why you invited them<br>And how you felt about this dinner  </p><p>Part 3<br>Where do Chinese people usually eat? At restaurants or at home?<br>Why do more and more people like to eat at restaurants rather than at home?<br>What are the advantages and disadvantages of eating at restaurants?<br>Do you think it is possible that everyone will eat at restaurants instead of at home in the future?  </p><h4 id="3-喜欢的歌手"><a href="#3-喜欢的歌手" class="headerlink" title="3. 喜欢的歌手"></a>3. 喜欢的歌手</h4><p>Describe your favorite singer or band<br>You should say:<br>Who your favorite singer is<br>What his/her personality is<br>What kind of style his/her music belongs to<br>And explain why he/she is your favorite singer  </p><p>Part 3<br>What kind of music do people like at different ages?<br>What kind of music is popular in China now and what kind will be in the future?<br>Do people learn to sing nowadays?<br>Do you think the most popular singer is the best one?  </p><h4 id="4-想法有趣的人"><a href="#4-想法有趣的人" class="headerlink" title="4.    想法有趣的人"></a>4.    想法有趣的人</h4><p>Describe a person who has interesting ideas or opinions<br>You should say:<br>Who this person is<br>What this person does<br>How you know him<br>And explain why you think his/her ideas and opinions are interesting  </p><p>Part 3<br>When do children begin to have their own ideas?<br>Why are there more and more differences between children and their parents?<br>What are the advantages and disadvantages of setting rules for children?<br>Is there someone with good ideas that has changed many people’s lives?  </p><h4 id="5-说外语的人"><a href="#5-说外语的人" class="headerlink" title="5.    说外语的人"></a>5.    说外语的人</h4><p>Describe someone who speaks a foreign language well<br>You should say:<br>Who this person is<br>What kind of foreign language he/she speaks<br>Why he/she learns this foreign language<br>And explain why you think he/she speaks this foreign language well  </p><p>Part 3<br>Is learning a foreign language important?<br>What benefits can a foreign language bring to one’s career?<br>Do you think English will be the mainstream language of the world in the future?<br>When learning a foreign language, which part is easier? Speaking or writing?  </p><h4 id="6-早起"><a href="#6-早起" class="headerlink" title="6.    早起"></a>6.    早起</h4><p>Describe an occasion when you got up early<br>You should say:<br>When you got up<br>What you did<br>Why you got up early<br>And how you felt about it  </p><p>Part 3<br>What kind of people usually get up early? And why?<br>Is it easier for older people to get up early than young people?<br>What are the benefits of getting up early?<br>What effect does sleeping in late have on a person’s life patterns?  </p><h4 id="7-助你实现目标的人"><a href="#7-助你实现目标的人" class="headerlink" title="7.    助你实现目标的人"></a>7.    助你实现目标的人</h4><p>Describe a person who encouraged and helped you to achieve a goal<br>You should say:<br>Who this person is<br>What this person encouraged you to do<br>How this person helped you<br>And explain why this encouragement helped you to achieve the goal  </p><p>Part 3<br>Why is it important for teenagers to set goals?<br>What will encourage children to learn more?<br>Do parents and teachers punish children physically nowadays?<br>Who do you think has the greater influence on the goal&gt;setting of children? Teachers or parents?  </p><h4 id="8-交通工具出故障"><a href="#8-交通工具出故障" class="headerlink" title="8.    交通工具出故障"></a>8.    交通工具出故障</h4><p>Describe an experience that the vehicle you took broke down in your travel<br>You should say:<br>Where it happened<br>When it happened<br>Who you were with at that time<br>And what impacts this breakdown had  </p><p>Part 3  </p><p>Who likes to travel more? Older people or younger people?<br>Are there fewer people using private cars because of improved public transport?<br>What do you think needs to be improved in public transport?<br>What are the advantages and disadvantages of private transport?  </p><h4 id="9-给别人建议"><a href="#9-给别人建议" class="headerlink" title="9.    给别人建议"></a>9.    给别人建议</h4><p>Describe a time that you gave advice to others<br>You should say:<br>Who you gave advice to<br>What the advice was<br>Why you gave advice<br>And how you felt about the advice  </p><p>Part 3<br>What kinds of advice do parents give to their children?<br>How do experts give advice to others? (e.g. a doctor gives advice to his patients)<br>What advice do parents give to teenagers about making friends?<br>Whose advice is more helpful? Parents’ or friends’?  </p><h4 id="10-让你笑的小孩"><a href="#10-让你笑的小孩" class="headerlink" title="10.    让你笑的小孩"></a>10.    让你笑的小孩</h4><p>Describe a time a child made you laugh<br>You should say:<br>When it was<br>Where you were<br>Who the child was<br>What the child did<br>And explain why you laughed  </p><p>Part 3<br>What can make children laugh?<br>What do you think is the best age for people to have children?<br>Do you think people should be trained before they become parents?<br>Do you think childhood is the most important in one’s development?  </p><h4 id="11-陌生人的电话"><a href="#11-陌生人的电话" class="headerlink" title="11.    陌生人的电话"></a>11.    陌生人的电话</h4><p>Describe a time you heard a stranger talking on the phone in the public place<br>You should say:<br>Where you were<br>When it was<br>What the stranger was talking about<br>And explain how you felt about it  </p><p>Part 3<br>Why do you think some people talk aloud on public transport?<br>Should people be banned from talking aloud in public places?<br>Is it bad to talk on the phone in public places?<br>Why do some people always break rules in public places?  </p><h4 id="12-外国名人"><a href="#12-外国名人" class="headerlink" title="12.    外国名人"></a>12.    外国名人</h4><p>Describe a foreign celebrity you want to meet in person<br>You should say:<br>Who this person is<br>How you knew about this person<br>What this person does<br>Why you want to meet this person  </p><p>Part 3<br>How can people become famous?<br>What are the advantages and disadvantages of becoming a celebrity?<br>What influences can famous people have on the society?<br>Why can some celebrities stay famous for a long time while some cannot?  </p><h4 id="13-水上运动"><a href="#13-水上运动" class="headerlink" title="13.    水上运动"></a>13.    水上运动</h4><p>What can people do with the Internet in the future? And how?  </p><p>How you found it was incorrect<br>Describe a water sport you would like to try in the future<br>You should say:<br>What it is<br>Where you would like to try it<br>How difficult it is<br>And why you would like to try it  </p><p>Part 3<br>What’s the difference between outdoor sports and indoor sports?<br>What kinds of water sports are popular nowadays?<br>Why should we develop water transport?<br>Do you think it is necessary for everyone to learn to swim?  </p><h4 id="14-利用网络解决问题"><a href="#14-利用网络解决问题" class="headerlink" title="14.    利用网络解决问题"></a>14.    利用网络解决问题</h4><p>Describe a time you solved a problem through the Internet<br>You should say:<br>What the problem was<br>How you solved this problem<br>How long it took to solve this problem<br>And how you felt about it  </p><p>Part 3<br>What do people do online in their free time?<br>What impacts does the Internet have on schools?<br>Do you think many people waste their time online?  </p><h4 id="15-广告"><a href="#15-广告" class="headerlink" title="15.    广告"></a>15.    广告</h4><p>Describe an advertisement you remember well<br>You should say:<br>Where you saw it<br>What it was about<br>What it was like<br>Why you remember it well  </p><p>Part 3<br>Why do some people hate advertisements?<br>Do people usually buy stuff after watching advertisements?<br>Is music useful in advertising?<br>What are the advantages of TV advertisements? How about internet advertisements?  </p><h4 id="16-获得错误信息"><a href="#16-获得错误信息" class="headerlink" title="16.    获得错误信息"></a>16.    获得错误信息</h4><p>Describe an occasion when you got incorrect information<br>You should say:<br>Why you got it<br>When you got it<br>How you got it<br>And how you felt about it  </p><p>Part 3<br>What kinds of professions are related to giving information to others?<br>What’s the difference between giving information by phone and by email?<br>How can people check whether a piece of information is correct or not?<br>Do people trust the information online?  </p><h4 id="17-游戏节目"><a href="#17-游戏节目" class="headerlink" title="17.    游戏节目"></a>17.    游戏节目</h4><p>Describe a game show or a quiz program you watched on TV or online<br>You should say:<br>Where you watched it<br>What it was like<br>How often you watched it<br>How you liked it<br>And explain why you liked/disliked it    </p><p>Part 3<br>Why do people like to watch TV shows?<br>What kinds of TV shows do people like to watch?<br>What is the difference between the games people play now and those people played in the past?<br>Why do some people watch TV shows online?  </p><h4 id="18-实用技能"><a href="#18-实用技能" class="headerlink" title="18.    实用技能"></a>18.    实用技能</h4><p>Describe a practical skill you learned<br>You should say:<br>What it was<br>When you learned it<br>Why you learned it<br>And how you felt about it  </p><p>Part 3<br>What is the most important practical skill in modern society?<br>What kinds of skills are difficult to learn?<br>What kinds of professions require practical skills?<br>What are some special skills that people can learn?  </p><h4 id="19-想获得的奖"><a href="#19-想获得的奖" class="headerlink" title="19.    想获得的奖"></a>19.    想获得的奖</h4><p>Describe a prize you want to win<br>You should say:<br>What this prize is<br>How you knew about it<br>What you will do to win it<br>And explain why you want to win it  </p><p>Part 3<br>What rewards can children get from school?<br>Should parents push their children to get prizes?<br>Is it good for children to compete for prizes at school?<br>What kinds of rewards can companies offer to their outstanding employees?  </p><h4 id="20-纪念品"><a href="#20-纪念品" class="headerlink" title="20.    纪念品"></a>20.    纪念品</h4><p>Describe something special you took home from a tourist attraction<br>You should say:<br>What it was<br>When you bought it<br>Where you bought it<br>What it was like<br>And explain why you think it was special  </p><p>Part 3<br>What souvenirs would people buy from tourist attractions?<br>Why do people like to take photos when travelling?<br>Is it good that the locals sell things to tourists?<br>What are the pros and cons of taking professional cameras when travelling?  </p><h4 id="21-旅游经历"><a href="#21-旅游经历" class="headerlink" title="21.    旅游经历"></a>21.    旅游经历</h4><p>Describe an unusual experience of traveling<br>You should say:<br>Where you went<br>When you went there<br>Who you were with<br>What you did there<br>And explain why it is unusual  </p><p>Part 3<br>What are some popular attractions that people like to visit?<br>Why do many people like to travel abroad?<br>What do people usually do during long holidays?<br>Do you think there will be more ecotourism in the future?  </p><h4 id="22-喜欢穿的衣服"><a href="#22-喜欢穿的衣服" class="headerlink" title="22.    喜欢穿的衣服"></a>22.    喜欢穿的衣服</h4><p>Describe a piece of clothing you enjoy wearing<br>You should say:<br>Where you bought it<br>How often you wear it<br>What it is like<br>And explain why you enjoy wearing it<br>Part 3<br>What’s the difference between the dressing style of young people and that of old people?<br>Do the people living in south China (warmer) wear different clothes from the people living in the north (colder)?<br>Do you think students like to wear uniforms?<br>Why he helps others<br>And how you feel about this person<br>When do people wear formal clothes?  </p><h4 id="23-公园"><a href="#23-公园" class="headerlink" title="23.    公园"></a>23.    公园</h4><p>Describe a park/garden you like visiting<br>You should say:<br>Where the park is<br>When you visit it<br>What the park is like<br>And explain why you like visiting it  </p><p>Part 3<br>What are the benefits that a park can bring to a city?<br>Should people help clean public gardens?<br>Do young people go to the park very often?<br>Why do some people plant flowers at home?  </p><h4 id="24-乐于助人的人"><a href="#24-乐于助人的人" class="headerlink" title="24.    乐于助人的人"></a>24.    乐于助人的人</h4><p>Describe a person who often helps others<br>You should say:<br>Who this person is<br>How often he helps others<br>How he helps others<br>Do science and technology improve the relationship between people?  </p><p>Part 3<br>Do people nowadays help others more than in the past?<br>Who should teach children to help others? Parents or teachers?<br>In what kinds of professions do people help others more?<br>Why are some people willing to help others?  </p><h4 id="25-和朋友出去"><a href="#25-和朋友出去" class="headerlink" title="25.    和朋友出去"></a>25.    和朋友出去</h4><p>Describe an experience that you went out with your friends and had a good time<br>You should say:<br>Where you went<br>When you went out<br>What you did<br>And explain why you had a good time  </p><p>Part 3<br>Who should people spend more time with? Family or friends?<br>What’s the difference between staying with friends and staying with family?<br>Do people prefer being with a large group of people or with a few friends?  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Text Convert to Pic</title>
      <link href="/2019/10/08/text-convert-to-pic/"/>
      <url>/2019/10/08/text-convert-to-pic/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image <span class="token punctuation">,</span> ImageDraw<span class="token punctuation">,</span> ImageFont<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">ttp</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> fone_type_file<span class="token punctuation">,</span> font_size<span class="token punctuation">,</span> font_color<span class="token punctuation">,</span> position<span class="token punctuation">,</span> row_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param text: 要插入的文字    :param fone_type_file: 文字类型文件名称    :param font_size: 文字大小    :param position: 要插入的位置    :param row_lens: 一行的字数    :return:    """</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'bg1.png'</span><span class="token punctuation">)</span>    datas <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token operator">not</span> datas<span class="token punctuation">:</span>        datas <span class="token operator">=</span> <span class="token punctuation">[</span>text<span class="token punctuation">]</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> datas<span class="token punctuation">:</span>        tempd <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> <span class="token operator">not</span> d<span class="token punctuation">:</span>            tempd <span class="token operator">=</span> <span class="token string">' '</span>        lend <span class="token operator">=</span> len<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lend<span class="token punctuation">,</span> row_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>            tempd <span class="token operator">=</span> tempd <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>row_lens<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n\n'</span>        <span class="token comment" spellcheck="true"># elif len(d) > 60:</span>        <span class="token comment" spellcheck="true">#     d1 = d[:60] + '\n'</span>        <span class="token comment" spellcheck="true">#     d2 = d[60:]</span>        <span class="token comment" spellcheck="true">#     d = d1 + ' \n'+ d2</span>        data <span class="token operator">+=</span> <span class="token punctuation">(</span>tempd <span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#data += ' \n'</span>    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    dr <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>    font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>fone_type_file<span class="token punctuation">,</span> font_size<span class="token punctuation">)</span>    dr<span class="token punctuation">.</span>text<span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span> font_color<span class="token punctuation">,</span> spacing<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> im<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#str = "fafafffffffff测试fafafafafafafafafafafafaf"</span>    <span class="token comment" spellcheck="true">#target_file = target_file.resize((1000, 600))</span>    <span class="token comment" spellcheck="true"># target_file.save("bg1.png",'PNG')</span>    str <span class="token operator">=</span> <span class="token string">''</span>    row_pos <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> line2 <span class="token keyword">in</span> open<span class="token punctuation">(</span><span class="token string">"question.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        str <span class="token operator">=</span> str <span class="token operator">+</span> line2    <span class="token comment" spellcheck="true"># 字体文件需要先下好</span>    target_file <span class="token operator">=</span> ttp<span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">'./FangZhengHeiTiJianTi-1.ttf'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'#000000'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    target_file<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    target_file<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"res.png"</span><span class="token punctuation">,</span><span class="token string">'PNG'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scripts </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some operation for Aliyun oss</title>
      <link href="/2019/10/08/some-operation-for-aliyun-oss/"/>
      <url>/2019/10/08/some-operation-for-aliyun-oss/</url>
      
        <content type="html"><![CDATA[<h2 id="一、官方接口文档"><a href="#一、官方接口文档" class="headerlink" title="一、官方接口文档"></a>一、官方接口文档</h2><p><a href="https://help.aliyun.com/product/31815.html" target="_blank" rel="noopener">aliyun oss</a></p><h2 id="二、实例操作"><a href="#二、实例操作" class="headerlink" title="二、实例操作"></a>二、实例操作</h2><h3 id="1-获取特定文件夹下的文件数量"><a href="#1-获取特定文件夹下的文件数量" class="headerlink" title="1. 获取特定文件夹下的文件数量"></a>1. 获取特定文件夹下的文件数量</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> oss2<span class="token comment" spellcheck="true"># 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。</span>auth <span class="token operator">=</span> oss2<span class="token punctuation">.</span>Auth<span class="token punctuation">(</span><span class="token string">'keyid'</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Endpoint以杭州为例，其它Region请按实际情况填写。</span>bucket <span class="token operator">=</span> oss2<span class="token punctuation">.</span>Bucket<span class="token punctuation">(</span>auth<span class="token punctuation">,</span> <span class="token string">'endpoint'</span><span class="token punctuation">,</span> <span class="token string">'bucket名称'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 列举包含指定前缀的文件。默认列举100个文件。</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> oss2<span class="token punctuation">.</span>ObjectIterator<span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token string">'文件名'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#  print(obj.key)</span>    res <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取特定文件夹的大小，平均文件大小"><a href="#2-获取特定文件夹的大小，平均文件大小" class="headerlink" title="2. 获取特定文件夹的大小，平均文件大小"></a>2. 获取特定文件夹的大小，平均文件大小</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> oss2<span class="token comment" spellcheck="true"># 阿里云主账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建RAM账号。</span>auth <span class="token operator">=</span> oss2<span class="token punctuation">.</span>Auth<span class="token punctuation">(</span><span class="token string">'keyid'</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Endpoint以杭州为例，其它Region请按实际情况填写。</span>bucket <span class="token operator">=</span> oss2<span class="token punctuation">.</span>Bucket<span class="token punctuation">(</span>auth<span class="token punctuation">,</span> <span class="token string">'endpoint'</span><span class="token punctuation">,</span> <span class="token string">'bucket名称'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 列举包含指定前缀的文件。默认列举100个文件。</span>res <span class="token operator">=</span> <span class="token number">0</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> obj <span class="token keyword">in</span> oss2<span class="token punctuation">.</span>ObjectIterator<span class="token punctuation">(</span>bucket<span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token string">'文件名'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(obj.key)</span>    res <span class="token operator">+=</span> <span class="token number">1</span>    length <span class="token operator">+=</span> obj<span class="token punctuation">.</span>size<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'directory: 文件名'</span> <span class="token operator">+</span> <span class="token string">'  length:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>length <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'the number of file: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'average length: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>length<span class="token operator">/</span>res<span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"MB"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scripts </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Batch Gradient Descent in Linear Regression with Multiple Variable</title>
      <link href="/2019/10/07/batch-gradient-descent-in-linear-regression-with-multiple-variable/"/>
      <url>/2019/10/07/batch-gradient-descent-in-linear-regression-with-multiple-variable/</url>
      
        <content type="html"><![CDATA[<h2 id="一、参考资料"><a href="#一、参考资料" class="headerlink" title="一、参考资料"></a>一、参考资料</h2><ol><li><a href="https://www.cnblogs.com/ooon/p/4947688.html" target="_blank" rel="noopener">深入梯度下降(Gradient Descent)算法</a></li><li><a href="https://www.cnblogs.com/pinard/p/5970503.html" target="_blank" rel="noopener">梯度下降（Gradient Descent）小结(by 刘建平Pinard)</a></li></ol><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">#读入训练数据与测试数据</span>df_train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train_data.txt'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">)</span>df_test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test_data.txt'</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'\t'</span><span class="token punctuation">,</span>header <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将测试数据与训练数据数组化</span>train_array <span class="token operator">=</span> df_train<span class="token punctuation">.</span>valuestest_array <span class="token operator">=</span> df_test<span class="token punctuation">.</span>values<span class="token comment" spellcheck="true">#记录训练数据每一列的的最大最小值</span>train_array_max <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>train_array_min <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#归一化训练数据和测试数据</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>train_array<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_array_max<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>train_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    train_array_min<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>train_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(train_array_max[i],train_array_min[i])</span>    train_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>train_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">-</span>train_array_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>train_array_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>train_array_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    test_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>test_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">-</span>train_array_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>train_array_max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>train_array_min<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#拼接训练数据</span><span class="token comment" spellcheck="true">#n组训练数据，m个参数</span>n <span class="token operator">=</span> train_array<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>m <span class="token operator">=</span> train_array<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>train_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> train_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(y.T.shape)</span><span class="token comment" spellcheck="true">#print(x)</span><span class="token comment" spellcheck="true">#print(y)</span><span class="token comment" spellcheck="true">#print(n)</span><span class="token comment" spellcheck="true">#存放系数矩阵</span>h0 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>h <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>J <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>h0<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(h0)</span><span class="token comment" spellcheck="true">#print(h0.T)</span><span class="token comment" spellcheck="true">#print(J)</span><span class="token comment" spellcheck="true"># print(x.shape[0],x.shape[1])</span><span class="token comment" spellcheck="true"># print(y.shape[0],y.shape[1])</span><span class="token comment" spellcheck="true"># print((x.dot(h0.T)-y).shape[0],(x.dot(h0.T)-y).shape[1])</span><span class="token comment" spellcheck="true"># print((x[:,0].reshape(n,1)).shape[0],(x[:,0].reshape(n,1)).shape[1])</span><span class="token comment" spellcheck="true"># print(((x.dot(h0.T)-y)*x[:,j].reshape(n,1)).shape[0],((x.dot(h0.T)-y)*x[:,j].reshape(n,1)).shape[1])</span>J0 <span class="token operator">=</span> <span class="token number">0</span>a <span class="token operator">=</span> <span class="token number">0.01</span>loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">import</span> copy<span class="token comment" spellcheck="true">#BGD</span><span class="token keyword">while</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>J<span class="token operator">-</span>J0<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span>    loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>J<span class="token punctuation">)</span>    J0 <span class="token operator">=</span> J    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(np.sum((x.dot(h0.T)-y)*x[:,j].reshape(n,1))/n)</span>        h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> h0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token operator">*</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>h0<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>n    h0 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>h<span class="token punctuation">)</span>    J <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>h0<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#梯度下降过程中损失的变化趋势</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#训练数据预测值与真实值进行比较</span>pre_y <span class="token operator">=</span> x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>h<span class="token punctuation">.</span>T<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>pre_y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#预测测试数据</span>tn <span class="token operator">=</span> test_array<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>test_x <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span>tn<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>test_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>tn<span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_y <span class="token operator">=</span> test_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>tn<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>pre_test_y <span class="token operator">=</span> test_x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>h<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#预测值与真实值进行比较</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>test_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test_y<span class="token punctuation">,</span>pre_test_y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、实验结果"><a href="#三、实验结果" class="headerlink" title="三、实验结果"></a>三、实验结果</h2><p><img src="https://img-blog.csdnimg.cn/20190415000903356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rhd24wMDAw,size_16,color_FFFFFF,t_70" alt="梯度下降过程中损失的变化趋势"></p><p><img src="https://img-blog.csdnimg.cn/20190415002023426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rhd24wMDAw,size_16,color_FFFFFF,t_70" alt="训练数据预测值与真实值进行比较"></p><p><img src="https://img-blog.csdnimg.cn/20190415000947956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rhd24wMDAw,size_16,color_FFFFFF,t_70" alt="测试数据预测值与真实值进行比较"></p><h2 id="四、其他实例"><a href="#四、其他实例" class="headerlink" title="四、其他实例"></a>四、其他实例</h2><h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h3><center><object data="http://www.baige.me/v?i=SOH" type="application/pdf" width="800px" "="" height="700px" view="FitH">    <embed src="http://www.baige.me/v?i=SOH">     <center>     This browser does not support PDFs. Please download the PDF to view it:     <a href="http://www.baige.me/v?i=SOH" target="_blank" rel="noopener">Download PDF</a>.<p></p>     </center></object></center><!-- <div class="row">    <embed src="http://www.baige.me/v?i=SOH" width="100%" height="550" type="application/pdf"></div> --><h3 id="2-数据"><a href="#2-数据" class="headerlink" title="2. 数据"></a>2. 数据</h3><p>train_data: <a href="https://paste.ubuntu.com/p/XMZkb9Q5qt/" target="_blank" rel="noopener">传送门</a></p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data1a.txt'</span><span class="token punctuation">,</span> header<span class="token operator">=</span>None<span class="token punctuation">)</span>data <span class="token operator">=</span> data<span class="token punctuation">.</span>values<span class="token comment" spellcheck="true"># n 表示特征数，m 表示样本数</span><span class="token comment" spellcheck="true"># print(data_x.shape)</span>n <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>m <span class="token operator">=</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># data_x 为输入特征, data_y 为目标结果</span>data_x <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>data_x <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>data_y <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(data)</span><span class="token comment" spellcheck="true"># print(data_x)</span><span class="token comment" spellcheck="true"># print(data_y)</span>theta <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(theta)</span><span class="token comment" spellcheck="true"># 计算假设函数</span>h <span class="token operator">=</span> data_x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#计算损失函数</span>J <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">-</span>data_y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>h<span class="token operator">-</span>data_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(J)</span>alpha <span class="token operator">=</span> <span class="token number">0.01</span>J0 <span class="token operator">=</span> <span class="token number">0</span>loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Initial Loss: "</span><span class="token punctuation">,</span> J<span class="token punctuation">)</span><span class="token keyword">while</span> abs<span class="token punctuation">(</span>J<span class="token operator">-</span>J0<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.00001</span><span class="token punctuation">:</span>    loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>J<span class="token punctuation">)</span>    J0 <span class="token operator">=</span> J    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        delta <span class="token operator">=</span> alpha<span class="token operator">*</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">-</span>data_y<span class="token punctuation">)</span><span class="token operator">*</span>data_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>m        theta<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> theta<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> delta    h <span class="token operator">=</span> data_x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span>    J <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">-</span>data_y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>h<span class="token operator">-</span>data_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#     print(J)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Fianl Loss: "</span><span class="token punctuation">,</span> J<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Fianl theta: "</span><span class="token punctuation">,</span> theta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> theta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#梯度下降过程中损失的变化趋势</span><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Trend of loss during gradient descent"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>test_x <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.5</span>test_x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>test_y <span class="token operator">=</span> test_x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A, B 的利润分别为: "</span><span class="token punctuation">,</span> test_y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Initial Loss:  32.072733877455676Fianl Loss:  4.479729514503939Fianl theta:  -3.7217231514189435 1.175547657550631</code></pre><p><img src="https://i.loli.net/2019/10/07/DtCMIb6rqfxmH5u.png" alt="result.png"></p><pre><code>A, B 的利润分别为:  0.39269365000826495 4.507110451435473</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> Linear Regression </tag>
            
            <tag> Gradient Descent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Index Tree</title>
      <link href="/2019/10/03/binary-index-tree/"/>
      <url>/2019/10/03/binary-index-tree/</url>
      
        <content type="html"><![CDATA[<p>一直感觉树状数组用处比较小而且局限、因为最基本的用法就是单点更新和区间求和、但是线段树也能做，只不过代码长一点，但是仔细的去了解了一下树状数组以后发现有很多很赞的地方值得学习。</p><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><h3 id="单点更新、区间求和"><a href="#单点更新、区间求和" class="headerlink" title="单点更新、区间求和"></a>单点更新、区间求和</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a[i]单点更新加一</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> r<span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//求前缀[0,r]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="区间更新、单点查询"><a href="#区间更新、单点查询" class="headerlink" title="区间更新、单点查询"></a>区间更新、单点查询</h3><ul><li>对于操作C L R t ：在区间L-R上每个值增加t </li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> L<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>对于操作Q i   :查询当前a[i]的值</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> res <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span>  res <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="区间更新、区间查询"><a href="#区间更新、区间查询" class="headerlink" title="区间更新、区间查询"></a>区间更新、区间查询</h3><ul><li>对于操作 C L R t    : 对于数组a[n] 区间L-R都增加 t</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> L<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">,</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> L<span class="token operator">*</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">,</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>对于操作 Q L R : 查询数组a[n] 区间L-R的和</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> res <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> R<span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> L<span class="token number">-1</span><span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> L<span class="token operator">*</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p><a href="http://www.cnblogs.com/zybgmzl/p/6894426.html?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">树状数组基础详解入口</a></p><p>下图中:</p><p>红色表示树状数组c[i]所覆盖a[n]中的范围 ,其中树状的某一项所覆盖的长度为lowbit(x) = x&amp;-x ,<br>即 c[x] = a[x-(x&amp;-x)+1]+…+a[x]</p><p>蓝色表示当a[i] 需要增加 t 时， 树状数组中哪些项需要做出改变</p><p>绿色表示当需要查询某一个区间和时，需要求的两个前缀和及其各自需要通过树状数组的哪些项来进行a[n]的前缀和求和</p><p><img src="https://img-blog.csdnimg.cn/20190507222001213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rhd24wMDAw,size_16,color_FFFFFF,t_70" alt="树状数组结构图"></p><h3 id="单点修改、区间查询"><a href="#单点修改、区间查询" class="headerlink" title="单点修改、区间查询"></a>单点修改、区间查询</h3><p>a[n]: 表示原来的数组，即我们题目中需要修改需要查询的数组<br>c[n]: 用来维护a[x]的后缀和(长度为lowbit(x) = x&amp;-x)的树状数组</p><p>C i t  —&gt;  a[i] 增加t  —&gt;  在c[n]上操作</p><p>for(int x = i; x &lt;= n; x += x&amp;-x) c[x] += t;</p><p>Q L R —&gt; 求a[L] + a[L+1] + … + a[R] —&gt; 在c[n]上操作</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> R<span class="token punctuation">;</span> x<span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> L<span class="token number">-1</span><span class="token punctuation">;</span> x<span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="区间修改、单点查询"><a href="#区间修改、单点查询" class="headerlink" title="区间修改、单点查询"></a>区间修改、单点查询</h3><ul><li><p>a[n]: 原来的数组  设a[0] = 0</p></li><li><p>d[n]: 差分数组  d[i] = a[i]-a[i-1] :   d[1] = a[1]-a[0], d[2] = a[2]-a[1] </p></li><li><p>b[n]:  用来维护d[x]的后缀和(长度为lowbit(x) = x&amp;-x)的树状数组</p></li></ul><pre><code>Sd[n] = d[1] + d[2] + d[3] + ...+ d[n]        = a[1]-a[0] + a[2]-a[1] + a[3]-a[2]+...+a[n-1]-a[n-2] + a[n]-a[n-1]        = a[n] - a[0]        = a[n]</code></pre><p>即  $ a_{n} = \sum_{i=1}^{n} d_{i} $</p><ul><li>区间修改</li></ul><p>L R t —&gt; a[L] - a[R] 每一项都加t  —&gt;   因为 d[i] = a[i] - a[i-1]，所以我们使用d[n]的变化来存储a[n]的变化<br>—&gt;  d[R+1] = a[R+1] - a[R] : d[n]数组变化为 ： d[R+1] = d[R+1] - t;<br>—&gt;  对于 L &lt; k &lt;= R ： d[k] = a[k] - a[k-1]: 因为a[k] 和 a[k-1] 都加了t,所以d[k] 不变<br>—&gt;  d[L]   = a[L] - a[L-1] : d[n]数组变化为 ：d[L] = d[L] + t</p><p> —&gt; d[R+1]  减少t —&gt; 在b[n]上操作<br> —&gt; d[L]       增加t —&gt; 在b[n]上操作</p><p>即在b[n]上进行两个单点更新操作</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span>  b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> L<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x <span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span>   b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>单点查询</li></ul><p>i  —&gt; 求 a[i] = d[1] + d[2] + … d[n] —&gt; 在b[n]上求和操作</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> res <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="区间修改、区间查询"><a href="#区间修改、区间查询" class="headerlink" title="区间修改、区间查询"></a>区间修改、区间查询</h3><ul><li><p>a[n]: 原来的数组  设a[0] = 0</p></li><li><p>d[n]: 差分数组  d[i] = a[i]-a[i-1] : d[1] = a[1]-a[0], d[2] = a[2]-a[1] </p></li><li><p>b[n]:  用来维护d[x]的后缀和(长度为lowbit(x) = x&amp;-x)</p></li><li><p>c[n]:  用来维护e[x] = x*d[x]的后缀和(长度为lowbit(x) = x&amp;-x)</p></li></ul><p>求 a[1] + a[2] + a[3] +…+ a[n] =?</p><pre><code>原式 = sd[1] + sd[2] + sd[3] + sd[4] + ... + sd[n]       = d[1]  + d[1]+d[2] + ... +(d[1] + d[2] + d[3] + ... d[n])       = n * d[1] + (n-1) * d[2] +...+ 1 * d[n]       = (n+1)(d[1]+d[2]+..+d[n]) - (1*d[1] + 2*d[2] + ... + n*d[n])   </code></pre><p>即在b[n]上进行一个区间求和操作和在c[n]上进行一个区间求和操作即可</p><p>即：<br>$ \because a[i] = \sum_{j=1}^{i}d[j] $<br>$ \therefore \sum_{i=1}^{n}a[i] = \sum_{i=1}^{n}\sum_{j=1}^{i}d[j] = \sum_{i=1}^{n}(n-i+1) <em> d[i] = n </em> \sum_{i=1}^{n} d[i] - \sum_{i=1}^{n}i*d[i] $</p><ul><li>区间修改</li></ul><p>C L R t </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> L<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> t<span class="token punctuation">,</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> L<span class="token operator">*</span>t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为什么这里是L*t ?而不是x*t ? 因为我们是在维护e[L]增加L*t,即T=L*t</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> t<span class="token punctuation">,</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>区间查询</li></ul><p>Q L R</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> res <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> R<span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> L<span class="token number">-1</span><span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> L<span class="token operator">*</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>例题： <a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">POJ 3468 A Simple Problem with Intergers</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> PI 3.1415926</span><span class="token macro property">#<span class="token directive keyword">define</span> sc(x)  scanf("%d",&amp;x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pf(x)  printf("%d",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfn(x) printf("%d\n",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfs(x) printf("%d ",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(n) for(int i = 0; i &lt; n; i++)</span><span class="token macro property">#<span class="token directive keyword">define</span> per(n) for(int i = n-1; i >= 0; i--)</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,x) memset(a,x,sizeof(a))</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>q<span class="token punctuation">;</span>LL b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">sc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sc</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mem</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">rep</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">sc</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token function">mem</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mem</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">rep</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d%d"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">sc</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> l<span class="token punctuation">;</span>x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> l <span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>x <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> d<span class="token punctuation">;</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      LL res <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//res = sum(r) - sum(l-1)   </span>      <span class="token comment" spellcheck="true">//s[x] = ssb[i] = (x+1)sb[i] - isb[i] = (x+1)sb[i] - sc[i];</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> r<span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span>  res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> l<span class="token number">-1</span><span class="token punctuation">;</span> x <span class="token punctuation">;</span> x <span class="token operator">-</span><span class="token operator">=</span> x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span> res <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">*</span> b<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Binary Index Tree </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy Introduction</title>
      <link href="/2019/10/03/scrapy-introduction/"/>
      <url>/2019/10/03/scrapy-introduction/</url>
      
        <content type="html"><![CDATA[<p>Scrapy（/ˈskreɪpi/) 是一个Python编写的开源网络爬虫框架。它是一个被设计用于爬取网络数据、提取结构性数据的程序框架。</p><p>使用Scrapy框架可以很方便地爬取网站。</p><h2 id="一、Scrapy入门"><a href="#一、Scrapy入门" class="headerlink" title="一、Scrapy入门"></a>一、Scrapy入门</h2><p><a href="https://www.runoob.com/w3cnote/scrapy-detail.html" target="_blank" rel="noopener">菜鸟教程Scrapy入门</a><br><a href="http://kaito-kidd.com/2016/11/01/scrapy-code-analyze-architecture/" target="_blank" rel="noopener">Scrapy官网入门教程</a></p><ol><li>使用pip安装Scrapy。</li><li>使用 <code>scrapy startproject xxx</code> 新建一个Scrapy 项目。</li><li>创建一个Item类，继承scrapy.Item，明确抓取的目标。</li><li>使用 <code>scrapy genspider xxx "url"</code> 新建一个spider.</li><li>完善各个代码文件内容，详细见上方教程</li><li>使用 <code>scrapy crawl xxx</code> 开始爬取</li></ol><p>文件目录如下图：<br><img src="https://img-blog.csdnimg.cn/20190924150315205.png" alt="scrpy实例文件目录"></p><h2 id="二、Scrapy架构图"><a href="#二、Scrapy架构图" class="headerlink" title="二、Scrapy架构图"></a>二、Scrapy架构图</h2><p><img src="https://img-blog.csdnimg.cn/20190924143708393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rhd24wMDAw,size_10,color_FFFFFF,t_70" alt="Scrapy架构图"></p><h2 id="三、Scrapy核心组件"><a href="#三、Scrapy核心组件" class="headerlink" title="三、Scrapy核心组件"></a>三、Scrapy核心组件</h2><p>如架构图中所示，Scrapy 总共有五个重要的组件和两个中间件组件：</p><ul><li><strong>Scrapy Engine(引擎)：</strong> 负责各个组件之间的通讯，信号、数据传递等。</li><li><strong>Scheduler(调度器)：</strong> 接收从引擎发送过来的Requests请求并整理暂存请求，当引擎需要时交还给引擎。</li><li><strong>Downloader（下载器）：</strong> 负责下载Scrapy 引擎发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spider来处理。</li><li><strong>Spider（爬虫）:</strong> 负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并提交Requests给引擎。</li><li><strong>Item Pipeline(管道)：</strong> 负责处理Spider中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方。</li></ul><p><strong><em>中间件的功能如架构图所示</em></strong></p><ul><li><strong>Downloader Middlewares（下载中间件）：</strong> 自定义扩展下载功能的组件。</li><li><strong>Spider Middlewares（Spider中间件）：</strong> 自定扩展和操作引擎和Spider中间通信的功能组件（比如进入Spider的Responses;和从Spider出去的Requests）</li></ul><h2 id="四、Scrapy运行流程"><a href="#四、Scrapy运行流程" class="headerlink" title="四、Scrapy运行流程"></a>四、Scrapy运行流程</h2><p>Scrapy 数据流转流程，结合架构图。</p><ol><li><strong>Spider</strong> 生成 Requests 发送到 Engine, 中间经过 SpiderMiddleware处理。</li><li><strong>Engine</strong> 将从 Spider 处获得的 Requests 发送给 Schedule, 并向其获取待下载请求（异步）。Schedule 将Requests 整理，按一定顺序入队。</li><li><strong>Schedule</strong>  将处理好的需要下载的请求发送给Engine。</li><li><strong>Engine</strong> 得到需下载的请求后，将其发送到Downloader，中间经过DownloadMiddleware, 例如代理中间件，UA中间件等。</li><li><strong>Downloader</strong> 将请求下载后，生成响应Responses, 送到Engine, 中间经过DownloadMiddleware。</li><li><strong>Engine</strong> 将Responses 返回到Spider进行处理。中间经过一系列SpiderMiddleware。</li><li><strong>Spider</strong> 提取Responses 中信息构造Item 和生成新的Requests, 送到Engine，中间经过一系列SpiderMiddleware。</li><li><strong>Engine</strong> 将Item 送到Item Pipelines进行处理，将Requests 送到Schedule进行处理。</li><li>循环往复，直至结束。</li></ol><h2 id="五、Scrapy代码介绍"><a href="#五、Scrapy代码介绍" class="headerlink" title="五、Scrapy代码介绍"></a>五、Scrapy代码介绍</h2><h3 id="1-itcast-py"><a href="#1-itcast-py" class="headerlink" title="1. itcast.py"></a>1. itcast.py</h3><blockquote><p>爬虫，位于spiders目录下<br>主要负责生成 Requests 发送到 Engine, 中间经过 SpiderMiddleware处理。<br>以及接收来自engine的response，解析response，生成和抛出item。</p></blockquote><ul><li>name: 爬虫的名字，必须唯一，在启动爬虫是会用到 scrapy crawl name</li><li>allowed_domains: 是搜索的域名范围，也就是爬虫的约束区域，规定爬虫只爬取这个域名下的网页，不存在的URL会被忽略。</li><li>爬取的URL元祖/列表。爬虫从这里开始抓取数据，不过当重写了start_requests(self) 时会从start_requests开始</li><li>callback: 指定回调函数，当requset对应的response返回时会进入指定的回调函数，未指定时默认为self.parse</li><li>parse 解析函数，得到来自Engine的response</li><li>ItcastItem: 定义结构化数据字段，用来保存爬取到的数据</li><li>yield: 抛出item 或者request到Engine, scrapy框架会根据 yield 返回的实例类型来执行不同的操作<ul><li>scrapy.Request 对象 scrapy框架请求该对象指向的url并在请求完成后调用该对象的回调函数。</li><li>scrapy.Item 对象，scrapy框架会将这个对象传递给 pipelines.py做进一步处理。</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> datetime<span class="token keyword">import</span> scrapy<span class="token keyword">from</span> mySpider_crawl<span class="token punctuation">.</span>items <span class="token keyword">import</span> ItcastItem<span class="token keyword">class</span> <span class="token class-name">ItcastSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'itcast'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xxx1.com'</span><span class="token punctuation">,</span><span class="token string">'xxx2.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'start.com/xxx'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">'xxx'</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> ItcastItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'raw_key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true"># 被爬取网站的主键</span>        item<span class="token punctuation">[</span><span class="token string">'domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xxx1.com'</span>  <span class="token comment" spellcheck="true"># 被爬网站的标识</span>        item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>url  <span class="token comment" spellcheck="true"># 爬取url</span>        item<span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'list'</span>  <span class="token comment" spellcheck="true"># 页面类别,列表页or详情页</span>        item<span class="token punctuation">[</span><span class="token string">'html'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>text        item<span class="token punctuation">[</span><span class="token string">'scraped_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-items-py"><a href="#2-items-py" class="headerlink" title="2. items.py"></a>2. items.py</h3><ul><li>Field: 通过定义类型为 scrapy.Field 的类属性来定义一个 Item</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Item<span class="token punctuation">,</span> Field<span class="token keyword">class</span> <span class="token class-name">ItcastItem</span><span class="token punctuation">(</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    raw_key <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 被爬取网站的主键</span>    domain <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 被爬网站的标识</span>    url <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 爬取url</span>    category <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 页面类别,列表页or详情页</span>    html <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    scraped_time <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-settings-py"><a href="#3-settings-py" class="headerlink" title="3. settings.py"></a>3. settings.py</h3><ul><li>scrapy框架配置文件，控制各项参数和配置</li><li>以下内容转载自<a href="https://www.cnblogs.com/longyunfeigu/p/9494408.html" target="_blank" rel="noopener">龙云飞谷:scrapy的配置文件settings</a></li></ul><p>详见<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/settings.html" target="_blank" rel="noopener">官方文档</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#==>第一部分：基本配置&lt;===</span><span class="token comment" spellcheck="true">#1、项目名称，默认的USER_AGENT由它来构成，也作为日志记录的日志名</span>BOT_NAME <span class="token operator">=</span> <span class="token string">'Amazon'</span><span class="token comment" spellcheck="true">#2、爬虫应用路径</span>SPIDER_MODULES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Amazon.spiders'</span><span class="token punctuation">]</span>NEWSPIDER_MODULE <span class="token operator">=</span> <span class="token string">'Amazon.spiders'</span><span class="token comment" spellcheck="true">#3、客户端User-Agent请求头</span><span class="token comment" spellcheck="true">#USER_AGENT = 'Amazon (+http://www.yourdomain.com)'</span><span class="token comment" spellcheck="true">#4、是否遵循爬虫协议</span><span class="token comment" spellcheck="true"># Obey robots.txt rules</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#5、是否支持cookie，cookiejar进行操作cookie，默认开启</span><span class="token comment" spellcheck="true">#COOKIES_ENABLED = False</span><span class="token comment" spellcheck="true">#6、Telnet用于查看当前爬虫的信息，操作爬虫等...使用telnet ip port ，然后通过命令操作</span><span class="token comment" spellcheck="true">#TELNETCONSOLE_ENABLED = False</span><span class="token comment" spellcheck="true">#TELNETCONSOLE_HOST = '127.0.0.1'</span><span class="token comment" spellcheck="true">#TELNETCONSOLE_PORT = [6023,]</span><span class="token comment" spellcheck="true">#7、Scrapy发送HTTP请求默认使用的请求头</span><span class="token comment" spellcheck="true">#DEFAULT_REQUEST_HEADERS = {</span><span class="token comment" spellcheck="true">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><span class="token comment" spellcheck="true">#   'Accept-Language': 'en',</span><span class="token comment" spellcheck="true">#}</span><span class="token comment" spellcheck="true">#===>第二部分：并发与延迟&lt;===</span><span class="token comment" spellcheck="true">#1、下载器总共最大处理的并发请求数,默认值16</span><span class="token comment" spellcheck="true">#CONCURRENT_REQUESTS = 32</span><span class="token comment" spellcheck="true">#2、每个域名能够被执行的最大并发请求数目，默认值8</span><span class="token comment" spellcheck="true">#CONCURRENT_REQUESTS_PER_DOMAIN = 16</span><span class="token comment" spellcheck="true">#3、能够被单个IP处理的并发请求数，默认值0，代表无限制，需要注意两点</span><span class="token comment" spellcheck="true">#I、如果不为零，那CONCURRENT_REQUESTS_PER_DOMAIN将被忽略，即并发数的限制是按照每个IP来计算，而不是每个域名</span><span class="token comment" spellcheck="true">#II、该设置也影响DOWNLOAD_DELAY，如果该值不为零，那么DOWNLOAD_DELAY下载延迟是限制每个IP而不是每个域</span><span class="token comment" spellcheck="true">#CONCURRENT_REQUESTS_PER_IP = 16</span><span class="token comment" spellcheck="true">#4、如果没有开启智能限速，这个值就代表一个规定死的值，代表对同一网址延迟请求的秒数</span><span class="token comment" spellcheck="true">#DOWNLOAD_DELAY = 3</span><span class="token comment" spellcheck="true">#===>第三部分：智能限速/自动节流：AutoThrottle extension&lt;===</span><span class="token comment" spellcheck="true">#一：介绍</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>throttle <span class="token keyword">import</span> AutoThrottle <span class="token comment" spellcheck="true">#http://scrapy.readthedocs.io/en/latest/topics/autothrottle.html#topics-autothrottle</span>设置目标：<span class="token number">1</span>、比使用默认的下载延迟对站点更好<span class="token number">2</span>、自动调整scrapy到最佳的爬取速度，所以用户无需自己调整下载延迟到最佳状态。用户只需要定义允许最大并发的请求，剩下的事情由该扩展组件自动完成<span class="token comment" spellcheck="true">#二：如何实现？</span>在Scrapy中，下载延迟是通过计算建立TCP连接到接收到HTTP包头<span class="token punctuation">(</span>header<span class="token punctuation">)</span>之间的时间来测量的。注意，由于Scrapy可能在忙着处理spider的回调函数或者无法下载，因此在合作的多任务环境下准确测量这些延迟是十分苦难的。 不过，这些延迟仍然是对Scrapy<span class="token punctuation">(</span>甚至是服务器<span class="token punctuation">)</span>繁忙程度的合理测量，而这扩展就是以此为前提进行编写的。<span class="token comment" spellcheck="true">#三：限速算法</span>自动限速算法基于以下规则调整下载延迟<span class="token comment" spellcheck="true">#1、spiders开始时的下载延迟是基于AUTOTHROTTLE_START_DELAY的值</span><span class="token comment" spellcheck="true">#2、当收到一个response，对目标站点的下载延迟=收到响应的延迟时间/AUTOTHROTTLE_TARGET_CONCURRENCY</span><span class="token comment" spellcheck="true">#3、下一次请求的下载延迟就被设置成：对目标站点下载延迟时间和过去的下载延迟时间的平均值</span><span class="token comment" spellcheck="true">#4、没有达到200个response则不允许降低延迟</span><span class="token comment" spellcheck="true">#5、下载延迟不能变的比DOWNLOAD_DELAY更低或者比AUTOTHROTTLE_MAX_DELAY更高</span><span class="token comment" spellcheck="true">#四：配置使用</span><span class="token comment" spellcheck="true">#开启True，默认False</span>AUTOTHROTTLE_ENABLED <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#起始的延迟</span>AUTOTHROTTLE_START_DELAY <span class="token operator">=</span> <span class="token number">5</span><span class="token comment" spellcheck="true">#最小延迟</span>DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">#最大延迟</span>AUTOTHROTTLE_MAX_DELAY <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">#每秒并发请求数的平均值，不能高于 CONCURRENT_REQUESTS_PER_DOMAIN或CONCURRENT_REQUESTS_PER_IP，调高了则吞吐量增大强奸目标站点，调低了则对目标站点更加”礼貌“</span><span class="token comment" spellcheck="true">#每个特定的时间点，scrapy并发请求的数目都可能高于或低于该值，这是爬虫视图达到的建议值而不是硬限制</span>AUTOTHROTTLE_TARGET_CONCURRENCY <span class="token operator">=</span> <span class="token number">16.0</span><span class="token comment" spellcheck="true">#调试</span>AUTOTHROTTLE_DEBUG <span class="token operator">=</span> <span class="token boolean">True</span>CONCURRENT_REQUESTS_PER_DOMAIN <span class="token operator">=</span> <span class="token number">16</span>CONCURRENT_REQUESTS_PER_IP <span class="token operator">=</span> <span class="token number">16</span><span class="token comment" spellcheck="true">#===>第四部分：爬取深度与爬取方式&lt;===</span><span class="token comment" spellcheck="true">#1、爬虫允许的最大深度，可以通过meta查看当前深度；0表示无深度</span><span class="token comment" spellcheck="true"># DEPTH_LIMIT = 3</span><span class="token comment" spellcheck="true">#2、爬取时，0表示深度优先Lifo(默认)；1表示广度优先FiFo</span><span class="token comment" spellcheck="true"># 后进先出，深度优先</span><span class="token comment" spellcheck="true"># DEPTH_PRIORITY = 0</span><span class="token comment" spellcheck="true"># SCHEDULER_DISK_QUEUE = 'scrapy.squeue.PickleLifoDiskQueue'</span><span class="token comment" spellcheck="true"># SCHEDULER_MEMORY_QUEUE = 'scrapy.squeue.LifoMemoryQueue'</span><span class="token comment" spellcheck="true"># 先进先出，广度优先</span><span class="token comment" spellcheck="true"># DEPTH_PRIORITY = 1</span><span class="token comment" spellcheck="true"># SCHEDULER_DISK_QUEUE = 'scrapy.squeue.PickleFifoDiskQueue'</span><span class="token comment" spellcheck="true"># SCHEDULER_MEMORY_QUEUE = 'scrapy.squeue.FifoMemoryQueue'</span><span class="token comment" spellcheck="true">#3、调度器队列</span><span class="token comment" spellcheck="true"># SCHEDULER = 'scrapy.core.scheduler.Scheduler'</span><span class="token comment" spellcheck="true"># from scrapy.core.scheduler import Scheduler</span><span class="token comment" spellcheck="true">#4、访问URL去重</span><span class="token comment" spellcheck="true"># DUPEFILTER_CLASS = 'step8_king.duplication.RepeatUrl'</span><span class="token comment" spellcheck="true">#===>第五部分：中间件、Pipelines、扩展&lt;===</span><span class="token comment" spellcheck="true">#1、Enable or disable spider middlewares</span><span class="token comment" spellcheck="true"># See http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span><span class="token comment" spellcheck="true">#SPIDER_MIDDLEWARES = {</span><span class="token comment" spellcheck="true">#    'Amazon.middlewares.AmazonSpiderMiddleware': 543,</span><span class="token comment" spellcheck="true">#}</span><span class="token comment" spellcheck="true">#2、Enable or disable downloader middlewares</span><span class="token comment" spellcheck="true"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true"># 'Amazon.middlewares.DownMiddleware1': 543,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#3、Enable or disable extensions</span><span class="token comment" spellcheck="true"># See http://scrapy.readthedocs.org/en/latest/topics/extensions.html</span><span class="token comment" spellcheck="true">#EXTENSIONS = {</span><span class="token comment" spellcheck="true">#    'scrapy.extensions.telnet.TelnetConsole': None,</span><span class="token comment" spellcheck="true">#}</span><span class="token comment" spellcheck="true">#4、Configure item pipelines</span><span class="token comment" spellcheck="true"># See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true"># 'Amazon.pipelines.CustomPipeline': 200,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#===>第六部分：缓存&lt;===</span><span class="token triple-quoted-string string">"""1. 启用缓存    目的用于将已经发送的请求或相应缓存下来，以便以后使用    from scrapy.downloadermiddlewares.httpcache import HttpCacheMiddleware    from scrapy.extensions.httpcache import DummyPolicy    from scrapy.extensions.httpcache import FilesystemCacheStorage"""</span><span class="token comment" spellcheck="true"># 是否启用缓存策略</span><span class="token comment" spellcheck="true"># HTTPCACHE_ENABLED = True</span><span class="token comment" spellcheck="true"># 缓存策略：所有请求均缓存，下次在请求直接访问原来的缓存即可</span><span class="token comment" spellcheck="true"># HTTPCACHE_POLICY = "scrapy.extensions.httpcache.DummyPolicy"</span><span class="token comment" spellcheck="true"># 缓存策略：根据Http响应头：Cache-Control、Last-Modified 等进行缓存的策略</span><span class="token comment" spellcheck="true"># HTTPCACHE_POLICY = "scrapy.extensions.httpcache.RFC2616Policy"</span><span class="token comment" spellcheck="true"># 缓存超时时间</span><span class="token comment" spellcheck="true"># HTTPCACHE_EXPIRATION_SECS = 0</span><span class="token comment" spellcheck="true"># 缓存保存路径</span><span class="token comment" spellcheck="true"># HTTPCACHE_DIR = 'httpcache'</span><span class="token comment" spellcheck="true"># 缓存忽略的Http状态码</span><span class="token comment" spellcheck="true"># HTTPCACHE_IGNORE_HTTP_CODES = []</span><span class="token comment" spellcheck="true"># 缓存存储的插件</span><span class="token comment" spellcheck="true"># HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-middlewares-py"><a href="#4-middlewares-py" class="headerlink" title="4. middlewares.py"></a>4. middlewares.py</h3><blockquote><p>中间件分为下载器中间件和spider中间件</p></blockquote><ul><li><p><strong>下载器中间件</strong></p><ul><li>下载器中间件用于处理scrapy的request和response的钩子框架，可以全局的修改一些参数，如代理ip，header。</li><li>使用下载器中间件时必须激活这个中间件，方法是在settings.py文件中设置DOWNLOADER_MIDDLEWARES这个字典，格式类似如下：</li><li>数字越小，越靠近引擎，数字越大越靠近下载器，所以数字越小的，process_request()优先处理；数字越大的，process_response()优先处理；关闭设为None即可<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># scrapy 自带默认下载中间件</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">'scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware'</span><span class="token punctuation">:</span> <span class="token number">350</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware'</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span><span class="token punctuation">:</span> <span class="token number">550</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.ajaxcrawl.AjaxCrawlMiddleware'</span><span class="token punctuation">:</span> <span class="token number">560</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware'</span><span class="token punctuation">:</span> <span class="token number">580</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span><span class="token punctuation">:</span> <span class="token number">590</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'</span><span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.cookies.CookiesMiddleware'</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span><span class="token punctuation">:</span> <span class="token number">750</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.stats.DownloaderStats'</span><span class="token punctuation">:</span> <span class="token number">850</span><span class="token punctuation">,</span><span class="token string">'scrapy.downloadermiddlewares.httpcache.HttpCacheMiddleware'</span><span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>spider中间件</strong></p><ul><li>使用spider中间件时必须激活这个中间件，方法是在settings.py文件中设置SPIDER_MIDDLEWARES这个字典</li><li>spider中间件用于处理response及spider生成的item和Request</li><li>数字越小越靠近引擎，process_spider_input()优先处理，数字越大越靠近spider，process_spider_output()优先处理,关闭用None<pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># scrapy 自带默认spider中间件</span>SPIDER_MIDDLEWARES_BASE <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token string">'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware'</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>  <span class="token string">'scrapy.spidermiddlewares.offsite.OffsiteMiddleware'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>  <span class="token string">'scrapy.spidermiddlewares.referer.RefererMiddleware'</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">,</span>  <span class="token string">'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware'</span><span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span>  <span class="token string">'scrapy.spidermiddlewares.depth.DepthMiddleware'</span><span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>详见 <a href="https://yq.aliyun.com/articles/629849?utm_content=m_1000014304" target="_blank" rel="noopener">Scrapy详解之中间件（Middleware）</a></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> scrapy <span class="token keyword">import</span> signals<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> NotConfigured<span class="token keyword">class</span> <span class="token class-name">ItcastSpiderMiddleware</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Not all methods need to be defined. If a method is not defined,</span>    <span class="token comment" spellcheck="true"># scrapy acts as if the spider middleware does not modify the</span>    <span class="token comment" spellcheck="true"># passed objects.</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># This method is used by Scrapy to create your spiders.</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>        <span class="token keyword">return</span> s    <span class="token keyword">def</span> <span class="token function">process_spider_input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called for each response that goes through the spider</span>        <span class="token comment" spellcheck="true"># middleware and into the spider.</span>        <span class="token comment" spellcheck="true"># Should return None or raise an exception.</span>        <span class="token keyword">return</span> None    <span class="token keyword">def</span> <span class="token function">process_spider_output</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called with the results returned from the Spider, after</span>        <span class="token comment" spellcheck="true"># it has processed the response.</span>        <span class="token comment" spellcheck="true"># Must return an iterable of Request, dict or Item objects.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">yield</span> i    <span class="token keyword">def</span> <span class="token function">process_spider_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called when a spider or process_spider_input() method</span>        <span class="token comment" spellcheck="true"># (from other spider middleware) raises an exception.</span>        <span class="token comment" spellcheck="true"># Should return either None or an iterable of Request, dict</span>        <span class="token comment" spellcheck="true"># or Item objects.</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">process_start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_requests<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called with the start requests of the spider, and works</span>        <span class="token comment" spellcheck="true"># similarly to the process_spider_output() method, except</span>        <span class="token comment" spellcheck="true"># that it doesn’t have a response associated.</span>        <span class="token comment" spellcheck="true"># Must return only requests (not items).</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> start_requests<span class="token punctuation">:</span>            <span class="token keyword">yield</span> r    <span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        spider<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Spider opened: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ItcastCrawlDownloaderMiddleware</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Not all methods need to be defined. If a method is not defined,</span>    <span class="token comment" spellcheck="true"># scrapy acts as if the downloader middleware does not modify the</span>    <span class="token comment" spellcheck="true"># passed objects.</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># This method is used by Scrapy to create your spiders.</span>        s <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>signals<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>s<span class="token punctuation">.</span>spider_opened<span class="token punctuation">,</span> signal<span class="token operator">=</span>signals<span class="token punctuation">.</span>spider_opened<span class="token punctuation">)</span>        <span class="token keyword">return</span> s    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called for each request that goes through the downloader</span>        <span class="token comment" spellcheck="true"># middleware.</span>        <span class="token comment" spellcheck="true"># Must either:</span>        <span class="token comment" spellcheck="true"># - return None: continue processing this request</span>        <span class="token comment" spellcheck="true"># - or return a Response object</span>        <span class="token comment" spellcheck="true"># - or return a Request object</span>        <span class="token comment" spellcheck="true"># - or raise IgnoreRequest: process_exception() methods of</span>        <span class="token comment" spellcheck="true">#   installed downloader middleware will be called</span>        <span class="token keyword">return</span> None    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called with the response returned from the downloader.</span>        <span class="token comment" spellcheck="true"># Must either;</span>        <span class="token comment" spellcheck="true"># - return a Response object</span>        <span class="token comment" spellcheck="true"># - return a Request object</span>        <span class="token comment" spellcheck="true"># - or raise IgnoreRequest</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Called when a download handler or a process_request()</span>        <span class="token comment" spellcheck="true"># (from other downloader middleware) raises an exception.</span>        <span class="token comment" spellcheck="true"># Must either:</span>        <span class="token comment" spellcheck="true"># - return None: continue processing this exception</span>        <span class="token comment" spellcheck="true"># - return a Response object: stops process_exception() chain</span>        <span class="token comment" spellcheck="true"># - return a Request object: stops process_exception() chain</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">spider_opened</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        spider<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'Spider opened: %s'</span> <span class="token operator">%</span> spider<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-pipelines-py"><a href="#4-pipelines-py" class="headerlink" title="4. pipelines.py"></a>4. pipelines.py</h3><p>pipeline 的功能：</p><ul><li>验证爬取的数据(检查item包含某些字段，比如说name字段)</li><li>查重(并丢弃)</li><li>将爬取结果保存到文件或者数据库中</li></ul><p>详见：<a href="https://www.cnblogs.com/wzjbg/p/6507564.html" target="_blank" rel="noopener">爬虫框架Scrapy之Item Pipeline</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> something<span class="token keyword">class</span> <span class="token class-name">ItcastPipeline</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 可选实现，做参数初始化等</span>        <span class="token comment" spellcheck="true"># doing something</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># item (Item 对象) – 被爬取的item</span>        <span class="token comment" spellcheck="true"># spider (Spider 对象) – 爬取该item的spider</span>        <span class="token comment" spellcheck="true"># 这个方法必须实现，每个item pipeline组件都需要调用该方法，</span>        <span class="token comment" spellcheck="true"># 这个方法必须返回一个 Item 对象，被丢弃的item将不会被之后的pipeline组件所处理。</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># spider (Spider 对象) – 被开启的spider</span>        <span class="token comment" spellcheck="true"># 可选实现，当spider被开启时，这个方法被调用。</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># spider (Spider 对象) – 被关闭的spider</span>        <span class="token comment" spellcheck="true"># 可选实现，当spider被关闭时，这个方法被调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 【声明】：本文部分内容源自Scrapy<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html" target="_blank" rel="noopener">官网</a> , <a href="https://www.runoob.com/w3cnote/scrapy-detail.html" target="_blank" rel="noopener">菜鸟教程</a>侵删。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web Crawler </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synonymous Transformation in IELTS</title>
      <link href="/2019/10/03/synonymous-transformation-in-ielts/"/>
      <url>/2019/10/03/synonymous-transformation-in-ielts/</url>
      
        <content type="html"><![CDATA[<h2 id="Listening"><a href="#Listening" class="headerlink" title="Listening"></a>Listening</h2><p><audio controls="controls" preload="auto"><br><source src="https://dn-shimo-attachment.qbox.me/rE83hacQzf8yWB8r/Test_4_Section_3.mp3" type="audio/mpeg"><br></audio></p><p>topic, concept</p><p>accessible, straightforward</p><p>obsolete, out of data</p><p>concentrate, not to get distracted, focus on</p><p>original study to guide, reference</p><p>collaborate, find way to share and suport another person</p><h2 id="Speaking"><a href="#Speaking" class="headerlink" title="Speaking"></a>Speaking</h2><h2 id="Reading"><a href="#Reading" class="headerlink" title="Reading"></a>Reading</h2><p>preceive, sense</p><p>tendency, inclination</p><p>satisfying, rewarding</p><p>emotions, feelings</p><p>depend on, adapted on</p><p>further vertification, the hypothesis will need to be thoroughly tested</p><p>motifs, images</p><p>intricacy, complexity,</p><p>meticulously composed, more carefully put together</p><p>demise, death, decease, departure, termination</p><p>formulate, frame, verbalise, voice, articulate</p><p>concord, harmony, accord, unity</p><p>regarding, concerning, about, as regards, on the topic of</p><p>manifestation, exhibition, expression, indication, demonstration</p><p>superior, better, greater, higher</p><p>schedule, timetable, arrangement</p><p>apparatus, equipment, device, outfit</p><p>invert, reverse, turn around, upside downside</p><p>modify, adjust, alter, change, vary, shift, adapt, amend, revise</p><p>authenticate, verify, distinguish, certify, prove</p><p>veteran, experienced, practiced, sophisticated</p><p>damp, wet, moist, humid</p><p>ascribe, attribute, assign, contribute</p><p>circumstance, condition, situation, case, scenario, environment, surrounding</p><p>therapy, treatment, medical care</p><p>label, mark, tag, classify</p><p>symbol, sign, icon, representation</p><p>sponsor, back up, fund, promote, support</p><p>exotic, foreign, strange, colourful</p><p>curve, bend, curl, turn, twist</p><p>demand, want, require, need</p><p>susceptible, vulnerable, fragile, subject</p><p>transmit, send, deliver, transfer</p><p>curb, control, restrain, check</p><p>rival, competitor, opponent</p><p>fulfill, carry out, complete, perform, execute</p><p>fundamental, basic, elementary, primary, underlying, preliminary</p><p>marvelous, exceptional, extraordinary, glorious, magnificent, miraculous</p><p>pick out, choose, select, sort out</p><p>replenish, complement, furnish, provide, supply</p><p>flatten, level, smooth</p><p>steep, sharp, dramatic, noticeable</p><p>enhance, better, enrich, improve, uplift</p><p>harsh, coarse, rough, tough, rude</p><p>boom, flourish, prosper, thrive</p><p>legacy, heritage, heredity</p><p>rigorous, hard, harsh, relentless, severe, strict</p><p>adept, apt, expert, proficient, skillful, good at</p><p>camouflage, disguise, masquerade, mask, pretence</p><p>manufacture, make, build, construct, create, devise  </p><p>edge, fringe, border, advantage  </p><p>split, bisect, separate, halve, divide  </p><p>crack, crevice, gap, rift  </p><p>wary, careful, cautious, guarded, suspicious  </p><p>novice, beginner, freshman, greenhorn</p><p>principle, doctrine, dogma, law, rule</p><p>pattem  design, example, illustration, model</p><p>victory, success, triumph, win</p><p>complex, complicated, confused, sophisticated</p><p>soak, saturate, sop, steep, wet</p><p>evaporate, disappear, fade away, vanish</p><p>concrete, cement, solid, substantial, tangible</p><p>flora, plant, foliage, vegetable, botany</p><p>spice, flavour, season, taste</p><p>account, story, record, statement, description</p><p>search, seek, find, look for, explore, hunt</p><p>enlighten, educate, explain, illuminate, inform, instruct, teach</p><p>practical, useful, functional, helpful, feasible</p><p>genre, type, sort, kind, classification, group</p><p>reshuffle, reorganise, reconstruct, reform</p><p>astounding, amazing, astonishing, surprising, shocking, stunning</p><p>rotate, revolve, spin, swivel, turn</p><p>resemblance, semblance, similarity, likeness, sameness</p><p>drawback, disadvantage, downside, weakness, minus</p><p>convert, change, adapt, transform, transfer</p><p>breakthrough, advance, step forward, revolution, development</p><p>rapid, quick, swif, speedy, fast</p><p>mark, manifest, indicate, sign</p><p>agriculture, farming, cultivation, husbandry</p><p>deem, believe, consider, judge, regard, suppose, think</p><p>distribute, scatter, dispense, disperse, spread, allot, allocate</p><p>cultvate, develop, improve, prepare, train, nurture</p><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IELTS </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math Template</title>
      <link href="/2019/09/27/math-template/"/>
      <url>/2019/09/27/math-template/</url>
      
        <content type="html"><![CDATA[<h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="行列式求值"><a href="#行列式求值" class="headerlink" title="行列式求值"></a>行列式求值</h2><ul><li>高斯消元</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> type long long</span>type <span class="token function">det</span><span class="token punctuation">(</span>type a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  type ret<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        type t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token operator">=</span><span class="token operator">-</span>ret<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    ret<span class="token operator">=</span>ret<span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>   ret<span class="token operator">=</span><span class="token operator">-</span>ret<span class="token punctuation">;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> template </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Summary of Sorting Algorithms</title>
      <link href="/2019/09/27/summary-of-sorting-algorithms/"/>
      <url>/2019/09/27/summary-of-sorting-algorithms/</url>
      
        <content type="html"><![CDATA[<h1 id="内部排序算法总结"><a href="#内部排序算法总结" class="headerlink" title="内部排序算法总结"></a><center>内部排序算法总结</center></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>排序算法主要可以分为内部排序和外部排序，其中内部排序由可以分为非线性时间比较排序和线性时间非比较排序，前者主要通过比较来决定元素之间的相对次序，都有关键字的比较和记录的移动，其时间复杂度不能突破O(nlogn),后者不需要通过比较来进行,可以以线性时间运行。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>非线性时间比较排序：<br>          插入排序：简单插入排序、折半插入排序、希尔排序<br>          交换排序：冒泡排序、快速排序<br>          选择排序：直接选择排序、堆排序<br>          归并排序：二路归并排序、多路归并排序(下文未介绍)<br>线性时间非比较排序：<br>      基数排序、计数排序、桶排序</p><p>不稳定排序：希尔排序、快速排序、直接选择排序、堆排序<br>其余为稳定排序</p><h2 id="复杂度-amp-amp-稳定性"><a href="#复杂度-amp-amp-稳定性" class="headerlink" title="复杂度&amp;&amp;稳定性"></a>复杂度&amp;&amp;稳定性</h2><table><thead><tr><th>排序算法</th><th>平均时间复杂度</th><th>最好时间复杂度</th><th>最坏时间复杂度</th><th>空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>简单插入排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>折半插入排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(n^(1.3))</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>冒泡排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(logn)</td><td>不稳定</td></tr><tr><td>直接选择排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>不稳定</td></tr><tr><td>二路归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>稳定</td></tr><tr><td>基数排序</td><td>O(d(n+r))</td><td>O(d(n+r))</td><td>O(d(n+r))</td><td>O(rd)</td><td>稳定</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>稳定</td></tr><tr><td>桶排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n^2)</td><td>O(k)</td><td>稳定</td></tr></tbody></table><h2 id="讲解-amp-代码"><a href="#讲解-amp-代码" class="headerlink" title="讲解&amp;代码"></a>讲解&amp;代码</h2><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><ol><li><p>数组中的元素默认放在从a[1]开始</p></li><li><p>以下排序都是基于顺序存储实现，非链式，有些算法可以修改成链式</p></li><li><p>总共有以下几类排序</p><ol><li>直接插入排序</li><li>折半插入排序</li><li>希尔排序</li></ol><p><strong>1-3属于插入排序</strong></p><ol start="4"><li>冒泡排序</li><li>快速排序</li></ol><p><strong>4-5属于交换排序</strong></p><ol start="6"><li>直接选择排序</li><li>堆排序</li></ol><p><strong>6-7属于选择排序</strong></p><ol start="8"><li>二路归并排序</li></ol><p><strong>8属于归并排序</strong><br><strong>1-8属于非线性时间比较排序</strong></p><ol start="9"><li>基数排序</li><li>计数排序</li><li>桶排序</li></ol><p><strong>9-11属于线性时间非比较排序</strong></p></li><li><p>代码默认环境</p></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><ul><li>直接插入排序</li><li>平均时间复杂度：O(n^2)</li><li>最好时间复杂度：O(n)   初始序列为正序</li><li>最坏时间复杂度：O(n^2) 初始序列为逆序</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Straight_Insert_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置哨兵</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>           a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><ul><li>平均时间复杂度：O(n^2)</li><li>最好时间复杂度：O(n)   初始序列为正序</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定<br>注：折半插入排序是插入排序的一个优化算法，主要是减少了寻找插入位置时的比较次数，但是元素的移动次数仍然不变，所以总的时间复杂度仍然是O(n^2)</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Binary_Insert_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>       <span class="token punctuation">{</span>         <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">int</span> j<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> l<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>           a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>       a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><ul><li>平均时间复杂度：O(n^(1.3—2))</li><li>最好时间复杂度：O(n)   初始序列为正序</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定<br>注：</li></ul><ol><li>希尔排序也属于插入排序的一种，又称“缩小增量排序”(Deminishing Increment Sort)<br>基本思想是将数列等步长分成若干组，组内进行插入排序，步长不断减小，直至1，这样就可以减少参与直接插入排序的数据量，有利于减小比较和移动的次数，从而缩减时间复杂度。<br>其时间复杂度和选取得增量序列有关<br>希尔增量: ht = N / 2, h[k] = h[k+1] / 2，即{N/2, (N / 2)/2, …, 1}<br>Hibbard：{1, 3, …, 2^k-1};<br>Sedgewick：{1, 5, 19, 41, 109…}该序列中的项或者是9<em>4^i - 9</em>2^i + 1或者是4^i - 3*2^i + 1。</li><li>以下代码非使用监视哨算法，使用监视哨算法可以缩减一定的测试查找循环时间，解决边界问题。但是估计会需要使用O(inc)的代价。</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Shell_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> inc <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>   inc <span class="token operator">=</span> inc<span class="token operator">/</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span>inc<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span>inc<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> j<span class="token punctuation">;</span>      a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">-</span>inc<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> inc<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span>inc<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      a<span class="token punctuation">[</span>j<span class="token operator">+</span>inc<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>inc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>平均时间复杂度：O(n^2)</li><li>最好时间复杂度：O(n)   初始序列为正序</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 最简单的交换排序，严格上不算冒泡排序，不满足“两两比较相邻记录”</span><span class="token keyword">void</span> <span class="token function">Bubble_Sort_A</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//冒泡排序</span><span class="token keyword">void</span> <span class="token function">Bubble_Sort_B</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//优化后的冒泡排序</span><span class="token keyword">void</span> <span class="token function">Bubble_Sort_C</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>         <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li>平均时间复杂度：O(nlogn)</li><li>最好时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(n^2) 初始序列为正序</li><li>空间复杂度：O(logn)</li><li>稳定性：稳定<br>注：</li></ul><ol><li><p>快速排序是通过一趟排序将序列分为两部分，一部分均比关键字小，一部分均比关键字大，<br>然后再对这两部分分别进行快速排序。</p></li><li><p>时间复杂度分析<br>我们来利用Master主定理分析<br>Master 主定理:  对于T[n] = aT[n/b] + f(n) 并且f(n) 是一个渐进正函数，则有一下三种情况：</p><ol><li>如果f(n) = O(n^(logb(a-c))) 对于某个常量c&gt;0成立,那么T[n] = O(n^(logb(a)))</li><li>如果f(n) = O(n^(logb(a))), 那么T[n] = O(n^(logb(a)) * logn)</li><li>如果f(n) = O(n^(logb(a+c))) 对于某个常量c&gt;0成立,并且af(n/b) &lt;= cf(n) 对于某个常量c &lt; 1 (n足够大) 成立， 那么T[n] = O(f(n))</li></ol><p>对于快速排序，T[n] = 2T[n/2] + f(n)<br>a = 2, b = 2 , logb(a) = 1; 所以 f(n) =  O(n^(logb(a))) = n; 所以T(n) = n*logn</p><p>最坏情况时， 在原序列有序时，T[n] = T[n-1] + T[1] + O(n)<br>对于这种情况，主观分析：因为每次只排出一个，相当于没做，所以复杂度为O(n^2))</p></li><li><p>快速排序的空间复杂度O(logn)主要是因为递归调用需要保持一些数据</p></li><li><p>优化：</p><ol><li>枢轴的选取方式的优化：枢轴的选取方式有：(1) 固定位置选取；(2) 随机位置选取； (3) 三值取中法 等</li><li>优化小数组时的排序方案：当局部排序数组长度较小时，采用插入排序，而非快速排序，因为长度分割到够小后，继续分割的效率要低于直接插入排序。</li><li>略去不必要的交换：略去不必要的交换，将交换操作改为替换操作。因为交换操作需要进行3次赋值操作，而替换操作只需要进行1次赋值操作。<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 0,l,r 相互配合组成哨兵</span><span class="token keyword">void</span> <span class="token function">Quick_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">>=</span> R<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> L<span class="token punctuation">,</span> r <span class="token operator">=</span> R<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">Quick_Sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token punctuation">,</span> l<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Quick_Sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><ul><li>平均时间复杂度：O(n^2)</li><li>最好时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Selec_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> tag <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">)</span> tag <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul><li>平均时间复杂度：O(nlogn)</li><li>最好时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(nlogn)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//s 是子堆的起点，m 是堆的数据量</span><span class="token keyword">void</span> <span class="token function">Heap_Adjust</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>  a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>s<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//比较左右节点的大小</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  a<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Heap_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token function">Heap_Adjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Heap_Adjust</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并排序-二路"><a href="#归并排序-二路" class="headerlink" title="归并排序(二路)"></a>归并排序(二路)</h3><ul><li>平均时间复杂度：O(nlogn)</li><li>最好时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(nlogn)</li><li>空间复杂度：O(n)</li><li>稳定性：稳定</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Merge_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">>=</span> R<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>  <span class="token keyword">int</span> m <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span>R<span class="token operator">-</span>L<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> n1 <span class="token operator">=</span> m<span class="token operator">-</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n2 <span class="token operator">=</span> R<span class="token operator">-</span>m<span class="token punctuation">;</span>  <span class="token function">Merge_Sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>L<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Merge_Sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>L<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>m<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> L<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span>      a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> r<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> l<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> r<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span>      a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span>      a<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><ul><li>平均时间复杂度：O(d(n+r))</li><li>最好时间复杂度：O(d(n+r))</li><li>最坏时间复杂度：O(d(n+r))</li><li>空间复杂度：O(rd)</li><li>稳定性：稳定<br>注：不能对负数进行处理，如果要处理负数可以统一先加一个大整数，最后再统一减去。<br>d个关键码，关键码的范围是0-r</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Radix_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> maxa <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>exp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     maxa <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxa<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>maxa<span class="token punctuation">)</span> maxa <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>d<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> exp <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> range<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        range<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        range<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> range<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        count<span class="token punctuation">[</span>range<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><ul><li>平均时间复杂度：O(n+k)</li><li>最好时间复杂度：O(n+k)</li><li>最坏时间复杂度：O(n+k)</li><li>空间复杂度：O(n+k)</li><li>稳定性：稳定<br>注：计数排序是一个非基于比较的算法，前面的算法中，除了基数排序，其他排序都是基于比较的算法，都有关键字的比较和记录的移动,基于比较的的排序算法的时间复杂度是O(nlogn),如堆排序和归并排序。计数排序的时间复杂度是O(n+k)，k是数据的范围，其快于任何一种基于比较的算法，其是牺牲空间换取时间的做法，当O(k) &gt; O(nlogn)时反而慢于基于比较的排序算法。<br>前面的基数排序也是基于基数排序实现的，只不过其k &lt;= 9。<br>计数排序的稳定性：range[i] 表示小于等于i的元素个数，所以倒着遍历保证稳定性。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Count_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    range<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    range<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> range<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    count<span class="token punctuation">[</span>range<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> range<span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><ul><li>平均时间复杂度：O(n+k)</li><li>最好时间复杂度：O(n+k)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(k)</li><li>稳定性：稳定</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Bucket_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    k <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>range <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    range<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>range<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">)</span>      a<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> range<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//插入排序</span>  <span class="token comment" spellcheck="true">//Straight_Insert_Sort(a,n);</span>  <span class="token comment" spellcheck="true">//Binary_Insert_Sort(a,n);</span>  <span class="token comment" spellcheck="true">//Shell_Sort(a,n);</span>  <span class="token comment" spellcheck="true">//交换排序</span>  <span class="token comment" spellcheck="true">//Bubble_Sort_A(a,n);</span>  <span class="token comment" spellcheck="true">//Bubble_Sort_B(a,n);</span>  <span class="token comment" spellcheck="true">//Bubble_Sort_C(a,n);</span>  <span class="token comment" spellcheck="true">//Quick_Sort(a,1,n);</span>  <span class="token comment" spellcheck="true">//选择排序</span>  <span class="token comment" spellcheck="true">//Selec_Sort(a,n);</span>  <span class="token comment" spellcheck="true">//Heap_Sort(a,n);</span>  <span class="token comment" spellcheck="true">//归并排序</span>  <span class="token comment" spellcheck="true">//Merge_Sort(a,1,n);</span>  <span class="token comment" spellcheck="true">//基数排序</span>  <span class="token comment" spellcheck="true">//Radix_Sort(a,n);</span>  <span class="token comment" spellcheck="true">//计数排序</span>  <span class="token comment" spellcheck="true">//Count_Sort(a,n);</span>  <span class="token comment" spellcheck="true">//桶排序</span>  <span class="token comment" spellcheck="true">//Bucket_Sort(a,n);</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> template </tag>
            
            <tag> Sorting </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph Theory Template</title>
      <link href="/2019/09/27/graph-theory-template/"/>
      <url>/2019/09/27/graph-theory-template/</url>
      
        <content type="html"><![CDATA[<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><pre class="line-numbers language-cpp"><code class="language-cpp">  queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>cmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        d<span class="token punctuation">[</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          cmp<span class="token punctuation">[</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> cmp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>          Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-sat-amp-强联通分量分解"><a href="#2-sat-amp-强联通分量分解" class="headerlink" title="2-sat &amp; 强联通分量分解"></a>2-sat &amp; 强联通分量分解</h2><h3 id="kosaraju"><a href="#kosaraju" class="headerlink" title="kosaraju"></a>kosaraju</h3><p>两遍 dfs  kosaraju 比tarjan慢</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//vector存边比较慢，可以考虑用链式前向星</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正向邻接表</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rG<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反向邻接表</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vs<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//拓扑序存点</span><span class="token keyword">int</span> cmp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标号</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  used<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">rdfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>  used<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  cmp<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rG<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>rG<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">rdfs</span><span class="token punctuation">(</span>rG<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">scc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> vs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">rdfs</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>tot<span class="token punctuation">,</span>top<span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>cnts<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// top 栈顶 cnts 强连通分量数量 cnt 时间戳</span><span class="token keyword">int</span> sta<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>cmp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sta[] 堆栈， h[] 链式前向星  dfn[]dfs次序数组 cmp[]强连通分量标号</span><span class="token comment" spellcheck="true">//low[] u结点或者u的子树结点所能追溯到的最早栈中结点的次序号</span><span class="token keyword">bool</span> ins<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否在栈中</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> to<span class="token punctuation">,</span>next<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>  es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  tot <span class="token operator">=</span> top <span class="token operator">=</span> cnts <span class="token operator">=</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>ins<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>dfn<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dfn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>  ins<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  sta<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">~</span>i <span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">Tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>  low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ins<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>     low<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    cnts<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>      t <span class="token operator">=</span> sta<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>      ins<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      cmp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> cnts<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">scc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有序输出"><a href="#有序输出" class="headerlink" title="有序输出"></a>有序输出</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">8000</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>top<span class="token punctuation">;</span><span class="token keyword">int</span> sta<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>x<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    sta<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> top<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                   used<span class="token punctuation">[</span>sta<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"NIE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><h3 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> fa<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> depth<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//depth[root] = 1, dfs(root)</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">[</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>       fa<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>       depth<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lca</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> depth<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> depth<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> depth<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> x <span class="token operator">=</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> x <span class="token operator">=</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> fa<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="求树的直径"><a href="#求树的直径" class="headerlink" title="求树的直径"></a>求树的直径</h2><ul><li>两遍dfs</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Codeforces 592 D. Super M</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++/h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> r(a) scanf("%d",&amp;a)</span><span class="token macro property">#<span class="token directive keyword">define</span> p(a) printf("%d",a)</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">123456</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>set <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> cnt<span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">;</span><span class="token keyword">int</span> ed<span class="token punctuation">;</span><span class="token keyword">int</span> len_max<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> rt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">dfs_1</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rt <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">>=</span> len_max<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len_max <span class="token operator">==</span> num<span class="token punctuation">)</span> st <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> st <span class="token operator">=</span> x<span class="token punctuation">;</span>            len_max <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> rt <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">||</span>cnt<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> rt <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  if(rt) cout &lt;&lt; "##" &lt;&lt; x&lt;&lt;endl;</span>    <span class="token keyword">return</span> rt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">get_tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  vis<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cout &lt;&lt; "##"&lt;&lt;a[0]&lt;&lt;endl;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>        <span class="token function">r</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">r</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token punctuation">,</span>u<span class="token punctuation">;</span>        <span class="token function">r</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">r</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>  <span class="token function">r</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cnt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">get_tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> cnt<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  cout &lt;&lt; endl;</span>       <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       st <span class="token operator">=</span> INF<span class="token punctuation">;</span>       vis<span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       len_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token function">dfs_1</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ed <span class="token operator">=</span> st<span class="token punctuation">;</span>       st <span class="token operator">=</span> INF<span class="token punctuation">;</span>       vis<span class="token punctuation">[</span>ed<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       len_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token function">dfs_1</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>len_max<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h2><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ul><li>Kruskal / 并查集  O(ElgE)</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">;</span>    <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">u</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> edge <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> edge <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> a<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">?</span> x <span class="token operator">:</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">same</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>     es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sort</span><span class="token punctuation">(</span>es<span class="token punctuation">,</span>es<span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">same</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       <span class="token function">unit</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       ans <span class="token operator">+</span><span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//O(VElogE)</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> in<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记其是否是最小生成树上的边</span><span class="token keyword">int</span> md<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录最小生成树的u-v之间的最大边权</span><span class="token comment" spellcheck="true">//省略并查集模板</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造最大边权</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> dis<span class="token punctuation">)</span><span class="token punctuation">{</span>   vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> in<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>             md<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Unique_MST</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      es<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token function">sort</span><span class="token punctuation">(</span>es<span class="token punctuation">,</span>es<span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">same</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>          res <span class="token operator">+</span><span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>          <span class="token function">unit</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">,</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          in<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//cout &lt;&lt; res &lt;&lt; endl;</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> INF<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>          ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>res<span class="token operator">-</span>md<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//cout &lt;&lt; es[i].u &lt;&lt; " " &lt;&lt; es[i].v &lt;&lt; " " &lt;&lt; md[es[i].u][es[i].v] &lt;&lt; endl;</span>       <span class="token punctuation">}</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最小树形图"><a href="#最小树形图" class="headerlink" title="最小树形图"></a>最小树形图</h3><ul><li>朱刘算法 O(VM)</li></ul><p>不定根最小树形图就再加一个超级源点，源点与所有节点连边，边权 = sum + 1(sum = c1 + ..cm)即可。<br>然后最后与原点相连的就是root.主要修改下面两个地方</p><pre class="line-numbers language-cpp"><code class="language-cpp">   <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&lt;</span> in<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> u <span class="token operator">!=</span> v<span class="token punctuation">)</span>       <span class="token punctuation">{</span>         in<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span>pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> root<span class="token punctuation">)</span> rt <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//利用边m - m+n-1 与点1-n的映射关系</span>       <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        es<span class="token punctuation">[</span>m<span class="token operator">+</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    type ans <span class="token operator">=</span> <span class="token function">MTG</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">>=</span> <span class="token number">2</span><span class="token operator">*</span>sum<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"impossible\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %d\n\n"</span><span class="token punctuation">,</span>ans<span class="token operator">-</span>sum<span class="token punctuation">,</span>rt<span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-8</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> type double</span>type in<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> id<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>used<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>pre<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>  type c<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> type z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">u</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">v</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">c</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span>type <span class="token function">MTG</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>  type res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">,</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       <span class="token keyword">int</span> u <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>       <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&lt;</span> in<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> u <span class="token operator">!=</span> v<span class="token punctuation">)</span>  in<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span>pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//找最小的入边</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>       res <span class="token operator">+</span><span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> INF<span class="token punctuation">)</span> <span class="token operator">&lt;</span> eps<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//加入所有的入边权到答案中</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//枚举每个点为起点进行找环</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> v <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> used<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> i <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  used<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span>v <span class="token operator">=</span> pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> id<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找到环的时候进行缩点编号</span>       <span class="token punctuation">{</span>         <span class="token operator">++</span>cnt<span class="token punctuation">;</span>         id<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> pre<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> u <span class="token operator">!=</span> v<span class="token punctuation">;</span> u <span class="token operator">=</span> pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> id<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无环则退出</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  id<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更新边</span>     <span class="token punctuation">{</span>       <span class="token keyword">int</span> u <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u<span class="token punctuation">;</span>       <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>       es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">=</span> id<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>       es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">=</span> id<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> v<span class="token punctuation">)</span>  es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">-</span><span class="token operator">=</span> in<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新边权</span>     <span class="token punctuation">}</span>     n <span class="token operator">=</span> cnt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新节点数目和根节点编号</span>     root <span class="token operator">=</span> id<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成树计数"><a href="#生成树计数" class="headerlink" title="生成树计数"></a>生成树计数</h3><ul><li>基尔霍夫矩阵树定理</li></ul><p>无向图的基尔霍夫矩阵: 对角线上表示每个点的度数,若ij之间有边则矩阵ij处为-1<br>无向图的生成树的数目为: 任意一个n-1阶主子式的行列式的绝对值.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> type long long</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录度数</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//邻接矩阵</span>type c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基尔霍夫矩阵</span><span class="token comment" spellcheck="true">//行列式求和</span>type <span class="token function">det</span><span class="token punctuation">(</span>type a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    type ret<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        type t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> t<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token operator">=</span><span class="token operator">-</span>ret<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    ret<span class="token operator">=</span>ret<span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ret<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>   ret<span class="token operator">=</span><span class="token operator">-</span>ret<span class="token punctuation">;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>type <span class="token function">num_st</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">else</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// for(int i = 1; i &lt;= n; i++)</span>    <span class="token comment" spellcheck="true">//  for(int j = 1; j &lt;= n; j++)</span>    <span class="token comment" spellcheck="true">//     printf("%lld%c",c[i][j],j == n ? '\n' : ' ');</span>    <span class="token keyword">return</span> <span class="token function">det</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单源最短路"><a href="#单源最短路" class="headerlink" title="单源最短路"></a>单源最短路</h2><h3 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h3><p>O(ElgV) 适合不含非负权边最短路</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span>cost<span class="token punctuation">;</span>    <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cost</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector <span class="token operator">&lt;</span>edge<span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue <span class="token operator">&lt;</span> P<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>P<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>P<span class="token operator">></span> <span class="token operator">></span>  Q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//P.first 是距离，.P.second 是顶点</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P x <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dist <span class="token operator">=</span> x<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> x<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排除u相同时, dist不同的情况。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            edge e <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>dist<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>      G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><ul><li>bfs O(KE - VE)</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>inq<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>inq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    inq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inq<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            edge e <span class="token operator">=</span> G<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>inq<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>cnt<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>                    inq<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dfs + spfa 找负环 O(KM)</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//  memset(vis,false,sizeof(vis));</span><span class="token comment" spellcheck="true">//  memset(d,INF,sizeof(d));</span><span class="token comment" spellcheck="true">//   d[0] = 0;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>  vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i <span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">spfa</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Bellman-Ford-O-VE"><a href="#Bellman-Ford-O-VE" class="headerlink" title="Bellman_Ford  O(VE)"></a>Bellman_Ford  O(VE)</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge <span class="token punctuation">{</span>  <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cost<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>edge es<span class="token punctuation">[</span>maxm<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Bellman_Ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            edge e <span class="token operator">=</span> es<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INF <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>  d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>from<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>dist<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>            edge e1<span class="token punctuation">,</span>e2<span class="token punctuation">;</span>            e1<span class="token punctuation">.</span>from <span class="token operator">=</span> u<span class="token punctuation">,</span>e1<span class="token punctuation">.</span>to <span class="token operator">=</span> v<span class="token punctuation">,</span>e1<span class="token punctuation">.</span>cost <span class="token operator">=</span> dist<span class="token punctuation">;</span>            e2<span class="token punctuation">.</span>from <span class="token operator">=</span> v<span class="token punctuation">,</span>e2<span class="token punctuation">.</span>to <span class="token operator">=</span> u<span class="token punctuation">,</span>e2<span class="token punctuation">.</span>cost <span class="token operator">=</span> dist<span class="token punctuation">;</span>            es<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e1<span class="token punctuation">;</span>            es<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">Bellman_Ford</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多源最短路"><a href="#多源最短路" class="headerlink" title="多源最短路"></a>多源最短路</h2><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><ul><li>O(V^3)</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>               mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>mp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>mp<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>dist<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><h3 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h3><h4 id="EK"><a href="#EK" class="headerlink" title="EK"></a>EK</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Max_flow</span><span class="token comment" spellcheck="true">//@2018/05/02 Wednesday</span><span class="token comment" spellcheck="true">//EK algorithm [Edmonds Karp] O(V*E^2) O(v^2)</span><span class="token comment" spellcheck="true">//by Tawn</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n - Vertices  m - edges</span><span class="token keyword">int</span> pre<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//record predecesor and sign if it is visited</span><span class="token keyword">int</span> cap<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//record the capacity of residual network</span><span class="token keyword">int</span> flow<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//record the residual flow from starting vertex to current vertex</span>queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> ed<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">memset</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  pre<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  flow<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>  q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> ed<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cap<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>              flow<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>flow<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span>cap<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>ed<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>              <span class="token keyword">return</span> flow<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">EK</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> ed<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the augmenting flow</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the max_flow</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">bfs</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//argumenting path</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> ed<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">!=</span> st<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> f <span class="token operator">=</span> pre<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            cap<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> res<span class="token punctuation">;</span>            cap<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> res<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//reversible edge</span>            k <span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sum <span class="token operator">+</span><span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>c<span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>cap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       cap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">EK</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Max_flow</span><span class="token comment" spellcheck="true">//@2018/05/04 Friday</span><span class="token comment" spellcheck="true">//Dinic  O(n^2 * m)  O(m*3*2)</span><span class="token comment" spellcheck="true">//by Tawn</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录层数</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链式前向星</span><span class="token keyword">int</span> cur<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> to<span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token keyword">int</span> next<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录边 注意是2倍</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>c<span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">memset</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   l<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> t<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>         <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> mf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token keyword">return</span> mf<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">=</span> cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span>mf <span class="token operator">-</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">-</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        ret <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> mf<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>   tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SAP"><a href="#SAP" class="headerlink" title="SAP"></a>SAP</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//Max_flow</span><span class="token comment" spellcheck="true">//@2018/05/04 Friday</span><span class="token comment" spellcheck="true">//SAP  O(n^2 * m)  O(m*3*2)</span><span class="token comment" spellcheck="true">//by Tawn</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链式前向星</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span> <span class="token keyword">int</span> to<span class="token punctuation">;</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token keyword">int</span> next<span class="token punctuation">;</span> <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录边 注意是2倍</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>   es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>c<span class="token punctuation">,</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   head<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">SAP</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> numh<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>ce<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>pre<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//numh 记录gap优化的统计高度数量数组，h 距离标号数组，ce 当前弧，pre前驱数组</span>   <span class="token keyword">int</span> f<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> neck<span class="token punctuation">,</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化最大流为0</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>numh<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>numh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  ce<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   numh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>   u <span class="token operator">=</span> s<span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//寻找增广路</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> t<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           f <span class="token operator">=</span> INF<span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> s<span class="token punctuation">;</span> i <span class="token operator">!=</span> t<span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>ce<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>f <span class="token operator">></span> es<span class="token punctuation">[</span>ce<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   neck <span class="token operator">=</span> i<span class="token punctuation">;</span>                   f <span class="token operator">=</span> es<span class="token punctuation">[</span>ce<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> s<span class="token punctuation">;</span> i <span class="token operator">!=</span> t<span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>ce<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               temp <span class="token operator">=</span> ce<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               es<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">-</span><span class="token operator">=</span> f<span class="token punctuation">;</span>               es<span class="token punctuation">[</span>temp<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           ans <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>           u <span class="token operator">=</span> neck<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//寻找可行弧</span>       <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> ce<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> h<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//寻找增广路</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           ce<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>           pre<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>           u <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">else</span>       <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>numh<span class="token punctuation">[</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//gap optimization</span>           ce<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> n<span class="token punctuation">,</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span>  temp <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> h<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token operator">++</span>numh<span class="token punctuation">[</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> s<span class="token punctuation">)</span> u <span class="token operator">=</span> pre<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重标号并且从当前点前驱重新增广</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">add_edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加反向边</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">SAP</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h3><h4 id="EK-amp-Spfa"><a href="#EK-amp-Spfa" class="headerlink" title="EK &amp; Spfa"></a>EK &amp; Spfa</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span>  <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//const LL mod = 1e9 + 7;</span><span class="token macro property">#<span class="token directive keyword">define</span> PI 3.1415926</span><span class="token macro property">#<span class="token directive keyword">define</span> sc(x)  scanf("%d",&amp;x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pf(x)  printf("%d",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfn(x) printf("%d\n",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfln(x) printf("%lld\n",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfs(x) printf("%d ",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(n) for(int i = 0; i &lt; n; i++)</span><span class="token macro property">#<span class="token directive keyword">define</span> per(n) for(int i = n-1; i >= 0; i--)</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,x) memset(a,x,sizeof(a))</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span>flow<span class="token punctuation">,</span>cost<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">int</span> flow<span class="token punctuation">,</span> <span class="token keyword">int</span> cost<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">from</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">to</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">flow</span><span class="token punctuation">(</span>flow<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cost</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>edge<span class="token operator">></span> E<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> inq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">int</span> cost<span class="token punctuation">)</span><span class="token punctuation">{</span>  E<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  E<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span>from<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tot <span class="token operator">=</span> E<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  G<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tot<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  G<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tot<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>flow<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>cost<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">mem</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mem</span><span class="token punctuation">(</span>inq<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>inq<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>  queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span>  Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inq<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      edge e <span class="token operator">=</span> E<span class="token punctuation">[</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>cap <span class="token operator">></span> e<span class="token punctuation">.</span>flow <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>cap <span class="token operator">-</span> e<span class="token punctuation">.</span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>inq<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span> inq<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  flow <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>  cost <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> u <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> s<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    E<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    E<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow <span class="token operator">-</span><span class="token operator">=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    u <span class="token operator">=</span> E<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">mcf</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> flow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>flow<span class="token punctuation">,</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token keyword">return</span> cost<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//记得初始化各个变量</span>   <span class="token keyword">int</span> s<span class="token punctuation">,</span>t<span class="token punctuation">;</span>   <span class="token function">mcf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上下界网络流"><a href="#上下界网络流" class="headerlink" title="上下界网络流"></a>上下界网络流</h3><h4 id="无源汇可行流"><a href="#无源汇可行流" class="headerlink" title="无源汇可行流"></a>无源汇可行流</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 此处省略dinic板子</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> in<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>      in<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> b<span class="token punctuation">;</span>      in<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res <span class="token operator">+</span><span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token operator">-</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">!=</span> res<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> es<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有源汇可行流"><a href="#有源汇可行流" class="headerlink" title="有源汇可行流"></a>有源汇可行流</h4><p>新增超级源点超级汇点  &amp;&amp;  t -INF-&gt; s</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//2018/10/04</span><span class="token comment" spellcheck="true">//by Tawn in JNU</span><span class="token comment" spellcheck="true">// 此处省略dinic板子</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> C<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> in<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//freopen("in.txt","r",stdin);</span> <span class="token keyword">int</span> T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> s <span class="token operator">=</span> n<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> n<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>ss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tt<span class="token operator">=</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>   tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>s<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token function">add_edge</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>i<span class="token punctuation">,</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res <span class="token operator">+</span><span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>tt<span class="token punctuation">,</span><span class="token operator">-</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">!=</span> res<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"IMPOSSIBLE\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>es<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span> j <span class="token operator">==</span> m<span class="token operator">?</span> <span class="token string">'\n'</span><span class="token operator">:</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有源汇最大流"><a href="#有源汇最大流" class="headerlink" title="有源汇最大流"></a>有源汇最大流</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 此处省略dinic板子</span><span class="token keyword">int</span> in<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>maxm<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该边下界</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> s <span class="token operator">=</span> n<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>t <span class="token operator">=</span> n<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>ss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>tt <span class="token operator">=</span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>totc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>s<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">add_edge</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>i<span class="token punctuation">,</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> res <span class="token operator">+</span><span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>tt<span class="token punctuation">,</span><span class="token operator">-</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> res<span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>s<span class="token punctuation">,</span><span class="token operator">-</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> _ans <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>_ans<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totc<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有源汇最小流"><a href="#有源汇最小流" class="headerlink" title="有源汇最小流"></a>有源汇最小流</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 此处省略dinic板子</span><span class="token keyword">int</span> in<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n<span class="token operator">||</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> ss <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tt <span class="token operator">=</span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      string s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>      <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>p<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      in<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> p<span class="token punctuation">;</span>      in<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res <span class="token operator">+</span><span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>i<span class="token punctuation">,</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>tt<span class="token punctuation">,</span><span class="token operator">-</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_edge</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>s<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> ans<span class="token punctuation">)</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>es<span class="token punctuation">[</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"impossible\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="判断是否二分图"><a href="#判断是否二分图" class="headerlink" title="判断是否二分图"></a>判断是否二分图</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> col<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用0，1染色，层序遍历，用同色则为false</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>        col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> from <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> to <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> to <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> to<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> col<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    col<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span>col<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> col<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">==</span> col<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h3><ul><li>匈牙利算法</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> line<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//寻找增广路O(VE)</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Max_match</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> all <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> all<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> all<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Hopcroft-Carp</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// O(sqrt(n)*e)</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">bool</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Mx<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>My<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">;</span><span class="token keyword">int</span> GM<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> GN<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> speed<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> _time<span class="token punctuation">;</span><span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    dis <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dy<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">)</span>  <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> v <span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dx<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>My<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dis <span class="token operator">=</span> dy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dx<span class="token punctuation">[</span>My<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>My<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dis <span class="token operator">!=</span> INF<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> dx<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>My<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dy<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> dis<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>My<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>My<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              My<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>              Mx<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Max_match</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> all <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Mx<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Mx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>My<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>My<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Mx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>            all<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> all<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最小路径覆盖"><a href="#最小路径覆盖" class="headerlink" title="最小路径覆盖"></a>最小路径覆盖</h3><ul><li>最小路径覆盖 = n-二分图最大匹配数  拆点建二分图</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*     int f = dfs(es[i].to,t,min(es[i].c,mf - ret));        if(f) nxt[x] = es[i].to;*/</span><span class="token keyword">int</span> nxt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录路径</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找路径时标记点</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>   tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>nxt<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token function">add_edge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token operator">+</span>n<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">-</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最小路径覆盖 = n - 二分图最大匹配</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>           <span class="token keyword">int</span> t <span class="token operator">=</span> i<span class="token punctuation">;</span>           <span class="token keyword">do</span><span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> nxt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">-</span>n<span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%c"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">==</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'\n'</span> <span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>二分图最小点权覆盖集 = 最小割 = 最大流，  最大点权独立集 = 总权 - 最小点权覆盖集</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming Template</title>
      <link href="/2019/09/27/dynamic-programming-template/"/>
      <url>/2019/09/27/dynamic-programming-template/</url>
      
        <content type="html"><![CDATA[<h2 id="最长上升子序列-nlogn"><a href="#最长上升子序列-nlogn" class="headerlink" title="最长上升子序列 nlogn"></a>最长上升子序列 nlogn</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// dp[k] 为长度为k时最小的 a[i]值;</span><span class="token comment" spellcheck="true">//如果a[i] >= dp[j], 说明dp[j+1] = a[i];</span><span class="token comment" spellcheck="true">//否则 二分查找dp{1-j} 中a[i] 所处的位置，并用a[i]取代。</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>dp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> ans <span class="token operator">=</span> j<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA11212 Editing a Book</title>
      <link href="/2019/02/27/uva11212/"/>
      <url>/2019/02/27/uva11212/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>你有一篇n个自然段组成的文章，希望将它们排列成1，2，…，n。可以用Ctrl+X（剪切）和Ctrl+V（粘贴）快捷键来完成任务。每次可以剪切一段连续的自然段，粘贴时按照顺序粘贴。注意，剪贴板只有一个，所以不能连续剪切两次，只能剪切和粘贴交替。例如，为了将{2，4，1，5，3，6}变为升序，可以剪切1将其放到2前，然后剪切3将其放到4前。再如，排列{3，4，5，1，2}，只需一次剪切和一次粘贴即可——将{3，4，5}放在{1，2}后，或者将{1，2}放在{3，4，5}前。</p><p><strong>【输入格式】</strong></p><p>多组输入数据，对于每组输入数据<br>第一行一个整数n (1 &lt; n &lt; 10)<br>第二行n个整数<br>当n=0结束</p><p><strong>【输出格式】</strong></p><p>对于第i组输入数据，输出:<br>Case i: ans<br>ans 为最少的操作次数<br>每组输出用占一行</p><p><strong>【输入样例】</strong></p><p>6<br>2 4 1 5 3 6<br>5<br>3 4 5 1 2<br>0  </p><p><strong>【输出样例】</strong></p><p>Case 1: 2<br>Case 2: 1  </p><p><strong>【测试网站】</strong></p><p><a href="https://vjudge.net/problem/UVA-11212" target="_blank" rel="noopener">uva11212</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>本题利用迭代加深搜索，也是一道典型的状态空间搜索问题，状态就是1~n的排列，初始状态是输入，终止状态是1,2,……n。由于n≤9,排列最多有9！=362880个，但由于每个状态的后继状态比较多，因此仍有TLE的危险。很显然，最坏的情况是需要n-1次剪切，搜索层数不多，但每一层的状态数目又非常庞大，适宜使用IDA<em>。本题如果利用迭代加深搜索，可以发现做多只需要8步，关键在于如何有效地剪枝。考虑后继不正确的数字的个数h，可以证明每次剪切时h最多减少3（因为一次剪切最多只会改变3个数字的后继，若剪切后这3个数字的后继都正确，则h最多减少了3），因此当h&gt;3</em>(maxd-d)时剪枝即可<br>减枝分析（也叫做启发函数）：<br>当改变一个区间的位置，最多会改变3个数的位置的正确性。<br>比如 1,2,3,4,5,6.序列，把2,3移动到6后面，那么1的后面变成了5, 而 6的后面编程了2,而3的后面变成 空了，同样，设当前有四个数字 a b c d ，如果把b移到c后面，则改变了a、b、c三个数的后继，所以最多会改变3个数的位置的正确性。<br>也就是说，对于这道题，如果遍历到了一个深度，（还能遍历的深度 - 当前深度） x 3　&lt; 不正确数字的个数，那么就没有必要继续遍历了，因为往后就是全把这些数字该对了也无法达到理想状态。<br>知道这个之后时间复杂度的问题就得到解决了，只需要每次枚举该步的所有移动就可以了。<br>搜索：截取 [i, j] 插入剩余序列的第k个数字前</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> Case<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">is_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxd<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">is_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">></span> <span class="token punctuation">(</span>maxd<span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>old<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> old<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> old<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> tot1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>tot1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> i<span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>tot1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> old<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> k<span class="token punctuation">;</span> v <span class="token operator">&lt;</span> tot<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>tot1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>maxd<span class="token punctuation">,</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token keyword">return</span> n<span class="token number">-1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>Case<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span><span class="token operator">++</span>Case<span class="token punctuation">,</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU1203 I NEED A OFFER!</title>
      <link href="/2019/02/26/hdu1203/"/>
      <url>/2019/02/26/hdu1203/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>Speakless很早就想出国，现在他已经考完了所有需要的考试，准备了所有要准备的材料，于是，便需要去申请学校了。<br>要申请国外的任何大学，你都要交纳一定的申请费用，这可是很惊人的。Speakless没有多少钱，总共只攒了n万美元。<br>他将在m个学校中选择若干的（当然要在他的经济承受范围内）。<br>每个学校都有不同的申请费用a（万美元），并且Speakless估计了他得到这个学校offer的可能性b。<br>不同学校之间是否得到offer不会互相影响。“I NEED A OFFER”，他大叫一声。<br>帮帮这个可怜的人吧，帮助他计算一下，他可以收到至少一份offer的最大概率。<br>（如果Speakless选择了多个学校，得到任意一个学校的offer都可以）。</p><p><strong>【输入格式】</strong></p><p>输入有若干组数据，每组数据的第一行有两个正整数n,m(0&lt;=n&lt;=10000,0&lt;=m&lt;=10000)<br>后面的m行，每行都有两个数据ai(整型),bi(实型)分别表示第i个学校的申请费用和可能拿到offer的概率。<br>输入的最后有两个0。</p><p><strong>【输出格式】</strong></p><p>每组数据都对应一个输出，表示Speakless可能得到至少一份offer的最大概率。用百分数表示，精确到小数点后一位。</p><p><strong>【输入样例】</strong></p><p>10 3<br>4 0.1<br>4 0.2<br>5 0.3<br>0 0</p><p><strong>【输出样例】</strong></p><p>44.0%</p><p><strong>【提示】</strong></p><p>你可以用 printf(“%%”) 去打印 ‘%’.</p><p><strong>【测试网站】</strong></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1203" target="_blank" rel="noopener">HDU1203</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>概率dp问题<br>由于概率很小，直接相乘会导致浮点数误差。<br>所以 取对数，化乘法为加法。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">11000</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token keyword">int</span> vol<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> val0<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>v <span class="token operator">||</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 初始化dp 数组    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>vol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  val<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">log2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>val0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  取对数    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">;</span> j<span class="token operator">-</span>vol<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>         dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>vol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  概率dp状态转移    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">-</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1lf"</span><span class="token punctuation">,</span>ans<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%%\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codevs1288 埃及分数</title>
      <link href="/2019/02/26/codevs1288/"/>
      <url>/2019/02/26/codevs1288/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>在古埃及，人们使用单位分数的和(形如1/a的, a是自然数)表示一切有理数。 如：2/3=1/2+1/6,但不允许2/3=1/3+1/3,因为加数中有相同的。 对于一个分数a/b,表示方法有很多种，但是哪种最好呢？ 首先，加数少的比加数多的好，其次，加数个数相同的，最小的分数越大越 好。 如： 19/45=1/3 + 1/12 + 1/180 19/45=1/3 + 1/15 + 1/45 19/45=1/3 + 1/18 + 1/30, 19/45=1/4 + 1/6 + 1/180 19/45=1/5 + 1/6 + 1/18. 最好的是最后一种，因为1/18比1/180,1/45,1/30,1/180都大。 给出a,b(0&lt;a&lt;b&lt;1000),编程计算最好的表达方式</p><p><strong>【输入格式】</strong></p><p>a b</p><p><strong>【输出格式】</strong></p><p>若干个数，自小到大排列，依次是单位分数的分母。</p><p><strong>【输入样例】</strong></p><p>19 45  </p><p><strong>【输出样例】</strong></p><p>5 6 18  </p><p><strong>【测试网站】</strong></p><p><a href="http://codevs.cn/problem/1288/" target="_blank" rel="noopener">codevs1288</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>题目意思为给定一个单位分数，拆分为几个单位分数之和，要求不能有相同的单位分数，且个数最少。当个数相同的，最小的分数最大的方案为最优。<br>所以可以从小到大枚举个数，然后dfs搜索，即迭代加深搜索。<br>需要注意的是，需要剪枝，<br>1.枚举分母时由于受分数大小限制，所以分母有下限。<br>2.枚举分母是由于总个数确定maxd，当前已枚举的个数确定d,所以剩余个数确定maxd-d+1,<br>所以分母有上限，(maxd-d+1)x(1/i) &gt; x/y  </p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>LL ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>cur<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>LL <span class="token function">gcd</span><span class="token punctuation">(</span>LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">st</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> x<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">></span> cur<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">idfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> mind<span class="token punctuation">,</span> LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//mind 最小的分母</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">==</span> maxd<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    cur<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token operator">/</span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mind<span class="token punctuation">,</span><span class="token function">st</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//分母下界</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxd<span class="token operator">-</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>y <span class="token operator">&lt;=</span> x<span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//剪枝优化</span>     cur<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>     LL xx <span class="token operator">=</span> x<span class="token operator">*</span>i<span class="token operator">-</span>y<span class="token punctuation">;</span> LL yy <span class="token operator">=</span> y<span class="token operator">*</span>i<span class="token punctuation">;</span> LL g <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span>yy<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">idfs</span><span class="token punctuation">(</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>xx<span class="token operator">/</span>g<span class="token punctuation">,</span>yy<span class="token operator">/</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> ok<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  LL x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>y<span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">st</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">++</span>maxd<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">idfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld%c"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">==</span> maxd<span class="token operator">?</span> <span class="token string">'\n'</span> <span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP2758 编辑距离</title>
      <link href="/2019/02/26/luogup2758/"/>
      <url>/2019/02/26/luogup2758/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>设A和B是两个字符串。我们要用最少的字符操作次数，将字符串A转换为字符串B。这里所说的字符操作共有三种：</p><p>1、删除一个字符；</p><p>2、插入一个字符；</p><p>3、将一个字符改为另一个字符；</p><p>！皆为小写字母！</p><p><strong>【输入格式】</strong></p><p>第一行为字符串A；第二行为字符串B；字符串A和B的长度均小于2000。</p><p><strong>【输出格式】</strong></p><p>只有一个正整数，为最少字符操作次数。</p><p><strong>【输入样例】</strong></p><p>sfdqxbw<br>gfdgw  </p><p><strong>【输出样例】</strong></p><p>4  </p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/luoguP2758" target="_blank" rel="noopener">luoguP2758</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>dp[i][j] 表示第一行的前i个字母和第二行的前j个字母进行匹配<br>通过增删替换等操作有如下动态转移方程<br>dp[i][j] = min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+ (s[i] != s[j])</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dp[i][j] = min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+ (s[i] != s[j])</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  string s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span>  cin <span class="token operator">>></span> s1 <span class="token operator">>></span> s2<span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; dp[i][j] &lt;&lt; endl;</span>     <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ1651 Multiplication Puzzle</title>
      <link href="/2019/02/26/poj1651/"/>
      <url>/2019/02/26/poj1651/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>给你n张卡牌，每个卡牌有一个权值，当你取出一个卡片时，你会得到一个得分,例如10 1 50 20 5, 你拿出第二张，则会得到分数10 x 1 x 50，<br>要求拿完2 - n-1张卡牌，不能拿第一张和最后一张。例如拿的顺序是1，20，50， 则分数为10 x 1 x 50 + 50 x 20 x 5 + 10 x 50 x 5 = 8000。</p><p><strong>【输入格式】</strong></p><p>第一行一个数n。(3 &lt; n &lt; 100)<br>第二行n个整数代表权值。</p><p><strong>【输出格式】</strong></p><p>输出一个整数——最小的得分</p><p><strong>【输入样例】</strong></p><p>6<br>10 1 50 50 20 5  </p><p><strong>【输出样例】</strong></p><p>3650  </p><p><strong>【测试网站】</strong></p><p><a href="http://poj.org/problem?id=1651" target="_blank" rel="noopener">poj1651</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>区间DP,dp[i][j] 表示拿出i-j的牌的最小得分<br>dp[i][j] = min(dp[i][k-1] + dp[k+1][j] + a[i-1] x a[k] x a[j+1])   (i&lt;=k&lt;=j)</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>             dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU2412 Party at Hali-Bula</title>
      <link href="/2019/02/26/hdu2412/"/>
      <url>/2019/02/26/hdu2412/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>公司里有n(n&lt;=200)个人形成一个树状结构，即除了老板之外每个员工都有唯一的直属上司。要求选尽量多的人，但不能同时选择一个人和他的直属上司。问：最多能选多少人，以及在人数最多的前提下方案是否唯一。</p><p><strong>【输入格式】</strong></p><p>第一行一个数n;第二行输入老板的名字;以下的n-1行中,每行是一位员工的名字和其直属上司的名字(英文单词,长度为1到100),两个名字之间有空格隔开,’0’为输入结束的标识符。</p><p><strong>【输出格式】</strong></p><p>一行,输出一个数字，表示最大的访客数量。并再同一行输出单词’Yes’或’No’，代表目前方案是否唯一。</p><p><strong>【输入样例】</strong></p><p>6<br>Jason<br>Jack Jason<br>Joe Jack<br>Jill Jason<br>John Jack<br>Jim Jill<br>2<br>Ming<br>Cho Ming<br>0  </p><p><strong>【输出样例】</strong></p><p>4 Yes<br>1 No  </p><p><strong>【测试网站】</strong></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2412" target="_blank" rel="noopener">HDU2412</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>树形DP<br>用f[i][0]表示不选择i点时，i点及其子树能选出的最多人数，f[i][1]表示选择i点时，i点及其子树的最多人数<br>状态转移方程:<br>对于叶子节点 f[k][0] = 0, f[k][1] = 1<br>对于非叶子节点i,<br>f[i][0] = ∑ max(f[j][0], f[j][1]) (j是i的儿子)<br>f[i][1] = 1 + ∑ f[j][0] (j是i的儿子)<br>最多人数即为max(f[0][0], f[0][1])<br>如何判断最优解是否唯一?<br>新加一个状态dup[i][j]，表示相应的f[i][j]是否是唯一方案。<br>对于叶子结点, dup[k][0] = dup[k][1] = 1.<br>对于非叶子结点,<br>对于i的任一儿子j，若(f[j][0] &gt; f[j][1] 且 dup[j][0] == 0) 或 (f[j][0] &lt; f[j][1] 且 dup[j][1] == 0) 或 (f[j][0] == f[j][1])，则dup[i][0] = 0<br>对于i的任一儿子j有dup[j][0] = 0, 则dup[i][1] = 0</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> ans<span class="token punctuation">;</span><span class="token keyword">bool</span> dup<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  dup<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dup<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>     vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>     f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dup<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          dup<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dup<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>          dup<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          dup<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dup<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> dup<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>  <span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  string boss<span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>  cin <span class="token operator">>></span> boss<span class="token punctuation">;</span>  mp<span class="token punctuation">[</span>boss<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>     G<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     G<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   ans <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> dup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> dup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> ans <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1122 最大子树和</title>
      <link href="/2019/02/26/luogup1122/"/>
      <url>/2019/02/26/luogup1122/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>小明对数学饱有兴趣，并且是个勤奋好学的学生，总是在课后留在教室向老师请教一些问题。一天他早晨骑车去上课，路上见到一个老伯正在修剪花花草草，顿时想到了一个有关修剪花卉的问题。于是当日课后，小明就向老师提出了这个问题：</p><p>一株奇怪的花卉，上面共连有N N朵花，共有N-1N−1条枝干将花儿连在一起，并且未修剪时每朵花都不是孤立的。每朵花都有一个“美丽指数”，该数越大说明这朵花越漂亮，也有“美丽指数”为负数的，说明这朵花看着都让人恶心。所谓“修剪”，意为：去掉其中的一条枝条，这样一株花就成了两株，扔掉其中一株。经过一系列“修剪“之后，还剩下最后一株花（也可能是一朵）。老师的任务就是：通过一系列“修剪”（也可以什么“修剪”都不进行），使剩下的那株（那朵）花卉上所有花朵的“美丽指数”之和最大。</p><p>老师想了一会儿，给出了正解。小明见问题被轻易攻破，相当不爽，于是又拿来问你。</p><p><strong>【输入格式】</strong></p><p>第一行一个整数N(1 ≤ N ≤ 16000)N(1≤N≤16000)。表示原始的那株花卉上共N N朵花。</p><p>第二行有N N个整数，第II个整数表示第II朵花的美丽指数。</p><p>接下来N-1N−1行每行两个整数a,ba,b，表示存在一条连接第aa 朵花和第bb朵花的枝条。</p><p><strong>【输出格式】</strong></p><p>一个数，表示一系列“修剪”之后所能得到的“美丽指数”之和的最大值。保证绝对值不超过21474836472147483647。</p><p><strong>【输入样例】</strong></p><p>7<br>-1 -1 -1 1 1 1 0<br>1 4<br>2 5<br>3 6<br>4 7<br>5 7<br>6 7  </p><p><strong>【输出样例】</strong></p><p>3</p><p><strong>【说明】</strong></p><p>【数据规模与约定】</p><p>对于60%的数据，有N≤1000；</p><p>对于100%的数据，有N≤16000。</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1122" target="_blank" rel="noopener">luoguP11122</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>简单的树形DP,dp[i] += max(0,dp[j]), j 为 i 的子节点</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">16000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>      f<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ2955 Brackets</title>
      <link href="/2019/02/26/poj2955/"/>
      <url>/2019/02/26/poj2955/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>题目大意：给你一串()[]括号，要你求出这串括号的最大匹配个数，如’(‘与’)’匹配，为2个，’[‘与’]’匹配，为2个，其他不能匹配…….</p><p><strong>【输入格式】</strong></p><p>输入有多组样例，每组样例为一行字符，end时结束。</p><p><strong>【输出格式】</strong></p><p>每个样例输出一个答案，占一行</p><p><strong>【输入样例】</strong></p><p>((()))<br>()()()<br>([]])<br>)[)(<br>([][][)<br>end  </p><p><strong>【输出样例】</strong></p><p>6<br>6<br>4<br>0<br>6  </p><p><strong>【测试网站】</strong></p><p><a href="http://poj.org/problem?id=2955" target="_blank" rel="noopener">poj2955</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>dp[i][j]代表从区间i到区间j所匹配的括号的最大个数，首先，假设不匹配，那么dp[i][j]=dp[i+1][j]；然后查找i+1~~j有木有与第i个括号匹配的</p><p>假设存在：<br>dp[i][j]=max(dp[i][j],dp[i+1][k-1]+dp[k][j]+2)…..</p><p>注意有多组数据，dp数组不能开得太大，开2000*2000 TLE了</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'e'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  dp[i][j] = max(dp[i+1][j-1] + 1, dp[i+1][j], dp[i][j-1]);</span>  <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'['</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ3280 Cheapest Palindrome</title>
      <link href="/2019/02/26/poj3280/"/>
      <url>/2019/02/26/poj3280/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>给你长度为m的字符串，其中有n种字符，每种字符都有两个值，分别是插入这个字符的代价，删除这个字符的代价，让你求将原先给出的那串字符变成一个回文串的最小代价。</p><p><strong>【输入格式】</strong></p><p>第一行n,m;<br>第二行一个字符串<br>接下来n行一个字母，两个整数用空格隔开，分别代表增加和删除的代价</p><p><strong>【输出格式】</strong></p><p>一个整数，最小代价</p><p><strong>【输入样例】</strong></p><p>3 4<br>abcb<br>a 1000 1100<br>b 350 700<br>c 200 800  </p><p><strong>【输出样例】</strong></p><p>0  </p><p><strong>【说明】</strong></p><p>If we insert an “a” on the end to get “abcba”, the cost would be 1000. If we delete the “a” on the beginning to get “bcb”, the cost would be 1100. If we insert “bcb” at the begining of the string, the cost would be 350 + 200 + 350 = 900, which is the minimum.</p><p><strong>【测试网站】</strong></p><p><a href="http://poj.org/problem?id=3280" target="_blank" rel="noopener">poj3280</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>dp[i][j]代表区间i到区间j成为回文串的最小代价，那么对于dp[i][j]有三种情况：<br>1、dp[i+1][j]表示区间i到区间j已经是回文串了的最小代价，那么对于s[i]这个字母，我们有两种操作，删除与添加，对应有两种代价，dp[i+1][j]+add[s[i]],dp[i+1][j]+del[s[i]]，取这两种代价的最小值；<br>2、dp[i][j-1]表示区间i到区间j-1已经是回文串了的最小代价，那么对于s[j]这个字母，同样有两种操作，dp[i][j-1]+add[s[j]],dp[i][j-1]+del[s[j]]，取最小值<br>3、若是s[i]==s[j]，dp[i+1][j-1]表示区间i+1到区间j-1已经是回文串的最小代价，那么对于这种情况，我们考虑dp[i][j]与dp[i+1][j-1]的大小<br>然后dp[i][j]取上面这些情况的最小值</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>string str<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  cin <span class="token operator">>></span> str<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span> b<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token number">-1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1140 相似基因</title>
      <link href="/2019/02/26/luogup1140/"/>
      <url>/2019/02/26/luogup1140/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>大家都知道，基因可以看作一个碱基对序列。它包含了44种核苷酸，简记作A,C,G,TA,C,G,T。生物学家正致力于寻找人类基因的功能，以利用于诊断疾病和发明药物。</p><p>在一个人类基因工作组的任务中，生物学家研究的是：两个基因的相似程度。因为这个研究对疾病的治疗有着非同寻常的作用</p><p>两个基因的相似度的计算方法如下：  </p><p>对于两个已知基因，例如AGTGATGAGTGATG和GTTAGGTTAG，将它们的碱基互相对应。当然，中间可以加入一些空碱基-，例如：</p><table><thead><tr><th>A</th><th>G</th><th>T</th><th>G</th><th>A</th><th>T</th><th>-</th><th>G</th></tr></thead><tbody><tr><td>-</td><td>G</td><td>T</td><td>-</td><td>-</td><td>T</td><td>A</td><td>G</td></tr></tbody></table><p>这样,两个基因之间的相似度就可以用碱基之间相似度的总和来描述，碱基之间的相似度如下表所示：</p><p>||A|C|G|T|-|<br>|-||-|-|-|-|-|<br>|A|5|-1|-2|-1|-3|<br>|C|-1|5|-3|-2|-4|<br>|G|-2|-3|5|-2|-2|<br>|T|-1|-2|-2|5|-1|<br>|-|-3|-4|-2|-1|*|<br>那么相似度就是：<br>(-3)+5+5+(-2)+(-3)+5+(-3)+5=9(−3)+5+5+(−2)+(−3)+5+(−3)+5=9。<br>因为两个基因的对应方法不唯一，例如又有：</p><p>| A | G | T | G | A | T | G |<br>|-|-|-|-|-|-|-|-|<br>| - | G | T | T | A | - | G |</p><p>相似度为：(-3)+5+5+(-2)+5+(-1)+5=14(−3)+5+5+(−2)+5+(−1)+5=14。规定两个基因的相似度为所有对应方法中，相似度最大的那个。</p><p><strong>【输入格式】</strong></p><p>共两行。每行首先是一个整数，表示基因的长度；隔一个空格后是一个基因序列，序列中只含A,C,G,TA,C,G,T四个字母。1 \le 1≤序列的长度 \le 100≤100。</p><p><strong>【输出格式】</strong></p><p>仅一行，即输入基因的相似度。</p><p><strong>【输入样例】</strong></p><p>7 AGTGATG<br>5 GTTAG</p><p><strong>【输出样例】</strong></p><p>14</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1140" target="_blank" rel="noopener">luoguP1140</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>dp[i][j] 表示第一个基因序列前i个和第二个基因序列前j个进行配对时的最大相似度。</p><p>dp[i][j] = max(dp[i][j],dp[i-1][j-1] + mp[a[i]][b[j]])<br>dp[i][j] = max(dp[i][j],dp[i-1][j] + mp[a[i]][‘-‘])<br>dp[i][j] = max(dp[i][j],dp[i][j-1] + mp[‘-‘][b[j]])</p><p>初始化:<br>所有的dp[i][0]为mp[a[i][‘-‘]]<br>所有的dp[0][i]为mp[‘-‘][b[i]]</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>string sa<span class="token punctuation">,</span>sb<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">turn</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'G'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'T'</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> cin <span class="token operator">>></span> sa<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> cin <span class="token operator">>></span> sb<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">turn</span><span class="token punctuation">(</span>sa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  b<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">turn</span><span class="token punctuation">(</span>sb<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化时需要注意</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>  dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> mp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//  cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; dp[i][j] &lt;&lt; endl;</span>      <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1282 多米诺骨牌</title>
      <link href="/2019/02/25/luogup1282/"/>
      <url>/2019/02/25/luogup1282/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>多米诺骨牌有上下2个方块组成，每个方块中有1~6个点。现有排成行的</p><p>上方块中点数之和记为S1，下方块中点数之和记为S2，它们的差为|S1-S2|。例如在图8-1中，S1=6+1+1+1=9，S2=1+5+3+2=11，|S1-S2|=2。每个多米诺骨牌可以旋转180°，使得上下两个方块互换位置。 编程用最少的旋转次数使多米诺骨牌上下2行点数之差达到最小。</p><p><img src="https://cdn.luogu.org/upload/pic/91.png" alt="你想输入的替代文字"></p><p>对于图中的例子，只要将最后一个多米诺骨牌旋转180°，可使上下2行点数之差为0。</p><p><strong>【输入格式】</strong></p><p>输入文件的第一行是一个正整数n(1≤n≤1000)，表示多米诺骨牌数。接下来的n行表示n个多米诺骨牌的点数。每行有两个用空格隔开的正整数，表示多米诺骨牌上下方块中的点数a和b，且1≤a，b≤6。</p><p><strong>【输出格式】</strong></p><p>输出文件仅一行，包含一个整数。表示求得的最小旋转次数。</p><p><strong>【输入样例】</strong></p><p>4<br>6 1<br>1 5<br>1 3<br>1 2  </p><p><strong>【输出样例】</strong></p><p>1</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1282" target="_blank" rel="noopener">luoguP1282</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>dp[i][j] 表示前i个第一行达到和为j时旋转次数最小值<br>dp[i][j] = min(dp[i-1][j],dp[i-1][j-a[i]]<br>(1 &lt;= i &lt;= n, 0 &lt;= j &lt;= 6*n)<br>最后在枚举j，求其对应的和的差值，统计差值最小的情况下的最小旋转次数，即答案</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token operator">*</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> INF<span class="token punctuation">,</span>anst <span class="token operator">=</span> INF<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> s<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INF<span class="token punctuation">)</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>anst <span class="token operator">></span> <span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token operator">-</span>j<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>      anst <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token operator">-</span>j<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>anst <span class="token operator">==</span> <span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token operator">-</span>j<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1880 石子合并</title>
      <link href="/2019/02/25/luogup1880/"/>
      <url>/2019/02/25/luogup1880/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>在一个圆形操场的四周摆放N堆石子,现要将石子有次序地合并成一堆.规定每次只能选相邻的2堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。</p><p>试设计出1个算法,计算出将N堆石子合并成1堆的最小得分和最大得分.</p><p><strong>【输入格式】</strong></p><p>数据的第1行试正整数N,1≤N≤100,表示有N堆石子.第2行有N个数,分别表示每堆石子的个数.</p><p><strong>【输出格式】</strong></p><p>输出共2行,第1行为最小得分,第2行为最大得分.</p><p><strong>【输入样例】</strong></p><p>4<br>4 5 9 4  </p><p><strong>【输出样例】</strong></p><p>43<br>54</p><p><strong>【说明】</strong></p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P880" target="_blank" rel="noopener">luoguP1880</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><p>因为石子是围成一圈的，所以将n堆石子展开成2<em>n,再进行区间dp<br>从长度为2开始，一直到n，n-2</em>n 的部分也需要进行dp, dp状态转移方程为：<br>dp[i][j] = max(dp[i][k] + dp[k+1][j] + sum[j]-sum[i-1]) (i&lt;k&lt;j-1)<br>最后答案max(dp[i][i+n-1])。<br>最小得分亦然。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> n<span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      a<span class="token punctuation">[</span>n<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>dp1<span class="token punctuation">,</span>INF<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>dp2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> len<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// !j &lt;= 2*n!</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>           dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp1<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp2<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans1 <span class="token operator">=</span> INF<span class="token punctuation">,</span>ans2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ans1 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans1<span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans2 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans2<span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d\n"</span><span class="token punctuation">,</span>ans1<span class="token punctuation">,</span>ans2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1280 尼克的任务</title>
      <link href="/2019/02/25/luogup1280/"/>
      <url>/2019/02/25/luogup1280/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>尼克每天上班之前都连接上英特网，接收他的上司发来的邮件，这些邮件包含了尼克主管的部门当天要完成的全部任务，每个任务由一个开始时刻与一个持续时间构成。</p><p>尼克的一个工作日为N分钟，从第一分钟开始到第N分钟结束。当尼克到达单位后他就开始干活。如果在同一时刻有多个任务需要完成，尼克可以任选其中的一个来做，而其余的则由他的同事完成，反之如果只有一个任务，则该任务必需由尼克去完成，假如某些任务开始时刻尼克正在工作，则这些任务也由尼克的同事完成。如果某任务于第P分钟开始，持续时间为T分钟，则该任务将在第P+T-1分钟结束。</p><p>写一个程序计算尼克应该如何选取任务，才能获得最大的空暇时间。</p><p><strong>【输入格式】</strong></p><p>输入数据第一行含两个用空格隔开的整数N和K(1≤N≤10000，1≤K≤10000)，N表示尼克的工作时间，单位为分钟，K表示任务总数。</p><p>接下来共有K行，每一行有两个用空格隔开的整数P和T，表示该任务从第P分钟开始，持续时间为T分钟，其中1≤P≤N，1≤P+T-1≤N。</p><p><strong>【输出格式】</strong></p><p>输出文件仅一行，包含一个整数，表示尼克可能获得的最大空暇时间。</p><p><strong>【输入样例】</strong></p><p>15 6<br>1 2<br>1 6<br>4 11<br>8 5<br>8 1<br>11 5    </p><p><strong>【输出样例】</strong></p><p>4  </p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1280" target="_blank" rel="noopener">luoguP1280</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>设dp[i] 表示当时间为i时，尼克在之后能获得的最大空暇。<br>从后往前进行dp<br>如果该时刻没有任务，dp[i] = dp[i+1] + 1<br>如果该时刻有任务，  dp[i] = max(dp[i],dp[i+T])<br>最终答案为dp[1],初始时全为0。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> p<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//for(int i = 1; i &lt;= k; i++) cout &lt;&lt; a[i] &lt;&lt; endl;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; i &lt;&lt;' ' &lt;&lt; p[a[j]] &lt;&lt; endl;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">==</span> p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span>t<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//  cout &lt;&lt; dp[i] &lt;&lt; " * " &lt;&lt; endl;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1091 合唱队形</title>
      <link href="/2019/02/12/luogup1091/"/>
      <url>/2019/02/12/luogup1091/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>N位同学站成一排，音乐老师要请其中的(N−K)位同学出列，使得剩下的K位同学排成合唱队形。<br>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1,2,…,K，他们的身高分别为T1,T2,…,TK,则他们的身高满足T1&lt;…<ti>T{i+1}&gt;…&gt;TK(1≤i≤K)。<br>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</ti></p><p><strong>【输入格式】</strong></p><p>共二行。<br>第一行是一个整数N(2≤N≤100)，表示同学的总数。<br>第二行有nn个整数，用空格分隔，第i个整数Ti(130≤Ti≤230)是第i位同学的身高(厘米)。  </p><p><strong>【输出格式】</strong></p><p>一个整数，最少需要几位同学出列</p><p><strong>【输入样例】</strong></p><p>8<br>186 186 150 200 160 130 197 220</p><p><strong>【输出样例】</strong></p><p>4</p><p><strong>【说明】</strong></p><p>对于50％的数据，保证有n n≤20；</p><p>对于全部的数据，保证有n n≤100。</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1091" target="_blank" rel="noopener">luoguP1091</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>枚举中间那个最高的身高，然后分别从左从右向最高的身高求LIS,此时此种方案下出列的同学最少，然后取枚举的所有方案中的最优结果。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> INF<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>n<span class="token operator">-</span>dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1020 导弹拦截</title>
      <link href="/2019/02/11/luogup1020/"/>
      <url>/2019/02/11/luogup1020/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</p><p>输入导弹依次飞来的高度（雷达给出的高度数据是≤50000的正整数），计算这套系统最多能拦截多少导弹，如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。</p><p><strong>【输入格式】</strong></p><p>1行，若干个整数（个数 ≤100000）</p><p><strong>【输出格式】</strong></p><p>2行，每行一个整数，第一个数字表示这套系统最多能拦截多少导弹，第二个数字表示如果要拦截所有导弹最少要配备多少套这种导弹拦截系统</p><p><strong>【输入样例】</strong></p><p>389 207 155 300 299 170 158 65</p><p><strong>【输出样例】</strong></p><p>6<br>2</p><p><strong>【说明】</strong></p><p>为了让大家更好地测试n方算法，本题开启spj，n方100分，nlogn200分</p><p>每点两问，按问给分</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1020" target="_blank" rel="noopener">luoguP1020</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>1.第一问求最长不上升子序列。反过来即最长不下降子序列，有n^2 的做法，还有nlogn的做法。<br>n^2做法：dp[i]表示前i个数最长的满足要求的序列长度。<br>nlogn 做法： dp[j] 表示长度为j时，最小的数值。 对于每一个a[i], 二分查找其应该放入dp数组中的哪个位置。<br>2.第二问求最少可划分为多少个不上升子序列。<br>应用dilworth定理：  设(X,≤) 是一个有限偏序集，并令m是反链的最大的大小。则X可以被划分成m个但不能再少的链<br>最少链划分 = 最长反链长度<br>所以最少划分数 = LIS<br><a href="https://www.cnblogs.com/flipped/p/5009943.html" target="_blank" rel="noopener">dilworth定理的讲解与证明</a> 《== 请点击<br>所以只需要用前面提到的nlogn的算法求LIS即可。  </p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> n<span class="token operator">++</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span>dp<span class="token operator">+</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">;</span>     dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span>dp<span class="token operator">+</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">;</span>      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP2789 直线交点数</title>
      <link href="/2019/02/09/luogup2789/"/>
      <url>/2019/02/09/luogup2789/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>平面上有N条直线，且无三线共点，那么这些直线能有多少不同的交点数？</p><p><strong>【输入格式】</strong></p><p>一个正整数N</p><p><strong>【输出格式】</strong></p><p>一个整数表示方案总数</p><p><strong>【输入样例】</strong></p><p>4  </p><p><strong>【输出样例】</strong></p><p>5</p><p><strong>【说明】</strong></p><p>N&lt;=25</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P2789" target="_blank" rel="noopener">luoguP2789</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>题目求不同交点数的方案数，那么我们可以将所有情况的交点数都求出，然后查重统计答案。可以根据是否平行划分成不同的情况，比如，对于n个点，我们考虑，n条直线相互平行、n-1条直线相互平行、n-2条直线相互平行、、、，即n-r条直线相互平行，那个这r条相互平行的直线与剩下的直线的交点数 = r(n-r), 然后我们再递归到下一层来讨论n-r的情况，依次类推下去。请结合代码理解！</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span> vis<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token function">fun</span><span class="token punctuation">(</span>x<span class="token operator">-</span>i<span class="token punctuation">,</span>i<span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cin <span class="token operator">>></span> n<span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Rucursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1616 疯狂的采药</title>
      <link href="/2019/02/04/luogup1616/"/>
      <url>/2019/02/04/luogup1616/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是LiYuxiang，你能完成这个任务吗？</p><p>此题和原题的不同点：</p><p>1.每种草药可以无限制地疯狂采摘。</p><p>2.药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p><p>如果你是辰辰，你能完成这个任务吗？</p><p><strong>【输入格式】</strong></p><p>输入第一行有两个整数T（1 &lt;= T &lt;= 100000）和M（1 &lt;= M &lt;= 10000），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到10000之间（包括1和10000）的整数，分别表示采摘某种草药的时间和这种草药的价值。</p><p><strong>【输出格式】</strong></p><p>1个整数，表示在规定的时间内可以采到的草药的最大总价值。</p><p><strong>【输入样例】</strong></p><p>70 3<br>71 100<br>69 1<br>1 2  </p><p><strong>【输出样例】</strong></p><p>140</p><p><strong>【说明】</strong></p><p>对于30%的数据，M &lt;= 1000；</p><p>对于全部的数据，M &lt;= 10000，且M*T&lt;10000000(别数了，7个0)。</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1616" target="_blank" rel="noopener">luoguP1616</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>完全背包模板题目，采药时间作为限制条件，等同于背包问题的体积，药品价值作为价值衡量，然后利用套用完全背包模板解题。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxc <span class="token operator">=</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span>M<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>           dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1049 装箱问题</title>
      <link href="/2019/02/04/luogup1049/"/>
      <url>/2019/02/04/luogup1049/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong>  </p><p>有一个箱子容量为V（正整数，0 ≤ V ≤ 20000），同时有n个物品 0&lt;n≤30，每个物品有一个体积（正整数）。</p><p>要求n个物品中，任取若干个装入箱内，使箱子的剩余空间为最小。</p><p><strong>【输入格式】</strong></p><p>1个整数，表示箱子容量</p><p>1个整数，表示有n个物品</p><p>接下来n行，分别表示这n个物品的各自体积  </p><p><strong>【输出格式】</strong></p><p>1个整数，表示箱子剩余空间。</p><p><strong>【输入样例】</strong></p><p>24<br>6<br>8<br>3<br>12<br>7<br>9<br>7  </p><p><strong>【输出样例】</strong></p><p>0</p><p><strong>【说明】</strong></p><p>NOIp2001普及组 第4题</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1049" target="_blank" rel="noopener">luoguP1049</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>01背包模板题目，体积作为限制条件，等同于背包问题的体积，体积也同时作为价值衡量，然后利用套用01背包模板解题，最后答案为剩余空间为箱子体积V - dp[V]。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxc <span class="token operator">=</span> <span class="token number">20000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> V<span class="token punctuation">,</span>n<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>V<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> V<span class="token punctuation">;</span> j <span class="token operator">>=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>      dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>V<span class="token operator">-</span>dp<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1048 采药</title>
      <link href="/2019/02/04/luogup1048/"/>
      <url>/2019/02/04/luogup1048/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><p><strong>【输入格式】</strong></p><p>第一行有2个整数 T (1 ≤ T ≤ 1000) 和 M ( 1 ≤ M ≤ 100)，用一个空格隔开，T代表总共能够用来采药的时间，MM代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。</p><p><strong>【输出格式】</strong></p><p>1个整数，表示在规定的时间内可以采到的草药的最大总价值。</p><p><strong>【输入样例】</strong></p><p>70 3<br>71 100<br>69 1<br>1 2  </p><p><strong>【输出样例】</strong></p><p>3</p><p><strong>【说明】</strong></p><p>对于30%的数据，M ≤ 10；</p><p>对于全部的数据，M ≤ 100。</p><p>NOIP2005普及组第三题</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1048" target="_blank" rel="noopener">luoguP1048</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>01背包模板题目，采药时间作为限制条件，等同于背包问题的体积，药品价值作为价值衡量，然后利用套用01背包模板解题。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxc <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> T<span class="token punctuation">,</span>M<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> T<span class="token punctuation">;</span> j <span class="token operator">>=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>           dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1164 小A点菜</title>
      <link href="/2019/02/04/luogup1164/"/>
      <url>/2019/02/04/luogup1164/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>uim神犇拿到了uoi的ra（镭牌）后，立刻拉着基友小A到了一家……餐馆，很低端的那种。<br>uim指着墙上的价目表（太低级了没有菜单），说：“随便点”。</p><p>不过uim由于买了一些辅（e）辅（ro）书，口袋里只剩M元(M≤10000)。<br>餐馆虽低端，但是菜品种类不少，有 N 种 (N≤100)，第i种卖 a[i]<br>元)(a[i] ≤ 1000)。<br>由于是很低端的餐馆，所以每种菜只有一份。<br>小A奉行“不把钱吃光不罢休”，所以他点单一定刚好吧uim身上所有钱花完。他想知道有多少种点菜方法。</p><p>由于小A肚子太饿，所以最多只能等待11秒。</p><p><strong>【输入格式】</strong></p><p>第一行是两个数字，表示NN和MM。</p><p>第二行起NN个正数a[i], 可以有相同的数字，每个数字均在1000以内。</p><p><strong>【输出格式】</strong></p><p>一个正整数，表示点菜方案数，保证答案的范围在int之内。</p><p><strong>【输入样例】</strong></p><p>4 4<br>1 1 2 2</p><p><strong>【输出样例】</strong></p><p>3</p><p><strong>【说明】</strong></p><p>NOIP 2006 普及组 第二题</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1164" target="_blank" rel="noopener">luoguP1164</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>01背包模板题目。第二种01背包问题类型，设dp[i][j], 为考虑前i件物品用光j元的方案数。<br>（1）if(j==第i道菜的价格) dp[i][j] = dp[i-1][j]+1;<br>（2）if(j&gt;第i道菜的价格)  dp[i][j] = dp[i-1][j]+dp[i-1][j-第i道菜的价格];<br>（3）if(j&lt;第i道菜的价格) dp[i][j] = dp[i-1][j];</p><p>也可用滚动数组优化，初始化时dp[] = {0}, dp[0] = 1;<br>动态转移方程为  dp[j] += dp[j-a[i]]; (j: m : a[i])</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>         dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1060 开心的金明</title>
      <link href="/2019/02/04/luogup1060/"/>
      <url>/2019/02/04/luogup1060/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1-5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。<br>设第j件物品的价格为v[j], 重要度为w[j], 共选中了k件物品，编号一次为j1,j2,…jk,则所求总和为：v[j1] <em> w[j1] + v[j2] </em> w[j2] + … + v[jk] * w[jk]。<br>请你帮助金明设计一个满足要求的购物单。</p><p><strong>【输入格式】</strong></p><p>第一行，为2个正整数，用一个空格隔开：N m（其中 N &lt; 30000) 表示总钱数，(m &lt; 25) 为希望购买物品的个数。</p><p>从第2行到第m+1行，第j行给出了编号为j−1的物品的基本数据，每行有2个非负整数 v p（其中v表示该物品的价格(v &lt;= 10000) p表示该物品的重要度(1-5)</p><p><strong>【输出格式】</strong></p><p>1个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值(&lt;100000000)。</p><p><strong>【输入样例】</strong></p><p>1000 5<br>800 2<br>400 5<br>300 5<br>400 3<br>200 2</p><p><strong>【输出样例】</strong></p><p>3900</p><p><strong>【说明】</strong></p><p>NOIP 2006 普及组 第二题</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1060" target="_blank" rel="noopener">luoguP1060</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>01背包模板题目，价格作为限制条件，等同于背包问题的体积，价格和重要度的乘积作为价值衡量，然后利用套用01背包模板解题。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">30000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1064 金明的预算方案</title>
      <link href="/2019/02/04/luogup1064/"/>
      <url>/2019/02/04/luogup1064/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早金明就开始做预算，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子：</p><p>主件 附件</p><p>电脑 打印机，扫描仪</p><p>书柜 图书</p><p>书桌 台灯，文具</p><p>工作椅 无</p><p>如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。<br>但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1-5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。<br>设第j件物品的价格为v[j], 重要度为w[j], 共选中了k件物品，编号一次为j1,j2,…jk,则所求总和为：v[j1] <em> w[j1] + v[j2] </em> w[j2] + … + v[jk] * w[jk]。<br>请你帮助金明设计一个满足要求的购物单。</p><p><strong>【输入格式】</strong></p><p>第11行，为两个正整数，用一个空格隔开：</p><p>N m （其中 N(&lt;32000) 表示总钱数，m(&lt;60)为希望购买物品的个数。） 从第2行到第m+1行，第j行给出了编号为j−1的物品的基本数据，每行有3个非负整数 vpq （其中vv表示该物品的价格(v&lt;10000)，p表示该物品的重要度（1-5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）</p><p><strong>【输出格式】</strong></p><p>一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</p><p><strong>【输入样例】</strong></p><p>1000 5<br>800 2 0<br>400 5 1<br>300 5 1<br>400 3 0<br>500 2 0     </p><p><strong>【输出样例】</strong></p><p>2200<br><strong>【说明】</strong></p><p>NOIP 2006 提高组 第二题</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1064" target="_blank" rel="noopener">luoguP1064</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>01背包模板题目，价格作为限制条件，等同于背包问题的体积，价格和重要度的乘积作为价值衡量，然后利用套用01背包模板解题。<br>然后这题是P1060的升级版，要分类讨论一下。<br>1.不取该主件<br>2.只取该主件<br>3.取主件和附件1<br>4.取主件和附件2<br>5.取主件和附件1、2</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxc <span class="token operator">=</span> <span class="token number">32000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">,</span>m<span class="token punctuation">,</span>u<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>P<span class="token operator">></span> vs<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxc<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>         mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>tot<span class="token punctuation">;</span>         vs<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>u<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token keyword">else</span> vs<span class="token punctuation">[</span>mp<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>u<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> c<span class="token punctuation">;</span> j <span class="token operator">>=</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">+</span> vs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1129 [ZJOI2007]矩阵游戏</title>
      <link href="/2019/02/01/luogup1129/"/>
      <url>/2019/02/01/luogup1129/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>小Q是一个非常聪明的孩子，除了国际象棋，他还很喜欢玩一个电脑益智游戏――矩阵游戏。矩阵游戏在一个N×N黑白方阵进行（如同国际象棋一般，只是颜色是随意的）。每次可以对该矩阵进行两种操作：</p><p>行交换操作：选择矩阵的任意两行，交换这两行（即交换对应格子的颜色）</p><p>列交换操作：选择矩阵的任意两列，交换这两列（即交换对应格子的颜色）</p><p>游戏的目标，即通过若干次操作，使得方阵的主对角线(左上角到右下角的连线)上的格子均为黑色。</p><p>对于某些关卡，小Q百思不得其解，以致他开始怀疑这些关卡是不是根本就是无解的！于是小Q决定写一个程序来判断这些关卡是否有解。</p><p><strong>【输入格式】</strong></p><p>第一行包含一个整数T，表示数据的组数。</p><p>接下来包含T组数据，每组数据第一行为一个整数N，表示方阵的大小；接下来N行为一个N×N的01矩阵（0表示白色，1表示黑色）。</p><p><strong>【输出格式】</strong></p><p>包含T行。对于每一组数据，如果该关卡有解，输出一行Yes；否则输出一行No</p><p><strong>【输入样例】</strong></p><p>2<br>2<br>0 0<br>0 1<br>3<br>0 0 1<br>0 1 0<br>1 0 0  </p><p><strong>【输出样例】</strong></p><p>No<br>Yes</p><p><strong>【说明】</strong></p><p>对于20%的数据，N ≤ 7<br>对于50%的数据，N ≤ 50<br>对于%100%的数据，N ≤ 200</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1129" target="_blank" rel="noopener">luoguP1129</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>二分图最大匹配变形，使用匈牙利算法。<br>行和列交换，问是否最终能使正对角线上的各自全为黑色，经过观察可以发现，对于任意2个黑色方块，如果它们初始状态时不在同一行（列），那么无论如何交换，它们都不会在同一行（列）。所以，只需要查看初始状态下，对于每一行是否有一列能与之匹配，再利用二分图最大匹配查看行和列的匹配数，如若等于n,则说明则可以满足题意。输出yes,否则输出No。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">200</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">100000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> line<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> to<span class="token punctuation">,</span>next<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> to <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span> es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i <span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Max_match</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> all <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> all<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> T<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>           <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">Max_match</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> n<span class="token punctuation">)</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Bipartite graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1640 [SCOI2010]连续攻击游戏</title>
      <link href="/2019/02/01/luogup1640/"/>
      <url>/2019/02/01/luogup1640/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>lxhgww最近迷上了一款游戏，在游戏里，他拥有很多的装备，每种装备都有2个属性，这些属性的值用[1,10000]之间的数表示。当他使用某种装备时，他只能使用该装备的某一个属性。并且每种装备最多只能使用一次。游戏进行到最后，lxhgww遇到了终极boss，这个终极boss很奇怪，攻击他的装备所使用的属性值必须从1开始连续递增地攻击，才能对boss产生伤害。也就是说一开始的时候，lxhgww只能使用某个属性值为1的装备攻击boss，然后只能使用某个属性值为2的装备攻击boss，然后只能使用某个属性值为3的装备攻击boss……以此类推。现在lxhgww想知道他最多能连续攻击boss多少次？</p><p><strong>【输入格式】</strong></p><p>输入的第一行是一个整数N，表示lxhgww拥有N种装备接下来N行，是对这N种装备的描述，每行2个数字，表示第i种装备的2个属性值</p><p><strong>【输出格式】</strong></p><p>输出一行，包括1个数字，表示lxhgww最多能连续攻击的次数。</p><p><strong>【输入样例】</strong></p><p>3<br>1 2<br>3 2<br>4 5  </p><p><strong>【输出样例】</strong></p><p>2</p><p><strong>【说明】</strong></p><p>对于30%的数据，保证N &lt; = 1000</p><p>对于100%的数据，保证N &lt; = 1000000</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1640" target="_blank" rel="noopener">luoguP1640</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>二分图最大匹配变形，使用匈牙利算法，左边为武器属性，右边为武器编号，根据武器的属性进行建边，然后从1到属性最大值开始找增广路，若没找到则break,因为武器属性必须连续。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> line<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> to<span class="token punctuation">,</span>next<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> to <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span> es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">~</span>i <span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Max_match</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> all <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//属性从1开始</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> all<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_edge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add_edge</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">Max_match</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Bipartite graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP3386 【模板】二分图匹配</title>
      <link href="/2019/02/01/luogup3386/"/>
      <url>/2019/02/01/luogup3386/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>给定一个二分图，结点个数分别为n,m，边数为e，求二分图最大匹配数</p><p><strong>【输入格式】</strong></p><p>第一行，n,m,e</p><p>第二至e+1行，每行两个正整数u,v，表示u,v有一条连边</p><p><strong>【输出格式】</strong></p><p>共一行，二分图最大匹配</p><p><strong>【输入样例】</strong></p><p>1 1 1<br>1 1</p><p><strong>【输出样例】</strong></p><p>1</p><p><strong>【说明】</strong></p><p>n,m ≤ 1000, 1 ≤ u ≤ n, 1 ≤ v ≤ m, e ≤ n × m<br>因为数据有坑，可能会遇到 v &gt; m 或者 u &gt; n 的情况。<br>请把 v &gt; m 或者 u &gt; n 的数据自觉过滤掉。</p><p>算法：二分图匹配</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P3386" target="_blank" rel="noopener">luoguP3386</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>二分图匹配的最大匹配问题，裸题。由于n,m都在1000以内，所以可以选用匈牙利算法(O(VE))。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存图，pXn 的图</span><span class="token keyword">bool</span> vis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记一次寻找增广路是对边顶点</span><span class="token keyword">int</span> line<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录匹配方案</span><span class="token comment" spellcheck="true">//寻找增广路O(VE)</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>line<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Max_match</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> all <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> all<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>e<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> u <span class="token operator">></span> n <span class="token operator">||</span> v <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> v <span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    u<span class="token operator">--</span><span class="token punctuation">,</span>v<span class="token operator">--</span><span class="token punctuation">;</span>    g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">Max_match</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Bipartite graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nowcoder317C 小a与星际探索</title>
      <link href="/2019/01/23/nowcoder317c/"/>
      <url>/2019/01/23/nowcoder317c/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>小a正在玩一款星际探索游戏，小a需要驾驶着飞船从1号星球出发前往n号星球。其中每个星球有一个能量指数p。星球i能到达星球j当且仅当 pi &gt; pj 。同时小a的飞船还有一个耐久度 t，初始时为 1号点的能量指数，若小a前往星球 j，那么飞船的耐久度会变为 t⊕pj (即t异或pj，关于其定义请自行百度) 小a想知道到达n号星球时耐久度最大为多少 注意：对于每个位置来说，从它出发可以到达的位置仅与两者的p有关，与下标无关。</p><p><strong>【输入格式】</strong></p><p>第一行一个整数n，表示星球数接下来一行有n个整数，第i个整数表示pi。</p><p><strong>【输出格式】</strong></p><p>一个整数表示到达n号星球时最大的耐久度<br>若不能到达n号星球或到达时的最大耐久度为0则输出−1</p><p><strong>【输入样例】</strong></p><p>3<br>457 456 23</p><p><strong>【输出样例】</strong></p><p>478</p><p><strong>【说明】</strong></p><p>小a有两种方法到达3号星球<br>第一种：1→2→3，最终耐久度为457⊕456⊕23=22<br>第二种：1→3，最终耐久度为 457⊕3=478</p><p>1⩽n,∀pi⩽3000</p><p><strong>【测试网站】</strong></p><p><a href="https://ac.nowcoder.com/acm/contest/317/C" target="_blank" rel="noopener">nowcoder317C</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>到达性dp问题，与极值dp略作区分(自己瞎编的haha)<br>首先可以按照pi从大到排序，将1和n之间的p取出来并去重，然后直接在新序列上做背包，用dp[i][j]表示到达第i个位置，当前耐久度为j是否可行。转移的时候分两种情况讨论：</p><ol><li>到达该点</li><li>不到达该点<br>对n位置特殊判断一下，最后枚举n所在位置dp数组的第二维，判断一下即可<br>注意一个小细节：dp数组的第二维不能只开到3000要开到4096<br>时间复杂度：O(np)</li></ol><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair <span class="token operator">&lt;</span>LL<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">3000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">4096</span><span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>tot <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  p<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>tot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  n <span class="token operator">=</span> tot<span class="token punctuation">;</span>  tot <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> tot<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> tot<span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">^</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">^</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP2766 最长不下降子序列问题</title>
      <link href="/2019/01/23/luogup2766/"/>
      <url>/2019/01/23/luogup2766/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>«问题描述：</p><p>给定正整数序列x1,…,xn 。</p><p>（1）计算其最长不下降子序列的长度s。</p><p>（2）计算从给定的序列中最多可取出多少个长度为s的不下降子序列。</p><p>（3）如果允许在取出的序列中多次使用x1和xn，则从给定序列中最多可取出多少个长度为s的不下降子序列。</p><p>«编程任务：</p><p>设计有效算法完成（1）（2）（3）提出的计算任务。</p><p><strong>【输入格式】</strong></p><p>第1 行有1个正整数n，表示给定序列的长度。接下来的1 行有n个正整数n:x1, …, xn。</p><p><strong>【输出格式】</strong></p><p>第1 行是最长不下降子序列的长度s。第2行是可取出的长度为s 的不下降子序列个数。第3行是允许在取出的序列中多次使用x1和xn时可取出的长度为s 的不下降子序列个数。</p><p><strong>【输入样例】</strong></p><p>4<br>3 6 2 5</p><p><strong>【输出样例】</strong></p><p>2<br>2<br>3  </p><p><strong>【说明】</strong></p><p>n≤500</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P2766" target="_blank" rel="noopener">luoguP2766</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>先用 dp 求得最长上升子序列  解决题（1）</p><p>然后每个数拆点，连一个流量为1 的边， 对于 a[i] &lt;= a[j] 且 i &lt; j,且 dp[i] + 1 = dp[j]  连一条 i - j+n 流量为 1 的边,</p><p>对于 dp[i] = 1,  s —–INF–&gt;i    对于dp[i] = LIS  i+n —-INF—&gt; t,  ans = dinic(s,t); 解决题（2）</p><p>对于题（3）  将 1 和 n 拆点自边 的流量从1 改成 INF 就可以了， ans += dinic(s,t); 解决题(3)</p><p>注意特判一下 LIS = 1 的情况</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1500</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录层数</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链式前向星</span><span class="token keyword">int</span> cur<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> to<span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token keyword">int</span> next<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录边 注意是2倍</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>c<span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; u &lt;&lt;" " &lt;&lt;v &lt;&lt; " " &lt;&lt; c&lt;&lt;endl;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">memset</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   l<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout  &lt;&lt; u &lt;&lt;endl;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> t<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>         <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> mf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token keyword">return</span> mf<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">=</span> cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span>mf <span class="token operator">-</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">-</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        ret <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> mf<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> maxa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       maxa <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxa<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">add_edge</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> maxa<span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token operator">+</span>n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token operator">+</span>n<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n1\n1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>maxa <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d\n%d\n"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>maxa<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   es<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> INF<span class="token punctuation">;</span>   es<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">=</span> INF<span class="token punctuation">;</span>   res <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Network-flows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP3171 [CQOI2015]网络吞吐量</title>
      <link href="/2019/01/23/luogup3171/"/>
      <url>/2019/01/23/luogup3171/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>路由是指通过计算机网络把信息从源地址传输到目的地址的活动，也是计算机网络设计中的重点和难点。网络中实现路由转发的硬件设备称为路由器。为了使数据包最快的到达目的地，路由器需要选择最优的路径转发数据包。例如在常用的路由算法OSPF(开放式最短路径优先)中，路由器会使用经典的Dijkstra算法计算最短路径，然后尽量沿最短路径转发数据包。现在，若已知一个计算机网络中各路由器间的连接情况，以及各个路由器的最大吞吐量（即每秒能转发的数据包数量），假设所有数据包一定沿最短路径转发，试计算从路由器1到路由器n的网络的最大吞吐量。计算中忽略转发及传输的时间开销，不考虑链路的带宽限制，即认为数据包可以瞬间通过网络。路由器1到路由器n作为起点和终点，自身的吞吐量不用考虑，网络上也不存在将1和n直接相连的链路。。</p><p><strong>【输入格式】</strong></p><p>输入文件第一行包含两个空格分开的正整数n和m，分别表示路由器数量和链路的数量。网络中的路由器使用1到n编号。接下来m行，每行包含三个空格分开的正整数a、b和d，表示从路由器a到路由器b存在一条距离为d的双向链路。 接下来n行，每行包含一个正整数c，分别给出每一个路由器的吞吐量。</p><p><strong>【输出格式】</strong></p><p>输出一个整数，为题目所求吞吐量。</p><p><strong>【输入样例】</strong></p><p>7 10<br>1 2 2<br>1 5 2<br>2 4 1<br>2 3 3<br>3 7 1<br>4 5 4<br>4 3 1<br>4 6 1<br>5 6 2<br>6 7 1<br>1<br>100<br>20<br>50<br>20<br>60<br>1  </p><p><strong>【输出样例】</strong></p><p>70</p><p><strong>【说明】</strong></p><p>对于100%的数据，n&lt;=500，m&lt;=100000，d,c&lt;=10^9</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P3171" target="_blank" rel="noopener">luoguP3171</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>题意：有一个路由网络, 每个路由器有一个吞吐量, 不同的路由器之间会有链路, 该链路带宽不限, 但是有一个距离, 该路由网络的传输数据严格按照算法OSPF(开放式最短路径优先)来规划数据传输，即使用经典的Dijkstra算法计算最短路径并沿最短路径转发数据包。然后求1到n的最大吞吐量。<br>解决办法：拆点建图，将路由器拆成两个点，i,i+n,然后构建一条流量为吞吐量的边(i –&gt; i+n); 在原路由网络双向跑最短路，然后根据d1[],d2[],d的关系来选择有效边, 即最短路上的边，将该边放入新网络，流量为INF。 然后跑dinic最大流即可。<br>注意：1,n,自己本身的吞吐量不受限制; 由于最短路不一定只有一条, 所以maxflow 可能会超过1e9, 所以要用long long !</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair <span class="token operator">&lt;</span>LL<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">600</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>LL d1<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>d2<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>maxm<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>    <span class="token keyword">int</span> to<span class="token punctuation">,</span>cost<span class="token punctuation">;</span>    <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cost</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector <span class="token operator">&lt;</span>edge<span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> d1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span>    d1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    priority_queue <span class="token operator">&lt;</span> P<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>P<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>P<span class="token operator">></span> <span class="token operator">></span>  Q<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//P.first 是距离，.P.second 是顶点</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P x <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LL dist <span class="token operator">=</span> x<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> x<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排除u相同时, dist不同的情况。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            edge e <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> d1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d1<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> d2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e18</span><span class="token punctuation">;</span>    d2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        P x <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LL dist <span class="token operator">=</span> x<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> x<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>d2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排除u相同时, dist不同的情况。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            edge e <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>d2<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> d2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                d2<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">P</span><span class="token punctuation">(</span>d2<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>dist<span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>dist<span class="token punctuation">)</span><span class="token punctuation">;</span>      a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">;</span>      G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> l<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录层数</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链式前向星</span><span class="token keyword">int</span> cur<span class="token punctuation">[</span>maxn<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge1<span class="token punctuation">{</span>  <span class="token keyword">int</span> to<span class="token punctuation">,</span>c<span class="token punctuation">,</span>next<span class="token punctuation">;</span>  <span class="token function">edge1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录边 注意是2倍</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//cout &lt;&lt; u &lt;&lt; " " &lt;&lt; v &lt;&lt; " " &lt;&lt; c &lt;&lt; endl;</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge1</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>c<span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge1</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">memset</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   l<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> t<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>         <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> mf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token keyword">return</span> mf<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">=</span> cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span>mf <span class="token operator">-</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">-</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        ret <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> mf<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  LL ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">select_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>n<span class="token punctuation">,</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>d1<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>d2<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token function">add_edge</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>d2<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>d1<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> d1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token function">add_edge</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">select_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> <span class="token function">dinic</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Network-flows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP2604 [ZJOI2010]网络扩容</title>
      <link href="/2019/01/22/luogup2604/"/>
      <url>/2019/01/22/luogup2604/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>给定一张有向图，每条边都有一个容量C和一个扩容费用W。这里扩容费用是指将容量扩大1所需的费用。  求：<br>1、 在不扩容的情况下，1到N的最大流；<br>2、 将1到N的最大流增加K所需的最小扩容费用。</p><p><strong>【输入格式】</strong></p><p>输出文件一行包含两个整数，分别表示问题1和问题2的答案。</p><p><strong>【输出格式】</strong></p><p>1个整数，表示具有该性质数的个数。</p><p><strong>【输入样例】</strong></p><p>5 8 2<br>1 2 5 8<br>2 5 9 9<br>5 1 6 2<br>5 1 1 8<br>1 2 8 7<br>2 5 4 9<br>1 2 1 1<br>1 4 2 1   </p><p><strong>【输出样例】</strong></p><p>13 19</p><p><strong>【说明】</strong></p><p>30%的数据中，N&lt;=100</p><p>100%的数据中，N&lt;=1000，M&lt;=5000，K&lt;=10</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P2604" target="_blank" rel="noopener">luoguP2604</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>首先题意很明显，第一问是求最大流，直接用Dinic求最大流即可，不知道怎么求最大流请先学习如何求最大流，第二问是求最小花费下使最大流增长k，所以其本质是最小费用最大流，只需要建图时注意，将一条边分别拆成一条费用为0容量为c的边和一条费用为w容量为INF的边，然后再用EK&amp;Spfa跑最小费用最大流的增广时，如果当前flow + a[t] &gt;= k(需要增加的流) + maxflow(dinic所求)， 则不需要再增广，并且使cost加上相应的最后部分流增广的费用，然后返回退出即可。详见代码。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录层数</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链式前向星</span><span class="token keyword">int</span> cur<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>  <span class="token keyword">int</span> to<span class="token punctuation">;</span>  <span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token keyword">int</span> next<span class="token punctuation">;</span>  <span class="token function">edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">to</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>es<span class="token punctuation">[</span>maxm<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录边 注意是2倍</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>c<span class="token punctuation">,</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>    es<span class="token punctuation">[</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">memset</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   l<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>   q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u <span class="token operator">==</span> t<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>         <span class="token keyword">int</span> v <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>l<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> mf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token keyword">return</span> mf<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>i <span class="token operator">=</span> cur<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> l<span class="token punctuation">[</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">,</span>mf <span class="token operator">-</span> ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">-</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        es<span class="token punctuation">[</span>i<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        ret <span class="token operator">+</span><span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> mf<span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">bfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//const LL mod = 1e9 + 7;</span><span class="token macro property">#<span class="token directive keyword">define</span> PI 3.1415926</span><span class="token macro property">#<span class="token directive keyword">define</span> sc(x)  scanf("%d",&amp;x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pf(x)  printf("%d",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfn(x) printf("%d\n",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfln(x) printf("%lld\n",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> pfs(x) printf("%d ",x)</span><span class="token macro property">#<span class="token directive keyword">define</span> rep(n) for(int i = 0; i &lt; n; i++)</span><span class="token macro property">#<span class="token directive keyword">define</span> per(n) for(int i = n-1; i >= 0; i--)</span><span class="token macro property">#<span class="token directive keyword">define</span> mem(a,x) memset(a,x,sizeof(a))</span><span class="token keyword">struct</span> edge1<span class="token punctuation">{</span>  <span class="token keyword">int</span> from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span>flow<span class="token punctuation">,</span>cost<span class="token punctuation">;</span>  <span class="token function">edge1</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">int</span> flow<span class="token punctuation">,</span> <span class="token keyword">int</span> cost<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">from</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">to</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cap</span><span class="token punctuation">(</span>cap<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">flow</span><span class="token punctuation">(</span>flow<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cost</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> tot1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>edge1<span class="token operator">></span> E<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> inq<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">,</span> <span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">int</span> cost<span class="token punctuation">)</span><span class="token punctuation">{</span>  E<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge1</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>cap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  E<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">edge1</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span>from<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tot1 <span class="token operator">=</span> E<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  G<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tot1<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  G<span class="token punctuation">[</span>to<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tot1<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>flow<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>cost<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">mem</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>INF<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mem</span><span class="token punctuation">(</span>inq<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>inq<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>  queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span>  Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inq<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      edge1 e <span class="token operator">=</span> E<span class="token punctuation">[</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>cap <span class="token operator">></span> e<span class="token punctuation">.</span>flow <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        d<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>cost<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>cap <span class="token operator">-</span> e<span class="token punctuation">.</span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>inq<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span> inq<span class="token punctuation">[</span>e<span class="token punctuation">.</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flow <span class="token operator">+</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    cost <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>k<span class="token operator">-</span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  flow <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>  cost <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> u <span class="token operator">=</span> t<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>u <span class="token operator">!=</span> s<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    E<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    E<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flow <span class="token operator">-</span><span class="token operator">=</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    u <span class="token operator">=</span> E<span class="token punctuation">[</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>from<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">mcf</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> flow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">spfa</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">,</span>flow<span class="token punctuation">,</span>cost<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token keyword">return</span> cost<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>   tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addedge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addedge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>INF<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">dinic</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>   k <span class="token operator">+</span><span class="token operator">=</span> ans<span class="token punctuation">;</span>   <span class="token keyword">int</span> s<span class="token punctuation">,</span>t<span class="token punctuation">;</span>   s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> n<span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d\n"</span><span class="token punctuation">,</span><span class="token function">mcf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graph Theory </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Network-flows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>luoguP1028 数的计算</title>
      <link href="/2018/12/17/luogup1028/"/>
      <url>/2018/12/17/luogup1028/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>我们要求找出具有下列性质数的个数(包含输入的自然数 n ):</p><p>先输入一个自然数 n (n ≤ 1000),然后对此自然数按照如下方法进行处理:</p><pre><code>1.不作任何处理;2.在它的左边加上一个自然数,但该自然数不能超过原数的一半;3.加上数后,继续按此规则进行处理,直到不能再加自然数为止.</code></pre><p><strong>【输入格式】</strong></p><p>1个自然数 n (n ≤ 1000)</p><p><strong>【输出格式】</strong></p><p>1个整数，表示具有该性质数的个数。</p><p><strong>【输入样例】</strong></p><p>6</p><p><strong>【输出样例】</strong></p><p>6</p><p><strong>【说明】</strong></p><p>满足条件的数为</p><p>6，16，26，126，36，136</p><p><strong>【测试网站】</strong></p><p><a href="https://www.luogu.org/problemnew/show/P1028" target="_blank" rel="noopener">luoguP1028</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>题目给出一个n, 然后根据题目给的操作我们可以得到一些数，题目求总共得到的数的个数。所以我们可以递归的求出所有得到的数。为了不重复进行递归操作，我们用num[i] 数组来记录从 i 递归下去可以得到的数的个数，包括它本身。num数组开始时全部初始化为-1，num[i] ==  -1 表示 i 还未被递归求过。num[i] != -1 则说明 i 已经被递归过了，则不需要递归，直接返回num[i] 即可。</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span> </span><span class="token comment" spellcheck="true">// memset函数的头文件</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//num[x] != -1 则说明 x 已经被递归过了，则不需要递归，直接返回num[x] 即可。</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//num[x] ==  -1 表示 x 还未被递归求过</span>  num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代表自己的 1</span>  <span class="token comment" spellcheck="true">// 搜索小于等于自己一半的数，统计通过这些数可以得到的数的个数</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  num<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> num<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计完所有的把num[x]返回到上一层</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// memset函数 ： 将num数组中的所有元素赋值为-1</span>  cin <span class="token operator">>></span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入n</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//递归计算从n出发能得到的数的总数</span>  cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU2955 01 背包 Robberies</title>
      <link href="/2018/12/17/hdu2955/"/>
      <url>/2018/12/17/hdu2955/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>Roy想要抢劫银行，每家银行都有一定的金额和被抓到的概率，知道Roy被抓的最大概率P，求Roy在不被抓的情况下，最多抢劫多少钱。</p><p><strong>【输入格式】</strong></p><p>第一行输入给出T，即案例数。<br>对于每个场景，第一行输入给出浮点数P，Roy需要低于的概率，以及整数N，即他计划的银行数。<br>然后接下来N行，其中第j行给出整数Mj和浮点数Pj . 表示 Bank j包含Mj百万，并且被抓住它的概率是Pj。</p><p><strong>【输出格式】</strong></p><p>对于每个测试用例，输出一个他可以获得的最大数百万行，而被捕获的概率小于限制集.<br>0 &lt;T &lt;= 1000.0 &lt;= P &lt;= 1.00 &lt;N &lt;= 1000 &lt;Mj &lt;= 1000.0 &lt;= Pj &lt;= 1.0<br>银行如果被抢劫就会破产，你可以认为所有概率都是独立的。</p><p><strong>【输入样例】</strong></p><p>3<br>0.04 3<br>1 0.02<br>2 0.03<br>3 0.05<br>0.06 3<br>2 0.03<br>2 0.03<br>3 0.05<br>0.10 3<br>1 0.03<br>2 0.02<br>3 0.05</p><p><strong>【输出样例】</strong></p><p>2<br>4<br>6</p><p><strong>【测试网站】</strong></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2955" target="_blank" rel="noopener">HDU2955</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>到达性dp问题。<br>状态转移方程为 <b> dp[j] = max(dp[j],dp[j-v[i]] * (1-p[i])); </b> dp[i] 表示能抢到i个百万不被抓到的最大概率。<br>套用01背包模板，把银行里的总钱数当作总容量，概率当作价值 ，最后再根据概率判断其能不能到达该钱数。<br><b>被抓到的最小概率 = 1-不被抓到的最大概率</b></p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">double</span> P<span class="token punctuation">;</span><span class="token keyword">double</span> p<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//dp数组，dp[i] 代表能抢到i个百万不被抓到的最大概率</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> T<span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>P<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//统计总钱数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化dp 数组</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抢到0个百万的概率总是为1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token punctuation">;</span> j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>         dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//状态转移</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> sum<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> P<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//被抓到的最小概率 = 1-不被抓到的最大概率</span>              <span class="token punctuation">{</span>ans <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU3466 Proud Merchants</title>
      <link href="/2018/12/17/hdu3466/"/>
      <url>/2018/12/17/hdu3466/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>现在n个物品，每组物品有三个属性，pi，买这种物品你需要花费的钱，vi,该物品的价值。qi,如果你想要买这种物品你所拥有的钱必须大于qi。<br>问你能用你所有的钱最多能获得多大价值。<br>(每个物品只能买一次）</p><p><strong>【输入格式】</strong></p><p>有多组测试数据。<br>对于每组测试数据开始时有两个书N,M (1 ≤ N ≤ 500, 1 ≤ M ≤ 5000);分别表示物品的编号和你所拥有的钱数。<br>然后是N行，每行包含三个数字Pi，Qi和Vi（1≤Pi≤Qi≤100,1≤Vi≤1000），它们的含义在描述中。<br>输入终止于文件结束标记。</p><p><strong>【输出格式】</strong></p><p>对于每个测试用例，输出一个整数，表示你可以得到的物品的价值总和的最大值。</p><p><strong>【输入样例】</strong></p><p>2 10<br><br>10 15 10<br><br>5 10 5<br><br>3 10<br><br>5 10 5<br><br>3 5 6<br><br>2 7 3</p><p><strong>【输出样例】</strong></p><p>2<br><br>4<br><br>6</p><p><strong>【测试网站】</strong></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3466" target="_blank" rel="noopener">HDU3466</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>因为每个物品都有一个限制q，而01背包dp是从前i个物品转移到前i+1个物品，所以必须保证转移时无后效性，即前面i个物品选择的结果不会影响到后面的选择.<br>在这里体现在前i个物品中会影响的范围为q-p;如果第i+1个物品的q-p &gt; 前i个物品的q-p,则可以保证如果选择第i个物品，那么前面i+1个物品的q的限制条件都能满足。 即 qi+1 在的位置&gt;qi</p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">5005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>  <span class="token keyword">int</span> p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span> <span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">.</span>q <span class="token operator">-</span> a<span class="token punctuation">.</span>p <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>q <span class="token operator">-</span> b<span class="token punctuation">.</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>q<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排序</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化dp数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>q<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无后效性dp</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU5890 Eighty seven</title>
      <link href="/2018/12/17/hdu5890/"/>
      <url>/2018/12/17/hdu5890/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目内容"><a href="#一、题目内容" class="headerlink" title="一、题目内容"></a>一、题目内容</h2><p><strong>【题目描述】</strong></p><p>Fib先生是一所小学的数学老师。<br>在下一课中，他计划教孩子们如何加数字。<br>在课前，他将准备N张数字牌。第i张牌上的号码是ai。<br>在课堂上，每回合，他将删除不超过3张卡片，然后让学生选择任意十张卡片，其中数字的总和为87.<br>每次转动后，被删除的卡片将被放回原位。现在，他想知道每回合是否至少有一个解决方案。你能帮助他吗？</p><p><strong>【输入格式】</strong></p><p>第一行输入包含整数t（t≤5），即测试用例的数量。<br>对于每个测试用例，第一行包含整数N（N≤50）。<br>第二行包含N个非负整数a1，a2，…，aN。<br>第i个数字代表第i个卡上的数字。<br>第三行包括整数Q（Q≤100000）。<br>下一个Q行的每一行包含三个整数i，j，k，表示Mr.Fib将在本回合中删除第i，第j和第k个卡。当i = j，i = k或j = k时，问题可能会退化。</p><p><strong>【输出格式】</strong></p><p>对于每种情况的每一轮，如果存在至少一个解，则输出“是”，否则输出“否”。</p><p><strong>【输入样例】</strong></p><p>1<br>12<br>1 2 3 4 5 6 7 8 9 42 21 22<br>10<br>1 2 3<br>3 4 5<br>2 3 2<br>10 10 10<br>10 11 11<br>10 1 1<br>1 2 10<br>1 11 12<br>1 10 10<br>11 11 12</p><p><strong>【输出样例】</strong><br>No<br>No<br>No<br>Yes<br>No<br>Yes<br>No<br>No<br>Yes<br>Yes</p><p><strong>【测试网站】</strong></p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5890" target="_blank" rel="noopener">HDU5890</a></p><h2 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a>二、题目分析</h2><p>题目大意是 给出n个数和q次询问，每次删除1到3个数，问使否能从剩下的数中选10个数和为87</p><p>因为N只有50所以可以先预处理所有情况</p><p>然后用bitset &lt;90&gt; dp[11] 进行二维背包dp  dp[i][j] 为1 代表在取i个数时能加和到 j ；</p><p><a href="https://blog.csdn.net/snowy_smile/article/details/79120063" target="_blank" rel="noopener">bitset 用法</a></p><h2 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bitset></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">508</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxm <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> LL<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>Q<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>bitset<span class="token operator">&lt;</span><span class="token number">90</span><span class="token operator">></span> dp<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// dp[i][j] 为1 代表在取i个数时能加和到 j</span><span class="token keyword">bool</span> ans<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ans[i][j][k]表示然后i,j,k后是否能组成87</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> y <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> z<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二维dp + bitset优化</span>   <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> T<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//预处理</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
